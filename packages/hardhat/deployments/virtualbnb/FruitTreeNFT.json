{
  "address": "0xdb5b11a122De30bfF84976A15577f8818cEB11d7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "name": "HarvestClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingsCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProfitWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TreeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "TreesListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "TreesSold",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SECONDS_PER_MONTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeListings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyTreesFromSeller",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "cancelListings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMultipleHarvests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSellersWithListings",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "sellers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTreeTypes",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "treeTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basePrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "currentPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "harvestCycleMonths",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "profitRatesPerCycle",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "yearlyAppreciations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getAvailableHarvests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        }
      ],
      "name": "getCurrentTreePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketplaceGroupedData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "enum FruitTreeNFT.TreeType",
              "name": "treeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct FruitTreeNFT.MarketplaceGroup[]",
          "name": "groups",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getSellerListingsSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum FruitTreeNFT.TreeType",
              "name": "treeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct FruitTreeNFT.SellerSummary[]",
          "name": "summary",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        }
      ],
      "name": "getSellerTreesByType",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "listingTimes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTreeDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "treeName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "currentValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableHarvests",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalHarvests",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextHarvestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getTreeDetailsByOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "treeNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "currentValues",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "availableHarvestsArray",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "totalHarvestsArray",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "nextHarvestTimes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        }
      ],
      "name": "getTreeTypeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "basePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "harvestCycleMonths",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "profitRatePerCycle",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yearlyAppreciation",
              "type": "uint256"
            }
          ],
          "internalType": "struct FruitTreeNFT.TreeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTreeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasActiveListings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "listTreesForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintTree",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerTreeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "profitBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerActiveTreeTypes",
      "outputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerTreesByType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "treeTypeInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "basePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "harvestCycleMonths",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "profitRatePerCycle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearlyAppreciation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trees",
      "outputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "mintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastHarvestTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalHarvests",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_basePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_harvestCycleMonths",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_profitRatePerCycle",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yearlyAppreciation",
          "type": "uint256"
        }
      ],
      "name": "updateTreeTypeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawContractFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawProfits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x29f4ea1094dfc4e8c90641fcca55b0d6eb9bb9c14ff6b3d57ea5195cf83c2489",
  "receipt": {
    "to": null,
    "from": "0xd01EC2D86fD5B7ADd0D9E45315577C273Ec1a91c",
    "contractAddress": "0xdb5b11a122De30bfF84976A15577f8818cEB11d7",
    "transactionIndex": 0,
    "gasUsed": "5895593",
    "logsBloom": "0x
    "blockHash": "0xdd34cb42c55832085da56140abdfd829610ca3b4578d9cb496a503c064b8ae17",
    "transactionHash": "0x29f4ea1094dfc4e8c90641fcca55b0d6eb9bb9c14ff6b3d57ea5195cf83c2489",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 58837454,
        "transactionHash": "0x29f4ea1094dfc4e8c90641fcca55b0d6eb9bb9c14ff6b3d57ea5195cf83c2489",
        "address": "0xdb5b11a122De30bfF84976A15577f8818cEB11d7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d01ec2d86fd5b7add0d9e45315577c273ec1a91c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdd34cb42c55832085da56140abdfd829610ca3b4578d9cb496a503c064b8ae17"
      }
    ],
    "blockNumber": 58837454,
    "cumulativeGasUsed": "5895593",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "241531ceb5cfc0834b146893513d937a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"name\":\"HarvestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingsCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProfitWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TreeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TreesListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"TreesSold\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SECONDS_PER_MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyTreesFromSeller\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelListings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMultipleHarvests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSellersWithListings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"sellers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTreeTypes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"treeTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basePrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"harvestCycleMonths\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"profitRatesPerCycle\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"yearlyAppreciations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getAvailableHarvests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"}],\"name\":\"getCurrentTreePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketplaceGroupedData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FruitTreeNFT.MarketplaceGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerListingsSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FruitTreeNFT.SellerSummary[]\",\"name\":\"summary\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"}],\"name\":\"getSellerTreesByType\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listingTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTreeDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"treeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableHarvests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalHarvests\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextHarvestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTreeDetailsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"treeNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"availableHarvestsArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"totalHarvestsArray\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"nextHarvestTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"}],\"name\":\"getTreeTypeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestCycleMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitRatePerCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearlyAppreciation\",\"type\":\"uint256\"}],\"internalType\":\"struct FruitTreeNFT.TreeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTreeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasActiveListings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"listTreesForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintTree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerTreeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"profitBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerActiveTreeTypes\",\"outputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerTreesByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"treeTypeInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"harvestCycleMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"profitRatePerCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearlyAppreciation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trees\",\"outputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvestTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalHarvests\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestCycleMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitRatePerCycle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yearlyAppreciation\",\"type\":\"uint256\"}],\"name\":\"updateTreeTypeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProfits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreeNFT.sol\":\"FruitTreeNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/TreeNFT.sol\":{\"content\":\"    // SPDX-License-Identifier: MIT\\r\\n    pragma solidity ^0.8.18;\\r\\n\\r\\n    import \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\n    import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n    import \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n    contract FruitTreeNFT is ERC721URIStorage, Ownable, ReentrancyGuard {\\r\\n        uint256 public nextTokenId = 1;\\r\\n        uint256 public constant SECONDS_PER_MONTH = 30 * 24 * 60 * 60;\\r\\n\\r\\n        enum TreeType {\\r\\n            MANGO,\\r\\n            COCONUT,\\r\\n            GUAVA,\\r\\n            RAMBUTAN,\\r\\n            JACKFRUIT\\r\\n        }\\r\\n\\r\\n        struct TreeInfo {\\r\\n            string name;\\r\\n            uint256 basePrice; // Base price in wei\\r\\n            uint256 harvestCycleMonths; // How often it produces fruit (in months)\\r\\n            uint256 profitRatePerCycle; // Profit per cycle in wei\\r\\n            uint256 yearlyAppreciation;\\r\\n        }\\r\\n\\r\\n        struct Tree {\\r\\n            TreeType treeType;\\r\\n            uint256 mintTime;\\r\\n            uint256 initialPrice;\\r\\n            uint256 lastHarvestTime;\\r\\n            address owner;\\r\\n            uint256 totalHarvests;\\r\\n        }\\r\\n\\r\\n        struct Listing {\\r\\n            uint256 tokenId;\\r\\n            address seller;\\r\\n            uint256 listingTime;\\r\\n            bool isActive;\\r\\n        }\\r\\n\\r\\n        struct MarketplaceGroup {\\r\\n            address seller;\\r\\n            TreeType treeType;\\r\\n            uint256 quantity;\\r\\n            uint256 averagePrice;\\r\\n            uint256[] tokenIds;\\r\\n        }\\r\\n\\r\\n        struct SellerSummary {\\r\\n            TreeType treeType;\\r\\n            uint256 quantity;\\r\\n            uint256 averagePrice;\\r\\n        }\\r\\n\\r\\n        // Tree type configurations\\r\\n        mapping(TreeType => TreeInfo) public treeTypeInfo;\\r\\n\\r\\n        // Token ID to Tree mapping\\r\\n        mapping(uint256 => Tree) public trees;\\r\\n\\r\\n        // Owner to tree count mapping\\r\\n        mapping(address => uint256) public ownerTreeCount;\\r\\n\\r\\n        // User profit balances\\r\\n        mapping(address => uint256) public profitBalances;\\r\\n\\r\\n        // Marketplace mappings\\r\\n        mapping(uint256 => bool) public isListed;\\r\\n        mapping(uint256 => Listing) public listings;\\r\\n        mapping(address => mapping(TreeType => uint256[])) public sellerTreesByType;\\r\\n        mapping(address => TreeType[]) public sellerActiveTreeTypes;\\r\\n        mapping(address => bool) public hasActiveListings;\\r\\n        uint256[] public activeListings;\\r\\n\\r\\n        // Events\\r\\n        event TreeMinted(uint256 indexed tokenId, address indexed owner, TreeType treeType, uint256 price);\\r\\n        event HarvestClaimed(uint256 indexed tokenId, address indexed owner, uint256 profit);\\r\\n        event ProfitWithdrawn(address indexed owner, uint256 amount);\\r\\n        event TreesListed(uint256[] tokenIds, address indexed seller);\\r\\n        event TreesSold(uint256[] tokenIds, address indexed seller, address indexed buyer, uint256 totalPrice);\\r\\n        event ListingsCancelled(uint256[] tokenIds, address indexed seller);\\r\\n\\r\\n        constructor() ERC721(\\\"FruitTreeNFT\\\", \\\"FTREE\\\") Ownable(msg.sender) {\\r\\n            // Initialize tree type information\\r\\n            treeTypeInfo[TreeType.MANGO] = TreeInfo({\\r\\n                name: \\\"Mango Tree\\\",\\r\\n                basePrice: 0.05 ether,\\r\\n                harvestCycleMonths: 6,\\r\\n                profitRatePerCycle: 0.008 ether,\\r\\n                yearlyAppreciation: 12 // 12% yearly\\r\\n            });\\r\\n\\r\\n            treeTypeInfo[TreeType.COCONUT] = TreeInfo({\\r\\n                name: \\\"Coconut Tree\\\",\\r\\n                basePrice: 0.08 ether,\\r\\n                harvestCycleMonths: 12,\\r\\n                profitRatePerCycle: 0.015 ether,\\r\\n                yearlyAppreciation: 8 // 8% yearly\\r\\n            });\\r\\n\\r\\n            treeTypeInfo[TreeType.GUAVA] = TreeInfo({\\r\\n                name: \\\"Guava Tree\\\",\\r\\n                basePrice: 0.03 ether,\\r\\n                harvestCycleMonths: 4,\\r\\n                profitRatePerCycle: 0.004 ether,\\r\\n                yearlyAppreciation: 15 // 15% yearly\\r\\n            });\\r\\n\\r\\n            treeTypeInfo[TreeType.RAMBUTAN] = TreeInfo({\\r\\n                name: \\\"Rambutan Tree\\\",\\r\\n                basePrice: 0.04 ether,\\r\\n                harvestCycleMonths: 4,\\r\\n                profitRatePerCycle: 0.006 ether,\\r\\n                yearlyAppreciation: 10 // 10% yearly\\r\\n            });\\r\\n\\r\\n            treeTypeInfo[TreeType.JACKFRUIT] = TreeInfo({\\r\\n                name: \\\"Jackfruit Tree\\\",\\r\\n                basePrice: 0.06 ether,\\r\\n                harvestCycleMonths: 8,\\r\\n                profitRatePerCycle: 0.012 ether,\\r\\n                yearlyAppreciation: 9 // 9% yearly\\r\\n            });\\r\\n        }\\r\\n\\r\\n        function mintTree(TreeType _treeType, string memory tokenURI) external payable nonReentrant {\\r\\n            TreeInfo memory treeInfo = treeTypeInfo[_treeType];\\r\\n            uint256 currentPrice = getCurrentTreePrice(_treeType);\\r\\n\\r\\n            require(msg.value >= currentPrice, \\\"Insufficient payment\\\");\\r\\n\\r\\n            uint256 tokenId = nextTokenId++;\\r\\n            _safeMint(msg.sender, tokenId);\\r\\n            _setTokenURI(tokenId, tokenURI);\\r\\n\\r\\n            trees[tokenId] = Tree({\\r\\n                treeType: _treeType,\\r\\n                mintTime: block.timestamp,\\r\\n                initialPrice: msg.value,\\r\\n                lastHarvestTime: block.timestamp,\\r\\n                owner: msg.sender,\\r\\n                totalHarvests: 0\\r\\n            });\\r\\n\\r\\n            ownerTreeCount[msg.sender]++;\\r\\n\\r\\n            emit TreeMinted(tokenId, msg.sender, _treeType, msg.value);\\r\\n\\r\\n            // Refund excess payment\\r\\n            if (msg.value > currentPrice) {\\r\\n                payable(msg.sender).transfer(msg.value - currentPrice);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function getCurrentTreePrice(TreeType _treeType) public view returns (uint256) {\\r\\n            TreeInfo memory treeInfo = treeTypeInfo[_treeType];\\r\\n            // Price increases based on total supply and appreciation rate\\r\\n            uint256 totalSupply = nextTokenId - 1;\\r\\n            uint256 priceIncrease = (treeInfo.basePrice * totalSupply * treeInfo.yearlyAppreciation) / (100 * 1000);\\r\\n            return treeInfo.basePrice + priceIncrease;\\r\\n        }\\r\\n\\r\\n        function getTreeValue(uint256 tokenId) public view returns (uint256) {\\r\\n            require(_ownerOf(tokenId) != address(0), \\\"Tree does not exist\\\");\\r\\n\\r\\n            Tree memory tree = trees[tokenId];\\r\\n            TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n            uint256 yearsElapsed = (block.timestamp - tree.mintTime) / (365 * 24 * 60 * 60);\\r\\n            uint256 appreciationFactor = 100 + treeInfo.yearlyAppreciation * yearsElapsed;\\r\\n\\r\\n            return (tree.initialPrice * appreciationFactor) / 100;\\r\\n        }\\r\\n\\r\\n        function getAvailableHarvests(uint256 tokenId) public view returns (uint256) {\\r\\n            require(_ownerOf(tokenId) != address(0), \\\"Tree does not exist\\\");\\r\\n\\r\\n            Tree memory tree = trees[tokenId];\\r\\n            TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n            uint256 timeSinceLastHarvest = block.timestamp - tree.lastHarvestTime;\\r\\n            uint256 cycleDuration = treeInfo.harvestCycleMonths * SECONDS_PER_MONTH;\\r\\n\\r\\n            return timeSinceLastHarvest / cycleDuration;\\r\\n        }\\r\\n\\r\\n        function claimHarvest(uint256 tokenId) external nonReentrant {\\r\\n            require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this tree\\\");\\r\\n\\r\\n            uint256 availableHarvests = getAvailableHarvests(tokenId);\\r\\n            require(availableHarvests > 0, \\\"No harvests available\\\");\\r\\n\\r\\n            Tree storage tree = trees[tokenId];\\r\\n            TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n            uint256 totalProfit = availableHarvests * treeInfo.profitRatePerCycle;\\r\\n\\r\\n            // Update tree state\\r\\n            tree.lastHarvestTime = block.timestamp;\\r\\n            tree.totalHarvests += availableHarvests;\\r\\n\\r\\n            // Add profit to user's balance\\r\\n            profitBalances[msg.sender] += totalProfit;\\r\\n\\r\\n            emit HarvestClaimed(tokenId, msg.sender, totalProfit);\\r\\n        }\\r\\n\\r\\n        function claimMultipleHarvests(uint256[] calldata tokenIds) external nonReentrant {\\r\\n            uint256 totalProfit = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                uint256 tokenId = tokenIds[i];\\r\\n                require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this tree\\\");\\r\\n\\r\\n                uint256 availableHarvests = getAvailableHarvests(tokenId);\\r\\n                if (availableHarvests > 0) {\\r\\n                    Tree storage tree = trees[tokenId];\\r\\n                    TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n                    uint256 profit = availableHarvests * treeInfo.profitRatePerCycle;\\r\\n                    totalProfit += profit;\\r\\n\\r\\n                    tree.lastHarvestTime = block.timestamp;\\r\\n                    tree.totalHarvests += availableHarvests;\\r\\n\\r\\n                    emit HarvestClaimed(tokenId, msg.sender, profit);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            require(totalProfit > 0, \\\"No harvests available\\\");\\r\\n            profitBalances[msg.sender] += totalProfit;\\r\\n        }\\r\\n\\r\\n        function withdrawProfits() external nonReentrant {\\r\\n            uint256 amount = profitBalances[msg.sender];\\r\\n            require(amount > 0, \\\"No profits to withdraw\\\");\\r\\n            require(address(this).balance >= amount, \\\"Insufficient contract balance\\\");\\r\\n\\r\\n            profitBalances[msg.sender] = 0;\\r\\n            payable(msg.sender).transfer(amount);\\r\\n\\r\\n            emit ProfitWithdrawn(msg.sender, amount);\\r\\n        }\\r\\n\\r\\n        // MARKETPLACE FUNCTIONS\\r\\n\\r\\n        function listTreesForSale(uint256[] calldata tokenIds) external nonReentrant {\\r\\n            require(tokenIds.length > 0, \\\"No tokens provided\\\");\\r\\n\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                uint256 tokenId = tokenIds[i];\\r\\n                require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this tree\\\");\\r\\n                require(!isListed[tokenId], \\\"Tree already listed\\\");\\r\\n\\r\\n                // Add to listings\\r\\n                listings[tokenId] = Listing({\\r\\n                    tokenId: tokenId,\\r\\n                    seller: msg.sender,\\r\\n                    listingTime: block.timestamp,\\r\\n                    isActive: true\\r\\n                });\\r\\n\\r\\n                isListed[tokenId] = true;\\r\\n                activeListings.push(tokenId);\\r\\n\\r\\n                // Add to seller's tree type mapping\\r\\n                TreeType treeType = trees[tokenId].treeType;\\r\\n                sellerTreesByType[msg.sender][treeType].push(tokenId);\\r\\n\\r\\n                // Add tree type to seller's active types if not already present\\r\\n                if (sellerTreesByType[msg.sender][treeType].length == 1) {\\r\\n                    sellerActiveTreeTypes[msg.sender].push(treeType);\\r\\n                }\\r\\n\\r\\n                hasActiveListings[msg.sender] = true;\\r\\n            }\\r\\n\\r\\n            emit TreesListed(tokenIds, msg.sender);\\r\\n        }\\r\\n\\r\\n        function buyTreesFromSeller(address seller, TreeType treeType, uint256 quantity) external payable nonReentrant {\\r\\n            require(quantity > 0, \\\"Quantity must be greater than 0\\\");\\r\\n            require(hasActiveListings[seller], \\\"Seller has no active listings\\\");\\r\\n\\r\\n            uint256[] memory availableTokens = sellerTreesByType[seller][treeType];\\r\\n            require(availableTokens.length >= quantity, \\\"Not enough trees available from this seller\\\");\\r\\n\\r\\n            // Sort tokens by price (cheapest first) and select the required quantity\\r\\n            uint256[] memory selectedTokens = new uint256[](quantity);\\r\\n            uint256 totalCost = 0;\\r\\n            uint256 selectedCount = 0;\\r\\n\\r\\n            // Simple selection of first 'quantity' available tokens\\r\\n            // In a more advanced version, you could sort by price first\\r\\n            for (uint256 i = 0; i < availableTokens.length && selectedCount < quantity; i++) {\\r\\n                uint256 tokenId = availableTokens[i];\\r\\n                if (isListed[tokenId] && listings[tokenId].isActive) {\\r\\n                    selectedTokens[selectedCount] = tokenId;\\r\\n                    totalCost += getTreeValue(tokenId);\\r\\n                    selectedCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            require(selectedCount == quantity, \\\"Not enough active listings available\\\");\\r\\n            require(msg.value >= totalCost, \\\"Insufficient payment\\\");\\r\\n\\r\\n            // Process the purchases\\r\\n            for (uint256 i = 0; i < quantity; i++) {\\r\\n                uint256 tokenId = selectedTokens[i];\\r\\n                _removeListing(tokenId, seller, treeType);\\r\\n                _transfer(seller, msg.sender, tokenId);\\r\\n            }\\r\\n\\r\\n            // Transfer payment to seller\\r\\n            payable(seller).transfer(totalCost);\\r\\n\\r\\n            // Refund excess payment\\r\\n            if (msg.value > totalCost) {\\r\\n                payable(msg.sender).transfer(msg.value - totalCost);\\r\\n            }\\r\\n\\r\\n            emit TreesSold(selectedTokens, seller, msg.sender, totalCost);\\r\\n        }\\r\\n\\r\\n        function cancelListings(uint256[] calldata tokenIds) external nonReentrant {\\r\\n            require(tokenIds.length > 0, \\\"No tokens provided\\\");\\r\\n\\r\\n            for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n                uint256 tokenId = tokenIds[i];\\r\\n                require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this tree\\\");\\r\\n                require(isListed[tokenId], \\\"Tree not listed\\\");\\r\\n\\r\\n                TreeType treeType = trees[tokenId].treeType;\\r\\n                _removeListing(tokenId, msg.sender, treeType);\\r\\n            }\\r\\n\\r\\n            emit ListingsCancelled(tokenIds, msg.sender);\\r\\n        }\\r\\n\\r\\n        function _removeListing(uint256 tokenId, address seller, TreeType treeType) private {\\r\\n            // Remove from general listings\\r\\n            isListed[tokenId] = false;\\r\\n            listings[tokenId].isActive = false;\\r\\n\\r\\n            // Remove from active listings array\\r\\n            for (uint256 i = 0; i < activeListings.length; i++) {\\r\\n                if (activeListings[i] == tokenId) {\\r\\n                    activeListings[i] = activeListings[activeListings.length - 1];\\r\\n                    activeListings.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Remove from seller's tree type array\\r\\n            uint256[] storage sellerTrees = sellerTreesByType[seller][treeType];\\r\\n            for (uint256 i = 0; i < sellerTrees.length; i++) {\\r\\n                if (sellerTrees[i] == tokenId) {\\r\\n                    sellerTrees[i] = sellerTrees[sellerTrees.length - 1];\\r\\n                    sellerTrees.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // If seller has no more trees of this type, remove from active tree types\\r\\n            if (sellerTreesByType[seller][treeType].length == 0) {\\r\\n                TreeType[] storage activeTypes = sellerActiveTreeTypes[seller];\\r\\n                for (uint256 i = 0; i < activeTypes.length; i++) {\\r\\n                    if (activeTypes[i] == treeType) {\\r\\n                        activeTypes[i] = activeTypes[activeTypes.length - 1];\\r\\n                        activeTypes.pop();\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Check if seller has any active listings left\\r\\n            bool hasListings = false;\\r\\n            TreeType[] memory activeTypes = sellerActiveTreeTypes[seller];\\r\\n            for (uint256 i = 0; i < activeTypes.length; i++) {\\r\\n                if (sellerTreesByType[seller][activeTypes[i]].length > 0) {\\r\\n                    hasListings = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n            hasActiveListings[seller] = hasListings;\\r\\n        }\\r\\n\\r\\n        // MARKETPLACE QUERY FUNCTIONS\\r\\n\\r\\n        function getMarketplaceGroupedData() external view returns (MarketplaceGroup[] memory groups) {\\r\\n            // Get all sellers with active listings\\r\\n            address[] memory sellers = getAllSellersWithListings();\\r\\n\\r\\n            // Count total groups needed\\r\\n            uint256 totalGroups = 0;\\r\\n            for (uint256 i = 0; i < sellers.length; i++) {\\r\\n                totalGroups += sellerActiveTreeTypes[sellers[i]].length;\\r\\n            }\\r\\n\\r\\n            groups = new MarketplaceGroup[](totalGroups);\\r\\n            uint256 groupIndex = 0;\\r\\n\\r\\n            for (uint256 i = 0; i < sellers.length; i++) {\\r\\n                address seller = sellers[i];\\r\\n                TreeType[] memory activeTypes = sellerActiveTreeTypes[seller];\\r\\n\\r\\n                for (uint256 j = 0; j < activeTypes.length; j++) {\\r\\n                    TreeType treeType = activeTypes[j];\\r\\n                    uint256[] memory tokenIds = sellerTreesByType[seller][treeType];\\r\\n\\r\\n                    if (tokenIds.length > 0) {\\r\\n                        uint256 totalValue = 0;\\r\\n                        uint256 activeCount = 0;\\r\\n                        uint256[] memory activeTokenIds = new uint256[](tokenIds.length);\\r\\n\\r\\n                        for (uint256 k = 0; k < tokenIds.length; k++) {\\r\\n                            if (isListed[tokenIds[k]] && listings[tokenIds[k]].isActive) {\\r\\n                                activeTokenIds[activeCount] = tokenIds[k];\\r\\n                                totalValue += getTreeValue(tokenIds[k]);\\r\\n                                activeCount++;\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        if (activeCount > 0) {\\r\\n                            // Resize array to actual active count\\r\\n                            uint256[] memory finalTokenIds = new uint256[](activeCount);\\r\\n                            for (uint256 l = 0; l < activeCount; l++) {\\r\\n                                finalTokenIds[l] = activeTokenIds[l];\\r\\n                            }\\r\\n\\r\\n                            groups[groupIndex] = MarketplaceGroup({\\r\\n                                seller: seller,\\r\\n                                treeType: treeType,\\r\\n                                quantity: activeCount,\\r\\n                                averagePrice: totalValue / activeCount,\\r\\n                                tokenIds: finalTokenIds\\r\\n                            });\\r\\n                            groupIndex++;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Resize groups array to actual count\\r\\n            MarketplaceGroup[] memory finalGroups = new MarketplaceGroup[](groupIndex);\\r\\n            for (uint256 i = 0; i < groupIndex; i++) {\\r\\n                finalGroups[i] = groups[i];\\r\\n            }\\r\\n\\r\\n            return finalGroups;\\r\\n        }\\r\\n\\r\\n        function getAllSellersWithListings() public view returns (address[] memory sellers) {\\r\\n            // This is a simplified version - in production, you might want to maintain a separate array\\r\\n            uint256 sellerCount = 0;\\r\\n            address[] memory tempSellers = new address[](activeListings.length);\\r\\n\\r\\n            for (uint256 i = 0; i < activeListings.length; i++) {\\r\\n                address seller = listings[activeListings[i]].seller;\\r\\n                bool found = false;\\r\\n\\r\\n                for (uint256 j = 0; j < sellerCount; j++) {\\r\\n                    if (tempSellers[j] == seller) {\\r\\n                        found = true;\\r\\n                        break;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (!found) {\\r\\n                    tempSellers[sellerCount] = seller;\\r\\n                    sellerCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            sellers = new address[](sellerCount);\\r\\n            for (uint256 i = 0; i < sellerCount; i++) {\\r\\n                sellers[i] = tempSellers[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function getSellerTreesByType(\\r\\n            address seller,\\r\\n            TreeType treeType\\r\\n        ) external view returns (uint256[] memory tokenIds, uint256[] memory prices, uint256[] memory listingTimes) {\\r\\n            uint256[] memory allTokens = sellerTreesByType[seller][treeType];\\r\\n            uint256 activeCount = 0;\\r\\n\\r\\n            // Count active listings\\r\\n            for (uint256 i = 0; i < allTokens.length; i++) {\\r\\n                if (isListed[allTokens[i]] && listings[allTokens[i]].isActive) {\\r\\n                    activeCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            tokenIds = new uint256[](activeCount);\\r\\n            prices = new uint256[](activeCount);\\r\\n            listingTimes = new uint256[](activeCount);\\r\\n\\r\\n            uint256 index = 0;\\r\\n            for (uint256 i = 0; i < allTokens.length; i++) {\\r\\n                uint256 tokenId = allTokens[i];\\r\\n                if (isListed[tokenId] && listings[tokenId].isActive) {\\r\\n                    tokenIds[index] = tokenId;\\r\\n                    prices[index] = getTreeValue(tokenId);\\r\\n                    listingTimes[index] = listings[tokenId].listingTime;\\r\\n                    index++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function getSellerListingsSummary(address seller) external view returns (SellerSummary[] memory summary) {\\r\\n            TreeType[] memory activeTypes = sellerActiveTreeTypes[seller];\\r\\n            summary = new SellerSummary[](activeTypes.length);\\r\\n\\r\\n            for (uint256 i = 0; i < activeTypes.length; i++) {\\r\\n                TreeType treeType = activeTypes[i];\\r\\n                uint256[] memory tokenIds = sellerTreesByType[seller][treeType];\\r\\n\\r\\n                uint256 totalValue = 0;\\r\\n                uint256 activeCount = 0;\\r\\n\\r\\n                for (uint256 j = 0; j < tokenIds.length; j++) {\\r\\n                    if (isListed[tokenIds[j]] && listings[tokenIds[j]].isActive) {\\r\\n                        totalValue += getTreeValue(tokenIds[j]);\\r\\n                        activeCount++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                summary[i] = SellerSummary({\\r\\n                    treeType: treeType,\\r\\n                    quantity: activeCount,\\r\\n                    averagePrice: activeCount > 0 ? totalValue / activeCount : 0\\r\\n                });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // EXISTING FUNCTIONS (keeping all original functionality)\\r\\n\\r\\n        function getTreeDetails(\\r\\n            uint256 tokenId\\r\\n        )\\r\\n            public\\r\\n            view\\r\\n            returns (\\r\\n                string memory treeName,\\r\\n                uint256 currentValue,\\r\\n                uint256 availableHarvests,\\r\\n                uint256 totalHarvests,\\r\\n                uint256 nextHarvestTime\\r\\n            )\\r\\n        {\\r\\n            require(_ownerOf(tokenId) != address(0), \\\"Tree does not exist\\\");\\r\\n\\r\\n            Tree memory tree = trees[tokenId];\\r\\n            TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n            treeName = treeInfo.name;\\r\\n            currentValue = getTreeValue(tokenId);\\r\\n            availableHarvests = getAvailableHarvests(tokenId);\\r\\n            totalHarvests = tree.totalHarvests;\\r\\n\\r\\n            uint256 cycleDuration = treeInfo.harvestCycleMonths * SECONDS_PER_MONTH;\\r\\n            uint256 timeSinceLastHarvest = block.timestamp - tree.lastHarvestTime;\\r\\n            uint256 timeUntilNextHarvest = cycleDuration - (timeSinceLastHarvest % cycleDuration);\\r\\n            nextHarvestTime = block.timestamp + timeUntilNextHarvest;\\r\\n        }\\r\\n\\r\\n        function getTreeDetailsByOwner(\\r\\n            address _owner\\r\\n        )\\r\\n            public\\r\\n            view\\r\\n            returns (\\r\\n                uint256[] memory tokenIds,\\r\\n                string[] memory treeNames,\\r\\n                uint256[] memory currentValues,\\r\\n                uint256[] memory availableHarvestsArray,\\r\\n                uint256[] memory totalHarvestsArray,\\r\\n                uint256[] memory nextHarvestTimes\\r\\n            )\\r\\n        {\\r\\n            uint256 count = ownerTreeCount[_owner];\\r\\n            tokenIds = new uint256[](count);\\r\\n            treeNames = new string[](count);\\r\\n            currentValues = new uint256[](count);\\r\\n            availableHarvestsArray = new uint256[](count);\\r\\n            totalHarvestsArray = new uint256[](count);\\r\\n            nextHarvestTimes = new uint256[](count);\\r\\n\\r\\n            uint256 index = 0;\\r\\n            for (uint256 i = 1; i < nextTokenId; i++) {\\r\\n                if (_ownerOf(i) == _owner) {\\r\\n                    tokenIds[index] = i;\\r\\n\\r\\n                    (\\r\\n                        string memory treeName,\\r\\n                        uint256 currentValue,\\r\\n                        uint256 availableHarvests,\\r\\n                        uint256 totalHarvests,\\r\\n                        uint256 nextHarvestTime\\r\\n                    ) = getTreeDetails(i);\\r\\n\\r\\n                    treeNames[index] = treeName;\\r\\n                    currentValues[index] = currentValue;\\r\\n                    availableHarvestsArray[index] = availableHarvests;\\r\\n                    totalHarvestsArray[index] = totalHarvests;\\r\\n                    nextHarvestTimes[index] = nextHarvestTime;\\r\\n\\r\\n                    index++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function getAllTreeTypes()\\r\\n            external\\r\\n            view\\r\\n            returns (\\r\\n                uint8[] memory treeTypes,\\r\\n                string[] memory names,\\r\\n                uint256[] memory basePrices,\\r\\n                uint256[] memory currentPrices,\\r\\n                uint256[] memory harvestCycleMonths,\\r\\n                uint256[] memory profitRatesPerCycle,\\r\\n                uint256[] memory yearlyAppreciations\\r\\n            )\\r\\n        {\\r\\n            treeTypes = new uint8[](5);\\r\\n            names = new string[](5);\\r\\n            basePrices = new uint256[](5);\\r\\n            currentPrices = new uint256[](5);\\r\\n            harvestCycleMonths = new uint256[](5);\\r\\n            profitRatesPerCycle = new uint256[](5);\\r\\n            yearlyAppreciations = new uint256[](5);\\r\\n\\r\\n            for (uint i = 0; i < 5; i++) {\\r\\n                TreeType treeType = TreeType(i);\\r\\n                TreeInfo memory info = treeTypeInfo[treeType];\\r\\n\\r\\n                treeTypes[i] = uint8(treeType);\\r\\n                names[i] = info.name;\\r\\n                basePrices[i] = info.basePrice;\\r\\n                currentPrices[i] = getCurrentTreePrice(treeType);\\r\\n                harvestCycleMonths[i] = info.harvestCycleMonths;\\r\\n                profitRatesPerCycle[i] = info.profitRatePerCycle;\\r\\n                yearlyAppreciations[i] = info.yearlyAppreciation;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        function getTreeTypeInfo(TreeType _treeType) external view returns (TreeInfo memory) {\\r\\n            return treeTypeInfo[_treeType];\\r\\n        }\\r\\n\\r\\n        // Override transfer functions to update owner tree count and handle listings\\r\\n        function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\\r\\n            address from = _ownerOf(tokenId);\\r\\n\\r\\n            if (from != address(0) && to != address(0) && from != to) {\\r\\n                ownerTreeCount[from]--;\\r\\n                ownerTreeCount[to]++;\\r\\n                trees[tokenId].owner = to;\\r\\n\\r\\n                // If tree is listed, remove it from marketplace when transferred\\r\\n                if (isListed[tokenId]) {\\r\\n                    TreeType treeType = trees[tokenId].treeType;\\r\\n                    _removeListing(tokenId, from, treeType);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            return super._update(to, tokenId, auth);\\r\\n        }\\r\\n\\r\\n        // Owner functions\\r\\n        function updateTreeTypeInfo(\\r\\n            TreeType _treeType,\\r\\n            string memory _name,\\r\\n            uint256 _basePrice,\\r\\n            uint256 _harvestCycleMonths,\\r\\n            uint256 _profitRatePerCycle,\\r\\n            uint256 _yearlyAppreciation\\r\\n        ) external onlyOwner {\\r\\n            treeTypeInfo[_treeType] = TreeInfo({\\r\\n                name: _name,\\r\\n                basePrice: _basePrice,\\r\\n                harvestCycleMonths: _harvestCycleMonths,\\r\\n                profitRatePerCycle: _profitRatePerCycle,\\r\\n                yearlyAppreciation: _yearlyAppreciation\\r\\n            });\\r\\n        }\\r\\n\\r\\n        function fundContract() external payable onlyOwner {}\\r\\n\\r\\n        function withdrawContractFunds() external onlyOwner {\\r\\n            uint256 balance = address(this).balance;\\r\\n            require(balance > 0, \\\"No funds to withdraw\\\");\\r\\n\\r\\n            (bool success, ) = owner().call{ value: balance }(\\\"\\\");\\r\\n            require(success, \\\"Withdraw failed\\\");\\r\\n        }\\r\\n\\r\\n        function emergencyWithdraw() external onlyOwner {\\r\\n            payable(owner()).transfer(address(this).balance);\\r\\n        }\\r\\n\\r\\n        receive() external payable {}\\r\\n    }\\r\\n\",\"keccak256\":\"0x4c7f695af0418dcac55747ccec99dc4697dae9a46a8faf517bf45b3faf4bf4f8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016009553480156200001657600080fd5b50336040518060400160405280600c81526020016b119c9d5a5d151c995953919560a21b81525060405180604001604052806005815260200164465452454560d81b81525081600090816200006c9190620005ca565b5060016200007b8282620005ca565b5050506001600160a01b038116620000ad57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000b881620004d3565b5060016008556040805160e081018252600a60a08201818152694d616e676f205472656560b01b60c0840152825266b1a2bc2ec50000602080840191909152600693830193909352661c6bf5263400006060830152600c60808301526000805290915280517f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e39081906200014d9082620005ca565b50602082015181600101556040820151816002015560608201518160030155608082015181600401559050506040518060a001604052806040518060400160405280600c81526020016b436f636f6e7574205472656560a01b815250815260200167011c37937e0800008152602001600c815260200166354a6ba7a1800081526020016008815250600a600060016004811115620001ef57620001ef62000696565b600481111562000203576200020362000696565b8152602081019190915260400160002081518190620002239082620005ca565b50602082015181600101556040820151816002015560608201518160030155608082015181600401559050506040518060a001604052806040518060400160405280600a8152602001694775617661205472656560b01b8152508152602001666a94d74f430000815260200160048152602001660e35fa931a00008152602001600f815250600a600060026004811115620002c257620002c262000696565b6004811115620002d657620002d662000696565b8152602081019190915260400160002081518190620002f69082620005ca565b50602082015181600101556040820151816002015560608201518160030155608082015181600401559050506040518060a001604052806040518060400160405280600d81526020016c52616d627574616e205472656560981b8152508152602001668e1bc9bf040000815260200160048152602001661550f7dca700008152602001600a815250600a60006003600481111562000398576200039862000696565b6004811115620003ac57620003ac62000696565b8152602081019190915260400160002081518190620003cc9082620005ca565b50602082015181600101556040820151816002015560608201518160030155608082015181600401559050506040518060a001604052806040518060400160405280600e81526020016d4a61636b6672756974205472656560901b815250815260200166d529ae9e860000815260200160088152602001662aa1efb94e000081526020016009815250600a60006004808111156200046e576200046e62000696565b600481111562000482576200048262000696565b8152602081019190915260400160002081518190620004a29082620005ca565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910155620006ac565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200055057607f821691505b6020821081036200057157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005c557600081815260208120601f850160051c81016020861015620005a05750805b601f850160051c820191505b81811015620005c157828155600101620005ac565b5050505b505050565b81516001600160401b03811115620005e657620005e662000525565b620005fe81620005f784546200053b565b8462000577565b602080601f8311600181146200063657600084156200061d5750858301515b600019600386901b1c1916600185901b178555620005c1565b600085815260208120601f198616915b82811015620006675788860151825594840194600190910190840162000646565b5085821015620006865787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b615d1380620006bc6000396000f3fe6080604052600436106102cd5760003560e01c80637a50802211610175578063c87b56dd116100dc578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b14610994578063f434db0b146109b4578063f5d63c7d146109d4578063fcce4883146109f457600080fd5b8063e985e9c51461091a578063ec0bbf931461093a578063eee51b211461096757600080fd5b8063c87b56dd146107f7578063d876abaa14610817578063da292e9014610837578063db2e21bc14610864578063de74e57b14610879578063e1ccc768146108f257600080fd5b8063b43127361161012e578063b43127361461074a578063b51cb5871461075d578063b84932d21461078d578063b88d4fde146107ad578063babdb6c8146107cd578063bd097e21146107ef57600080fd5b80637a508022146106385780637a69c089146106aa5780638da5cb5b146106d757806395d89b41146106f5578063a07a86031461070a578063a22cb4651461072a57600080fd5b806339f3dc5a1161023457806369cc2a14116101ed57806370a08231116101c757806370a08231146105cb578063715018a6146105eb57806375794a3c1461060057806376f32a701461061657600080fd5b806369cc2a141461055a5780636a43f8ea1461058b578063702ed135146105ab57600080fd5b806339f3dc5a146104a757806342842e0e146104c75780634677d0f9146104e75780635207066c1461050757806361cf48631461051a5780636352211e1461053a57600080fd5b806322f93c7b1161028657806322f93c7b146103c457806323b872dd146103f65780632505a1be146104165780632a1e141e146104455780632bf8ce231461047257806339913e091461049257600080fd5b806301ffc9a7146102d957806306fdde031461030e578063081812fc14610330578063095ea7b31461036857806310786deb1461038a57806321009423146103af57600080fd5b366102d457005b600080fd5b3480156102e557600080fd5b506102f96102f4366004615034565b610a24565b60405190151581526020015b60405180910390f35b34801561031a57600080fd5b50610323610a4f565b60405161030591906150a1565b34801561033c57600080fd5b5061035061034b3660046150b4565b610ae1565b6040516001600160a01b039091168152602001610305565b34801561037457600080fd5b506103886103833660046150e9565b610b0a565b005b34801561039657600080fd5b506103a162278d0081565b604051908152602001610305565b3480156103bb57600080fd5b50610388610b19565b3480156103d057600080fd5b506103e46103df366004615113565b610c11565b604051610305969594939291906151c1565b34801561040257600080fd5b50610388610411366004615243565b610f0d565b34801561042257600080fd5b5061043661043136600461528e565b610f98565b604051610305939291906152c1565b34801561045157600080fd5b506104656104603660046152fa565b6112b8565b6040516103059190615315565b34801561047e57600080fd5b5061038861048d366004615410565b6113eb565b34801561049e57600080fd5b50610388611492565b3480156104b357600080fd5b506103886104c2366004615480565b6115be565b3480156104d357600080fd5b506103886104e2366004615243565b611739565b3480156104f357600080fd5b50610388610502366004615480565b611759565b6103886105153660046154f4565b6119f1565b34801561052657600080fd5b506103a16105353660046150b4565b611e86565b34801561054657600080fd5b506103506105553660046150b4565b611ea7565b34801561056657600080fd5b5061057a6105753660046150b4565b611eb2565b604051610305959493929190615520565b34801561059757600080fd5b506103886105a6366004615480565b6120ec565b3480156105b757600080fd5b506103a16105c63660046150b4565b612406565b3480156105d757600080fd5b506103a16105e6366004615113565b612624565b3480156105f757600080fd5b5061038861266c565b34801561060c57600080fd5b506103a160095481565b34801561062257600080fd5b5061062b61267e565b6040516103059190615557565b34801561064457600080fd5b506106986106533660046150b4565b600b6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff909416949293919290916001600160a01b039091169086565b604051610305969594939291906155dc565b3480156106b657600080fd5b506103a16106c5366004615113565b600c6020526000908152604090205481565b3480156106e357600080fd5b506007546001600160a01b0316610350565b34801561070157600080fd5b50610323612873565b34801561071657600080fd5b5061057a6107253660046152fa565b612882565b34801561073657600080fd5b5061038861074536600461561b565b612938565b610388610758366004615657565b612943565b34801561076957600080fd5b506102f9610778366004615113565b60126020526000908152604090205460ff1681565b34801561079957600080fd5b506103886107a83660046150b4565b612c43565b3480156107b957600080fd5b506103886107c83660046156a4565b612e84565b3480156107d957600080fd5b506107e2612e9b565b604051610305919061571f565b6103886134c6565b34801561080357600080fd5b506103236108123660046150b4565b6134ce565b34801561082357600080fd5b506103a16108323660046154f4565b6135df565b34801561084357600080fd5b506103a1610852366004615113565b600d6020526000908152604090205481565b34801561087057600080fd5b5061038861361d565b34801561088557600080fd5b506108c86108943660046150b4565b600f60205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b604080519485526001600160a01b0390931660208501529183015215156060820152608001610305565b3480156108fe57600080fd5b5061090761365e565b60405161030597969594939291906157f4565b34801561092657600080fd5b506102f96109353660046158b8565b6139b1565b34801561094657600080fd5b5061095a6109553660046150e9565b6139df565b60405161030591906158e2565b34801561097357600080fd5b50610987610982366004615113565b613a22565b60405161030591906158f0565b3480156109a057600080fd5b506103886109af366004615113565b613d47565b3480156109c057600080fd5b506103a16109cf3660046150b4565b613d82565b3480156109e057600080fd5b506103a16109ef3660046152fa565b613f6d565b348015610a0057600080fd5b506102f9610a0f3660046150b4565b600e6020526000908152604090205460ff1681565b60006001600160e01b03198216632483248360e11b1480610a495750610a49826140c9565b92915050565b606060008054610a5e90615950565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8a90615950565b8015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b5050505050905090565b6000610aec82614119565b506000828152600460205260409020546001600160a01b0316610a49565b610b15828233614151565b5050565b610b2161415e565b4780610b6b5760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064015b60405180910390fd5b6000610b7f6007546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610bc9576040519150601f19603f3d011682016040523d82523d6000602084013e610bce565b606091505b5050905080610b155760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610b62565b6001600160a01b0381166000908152600c602052604090205460609081908190819081908190806001600160401b03811115610c4f57610c4f615365565b604051908082528060200260200182016040528015610c78578160200160208202803683370190505b509650806001600160401b03811115610c9357610c93615365565b604051908082528060200260200182016040528015610cc657816020015b6060815260200190600190039081610cb15790505b509550806001600160401b03811115610ce157610ce1615365565b604051908082528060200260200182016040528015610d0a578160200160208202803683370190505b509450806001600160401b03811115610d2557610d25615365565b604051908082528060200260200182016040528015610d4e578160200160208202803683370190505b509350806001600160401b03811115610d6957610d69615365565b604051908082528060200260200182016040528015610d92578160200160208202803683370190505b509250806001600160401b03811115610dad57610dad615365565b604051908082528060200260200182016040528015610dd6578160200160208202803683370190505b509150600060015b600954811015610f0157896001600160a01b0316610dfb8261418b565b6001600160a01b031603610eef5780898381518110610e1c57610e1c61598a565b6020026020010181815250506000806000806000610e3986611eb2565b94509450945094509450848d8881518110610e5657610e5661598a565b6020026020010181905250838c8881518110610e7457610e7461598a565b602002602001018181525050828b8881518110610e9357610e9361598a565b602002602001018181525050818a8881518110610eb257610eb261598a565b60200260200101818152505080898881518110610ed157610ed161598a565b602090810291909101015286610ee6816159b6565b97505050505050505b80610ef9816159b6565b915050610dde565b50505091939550919395565b6001600160a01b038216610f3757604051633250574960e11b815260006004820152602401610b62565b6000610f448383336141a6565b9050836001600160a01b0316816001600160a01b031614610f92576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610b62565b50505050565b6001600160a01b0382166000908152601060205260408120606091829182919081866004811115610fcb57610fcb6155a4565b6004811115610fdc57610fdc6155a4565b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561103457602002820191906000526020600020905b815481526020019060010190808311611020575b505050505090506000805b82518110156110e057600e600084838151811061105e5761105e61598a565b60209081029190910181015182528101919091526040016000205460ff1680156110bb5750600f60008483815181106110995761109961598a565b60209081029190910181015182528101919091526040016000206003015460ff165b156110ce57816110ca816159b6565b9250505b806110d8816159b6565b91505061103f565b50806001600160401b038111156110f9576110f9615365565b604051908082528060200260200182016040528015611122578160200160208202803683370190505b509450806001600160401b0381111561113d5761113d615365565b604051908082528060200260200182016040528015611166578160200160208202803683370190505b509350806001600160401b0381111561118157611181615365565b6040519080825280602002602001820160405280156111aa578160200160208202803683370190505b5092506000805b83518110156112ad5760008482815181106111ce576111ce61598a565b6020908102919091018101516000818152600e90925260409091205490915060ff16801561120d57506000818152600f602052604090206003015460ff165b1561129a57808884815181106112255761122561598a565b60200260200101818152505061123a81612406565b87848151811061124c5761124c61598a565b602002602001018181525050600f6000828152602001908152602001600020600201548684815181106112815761128161598a565b602090810291909101015282611296816159b6565b9350505b50806112a5816159b6565b9150506111b1565b505050509250925092565b6112ea6040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b600a6000836004811115611300576113006155a4565b6004811115611311576113116155a4565b81526020019081526020016000206040518060a001604052908160008201805461133a90615950565b80601f016020809104026020016040519081016040528092919081815260200182805461136690615950565b80156113b35780601f10611388576101008083540402835291602001916113b3565b820191906000526020600020905b81548152906001019060200180831161139657829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b6113f361415e565b6040518060a0016040528086815260200185815260200184815260200183815260200182815250600a6000886004811115611430576114306155a4565b6004811115611441576114416155a4565b815260208101919091526040016000208151819061145f9082615a1d565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910155505050505050565b61149a6142b0565b336000908152600d6020526040902054806114f05760405162461bcd60e51b81526020600482015260166024820152754e6f2070726f6669747320746f20776974686472617760501b6044820152606401610b62565b804710156115405760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610b62565b336000818152600d60205260408082208290555183156108fc0291849190818181858888f1935050505015801561157b573d6000803e3d6000fd5b5060405181815233907f016e128b6bdadd9e9068abd0b18db2fc8b27ed3dbced50e4aa6cc0a6934251ab9060200160405180910390a2506115bc6001600855565b565b6115c66142b0565b806116085760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610b62565b60005b818110156116eb5760008383838181106116275761162761598a565b905060200201359050336001600160a01b031661164382611ea7565b6001600160a01b0316146116695760405162461bcd60e51b8152600401610b6290615adc565b6000818152600e602052604090205460ff166116b95760405162461bcd60e51b815260206004820152600f60248201526e151c9959481b9bdd081b1a5cdd1959608a1b6044820152606401610b62565b6000818152600b602052604090205460ff166116d68233836142da565b505080806116e3906159b6565b91505061160b565b50336001600160a01b03167f3fa3ddc780dd74af1f9341736df5507180f79d41b093b8550ca517732ec5951d8383604051611727929190615b13565b60405180910390a2610b156001600855565b61175483838360405180602001604052806000815250612e84565b505050565b6117616142b0565b6000805b8281101561197a5760008484838181106117815761178161598a565b905060200201359050336001600160a01b031661179d82611ea7565b6001600160a01b0316146117c35760405162461bcd60e51b8152600401610b6290615adc565b60006117ce82613d82565b90508015611965576000828152600b602052604081208054909190600a90829060ff166004811115611802576118026155a4565b6004811115611813576118136155a4565b81526020019081526020016000206040518060a001604052908160008201805461183c90615950565b80601f016020809104026020016040519081016040528092919081815260200182805461186890615950565b80156118b55780601f1061188a576101008083540402835291602001916118b5565b820191906000526020600020905b81548152906001019060200180831161189857829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905060008160600151846118fa9190615b4c565b90506119068188615b63565b9650428360030181905550838360050160008282546119259190615b63565b9091555050604051818152339086907f766239c5232e9bdab39412c031a3de6df65b6a9e7e178595e53317f1719f0a709060200160405180910390a35050505b50508080611972906159b6565b915050611765565b50600081116119c35760405162461bcd60e51b81526020600482015260156024820152744e6f20686172766573747320617661696c61626c6560581b6044820152606401610b62565b336000908152600d6020526040812080548392906119e2908490615b63565b90915550506001600855505050565b6119f96142b0565b60008111611a495760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e2030006044820152606401610b62565b6001600160a01b03831660009081526012602052604090205460ff16611ab15760405162461bcd60e51b815260206004820152601d60248201527f53656c6c657220686173206e6f20616374697665206c697374696e67730000006044820152606401610b62565b6001600160a01b038316600090815260106020526040812081846004811115611adc57611adc6155a4565b6004811115611aed57611aed6155a4565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611b4557602002820191906000526020600020905b815481526020019060010190808311611b31575b505050505090508181511015611bb15760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f75676820747265657320617661696c61626c652066726f6d2060448201526a3a3434b99039b2b63632b960a91b6064820152608401610b62565b6000826001600160401b03811115611bcb57611bcb615365565b604051908082528060200260200182016040528015611bf4578160200160208202803683370190505b50905060008060005b845181108015611c0c57508582105b15611cbe576000858281518110611c2557611c2561598a565b6020908102919091018101516000818152600e90925260409091205490915060ff168015611c6457506000818152600f602052604090206003015460ff165b15611cab5780858481518110611c7c57611c7c61598a565b602002602001018181525050611c9181612406565b611c9b9085615b63565b935082611ca7816159b6565b9350505b5080611cb6816159b6565b915050611bfd565b50848114611d1a5760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f75676820616374697665206c697374696e677320617661696c60448201526361626c6560e01b6064820152608401610b62565b81341015611d615760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610b62565b60005b85811015611db3576000848281518110611d8057611d8061598a565b60200260200101519050611d95818a8a6142da565b611da08933836147ce565b5080611dab816159b6565b915050611d64565b506040516001600160a01b0388169083156108fc029084906000818181858888f19350505050158015611dea573d6000803e3d6000fd5b5081341115611e2b57336108fc611e018434615b76565b6040518115909202916000818181858888f19350505050158015611e29573d6000803e3d6000fd5b505b336001600160a01b0316876001600160a01b03167f596718f13c536c1e489b6919d4d687f3fc102f8adda16653785f14f72c7266798585604051611e70929190615b89565b60405180910390a3505050506117546001600855565b60138181548110611e9657600080fd5b600091825260209091200154905081565b6000610a4982614119565b6060600080808080611ec38761418b565b6001600160a01b031603611ee95760405162461bcd60e51b8152600401610b6290615bab565b6000868152600b6020526040808220815160c081019092528054829060ff166004811115611f1957611f196155a4565b6004811115611f2a57611f2a6155a4565b81526001820154602082015260028201546040820152600382015460608201526004808301546001600160a01b0316608083015260059092015460a0909101528151919250600091600a91839190811115611f8757611f876155a4565b6004811115611f9857611f986155a4565b81526020019081526020016000206040518060a0016040529081600082018054611fc190615950565b80601f0160208091040260200160405190810160405280929190818152602001828054611fed90615950565b801561203a5780601f1061200f5761010080835404028352916020019161203a565b820191906000526020600020905b81548152906001019060200180831161201d57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460809091015280519750905061207b88612406565b955061208688613d82565b94508160a001519350600062278d0082604001516120a49190615b4c565b905060008360600151426120b89190615b76565b905060006120c68383615bee565b6120d09084615b76565b90506120dc8142615b63565b9550505050505091939590929450565b6120f46142b0565b806121365760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610b62565b60005b818110156123ca5760008383838181106121555761215561598a565b905060200201359050336001600160a01b031661217182611ea7565b6001600160a01b0316146121975760405162461bcd60e51b8152600401610b6290615adc565b6000818152600e602052604090205460ff16156121ec5760405162461bcd60e51b8152602060048201526013602482015272151c995948185b1c9958591e481b1a5cdd1959606a1b6044820152606401610b62565b60408051608081018252828152336020808301828152428486019081526001606086018181526000898152600f865288812097518855935187830180546001600160a01b039092166001600160a01b03199092169190911790559151600287015590516003909501805495151560ff19968716179055600e8352858220805490951681179094556013805494850190557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090909301859055600b8152838320549183526010905291812060ff90921691908260048111156122ce576122ce6155a4565b60048111156122df576122df6155a4565b8152602080820192909252604090810160009081208054600181018255908252838220018590553381526010909252812090826004811115612323576123236155a4565b6004811115612334576123346155a4565b815260208101919091526040016000205460010361239c5733600090815260116020908152604082208054600181018255908352918190209082040180548392601f166101000a60ff81021990911690836004811115612396576123966155a4565b02179055505b5050336000908152601260205260409020805460ff19166001179055806123c2816159b6565b915050612139565b50336001600160a01b03167ffc4f8948e68b1d67bd9db6ff71f155b426a2d051f2e60143df0bd2d8c7aec7158383604051611727929190615b13565b6000806124128361418b565b6001600160a01b0316036124385760405162461bcd60e51b8152600401610b6290615bab565b6000828152600b6020526040808220815160c081019092528054829060ff166004811115612468576124686155a4565b6004811115612479576124796155a4565b81526001820154602082015260028201546040820152600382015460608201526004808301546001600160a01b0316608083015260059092015460a0909101528151919250600091600a918391908111156124d6576124d66155a4565b60048111156124e7576124e76155a4565b81526020019081526020016000206040518060a001604052908160008201805461251090615950565b80601f016020809104026020016040519081016040528092919081815260200182805461253c90615950565b80156125895780601f1061255e57610100808354040283529160200191612589565b820191906000526020600020905b81548152906001019060200180831161256c57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905060006301e133808360200151426125d39190615b76565b6125dd9190615c02565b905060008183608001516125f19190615b4c565b6125fc906064615b63565b905060648185604001516126109190615b4c565b61261a9190615c02565b9695505050505050565b60006001600160a01b038216612650576040516322718ad960e21b815260006004820152602401610b62565b506001600160a01b031660009081526003602052604090205490565b61267461415e565b6115bc600061487e565b60606000806013805490506001600160401b038111156126a0576126a0615365565b6040519080825280602002602001820160405280156126c9578160200160208202803683370190505b50905060005b6013548110156127c7576000600f6000601384815481106126f2576126f261598a565b600091825260208083209091015483528201929092526040018120600101546001600160a01b03169150805b8581101561277357826001600160a01b03168582815181106127425761274261598a565b60200260200101516001600160a01b0316036127615760019150612773565b8061276b816159b6565b91505061271e565b50806127b2578184868151811061278c5761278c61598a565b6001600160a01b0390921660209283029190910190910152846127ae816159b6565b9550505b505080806127bf906159b6565b9150506126cf565b50816001600160401b038111156127e0576127e0615365565b604051908082528060200260200182016040528015612809578160200160208202803683370190505b50925060005b8281101561286d578181815181106128295761282961598a565b60200260200101518482815181106128435761284361598a565b6001600160a01b039092166020928302919091019091015280612865816159b6565b91505061280f565b50505090565b606060018054610a5e90615950565b600a6020526000908152604090208054819061289d90615950565b80601f01602080910402602001604051908101604052809291908181526020018280546128c990615950565b80156129165780601f106128eb57610100808354040283529160200191612916565b820191906000526020600020905b8154815290600101906020018083116128f957829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b610b153383836148d0565b61294b6142b0565b6000600a6000846004811115612963576129636155a4565b6004811115612974576129746155a4565b81526020019081526020016000206040518060a001604052908160008201805461299d90615950565b80601f01602080910402602001604051908101604052809291908181526020018280546129c990615950565b8015612a165780601f106129eb57610100808354040283529160200191612a16565b820191906000526020600020905b8154815290600101906020018083116129f957829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000612a5484613f6d565b905080341015612a9d5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610b62565b6009805460009182612aae836159b6565b919050559050612abe338261496f565b612ac88185614989565b6040518060c00160405280866004811115612ae557612ae56155a4565b8152426020808301829052346040808501919091526060840192909252336080840152600060a0909301839052848352600b9052902081518154829060ff19166001836004811115612b3957612b396155a4565b0217905550602082810151600183015560408084015160028401556060840151600384015560808401516004840180546001600160a01b0319166001600160a01b0390921691909117905560a090930151600590920191909155336000908152600c909152908120805491612bad836159b6565b9190505550336001600160a01b0316817fbdd470aa38c4dc34533cb66c382a1754cddb22ebce90f0bdd993afc59b6a2ff68734604051612bee929190615c16565b60405180910390a381341115612c3657336108fc612c0c8434615b76565b6040518115909202916000818181858888f19350505050158015612c34573d6000803e3d6000fd5b505b505050610b156001600855565b612c4b6142b0565b33612c5582611ea7565b6001600160a01b031614612c7b5760405162461bcd60e51b8152600401610b6290615adc565b6000612c8682613d82565b905060008111612cd05760405162461bcd60e51b81526020600482015260156024820152744e6f20686172766573747320617661696c61626c6560581b6044820152606401610b62565b6000828152600b602052604081208054909190600a90829060ff166004811115612cfc57612cfc6155a4565b6004811115612d0d57612d0d6155a4565b81526020019081526020016000206040518060a0016040529081600082018054612d3690615950565b80601f0160208091040260200160405190810160405280929190818152602001828054612d6290615950565b8015612daf5780601f10612d8457610100808354040283529160200191612daf565b820191906000526020600020905b815481529060010190602001808311612d9257829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000816060015184612df49190615b4c565b905042836003018190555083836005016000828254612e139190615b63565b9091555050336000908152600d602052604081208054839290612e37908490615b63565b9091555050604051818152339086907f766239c5232e9bdab39412c031a3de6df65b6a9e7e178595e53317f1719f0a709060200160405180910390a350505050612e816001600855565b50565b612e8f848484610f0d565b610f92848484846149d9565b60606000612ea761267e565b90506000805b8251811015612f175760116000848381518110612ecc57612ecc61598a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905082612f039190615b63565b915080612f0f816159b6565b915050612ead565b50806001600160401b03811115612f3057612f30615365565b604051908082528060200260200182016040528015612f9457816020015b612f816040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b815260200190600190039081612f4e5790505b5092506000805b83518110156133e6576000848281518110612fb857612fb861598a565b60200260200101519050600060116000836001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561306357602002820191906000526020600020906000905b82829054906101000a900460ff166004811115613041576130416155a4565b8152602060019283018181049485019490930390920291018084116130225790505b5050505050905060005b81518110156133d057600082828151811061308a5761308a61598a565b60200260200101519050600060106000866001600160a01b03166001600160a01b0316815260200190815260200160002060008360048111156130cf576130cf6155a4565b60048111156130e0576130e06155a4565b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561313857602002820191906000526020600020905b815481526020019060010190808311613124575b505050505090506000815111156133bb57600080600083516001600160401b0381111561316757613167615365565b604051908082528060200260200182016040528015613190578160200160208202803683370190505b50905060005b845181101561329d57600e60008683815181106131b5576131b561598a565b60209081029190910181015182528101919091526040016000205460ff1680156132125750600f60008683815181106131f0576131f061598a565b60209081029190910181015182528101919091526040016000206003015460ff165b1561328b578481815181106132295761322961598a565b60200260200101518284815181106132435761324361598a565b6020026020010181815250506132718582815181106132645761326461598a565b6020026020010151612406565b61327b9085615b63565b935082613287816159b6565b9350505b80613295816159b6565b915050613196565b5081156133b7576000826001600160401b038111156132be576132be615365565b6040519080825280602002602001820160405280156132e7578160200160208202803683370190505b50905060005b8381101561333e578281815181106133075761330761598a565b60200260200101518282815181106133215761332161598a565b602090810291909101015280613336816159b6565b9150506132ed565b506040518060a001604052808a6001600160a01b0316815260200187600481111561336b5761336b6155a4565b8152602081018590526040016133818587615c02565b8152602001828152508e8c8151811061339c5761339c61598a565b60200260200101819052508a806133b2906159b6565b9b5050505b5050505b505080806133c8906159b6565b91505061306d565b50505080806133de906159b6565b915050612f9b565b506000816001600160401b0381111561340157613401615365565b60405190808252806020026020018201604052801561346557816020015b6134526040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b81526020019060019003908161341f5790505b50905060005b828110156134bd578581815181106134855761348561598a565b602002602001015182828151811061349f5761349f61598a565b602002602001018190525080806134b5906159b6565b91505061346b565b50949350505050565b6115bc61415e565b60606134d982614119565b50600082815260066020526040812080546134f390615950565b80601f016020809104026020016040519081016040528092919081815260200182805461351f90615950565b801561356c5780601f106135415761010080835404028352916020019161356c565b820191906000526020600020905b81548152906001019060200180831161354f57829003601f168201915b50505050509050600061358a60408051602081019091526000815290565b9050805160000361359c575092915050565b8151156135ce5780826040516020016135b6929190615c31565b60405160208183030381529060405292505050919050565b6135d784614b02565b949350505050565b6010602052826000526040600020602052816000526040600020818154811061360757600080fd5b9060005260206000200160009250925050505481565b61362561415e565b6007546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015612e81573d6000803e3d6000fd5b60608080808080806005604051908082528060200260200182016040528015613691578160200160208202803683370190505b5060408051600580825260c08201909252919850816020015b60608152602001906001900390816136aa57505060408051600580825260c082019092529197506020820160a080368337505060408051600580825260c0820190925292975090506020820160a080368337505060408051600580825260c0820190925292965090506020820160a080368337505060408051600580825260c0820190925292955090506020820160a080368337505060408051600580825260c0820190925292945090506020820160a08036833701905050905060005b60058110156139a7576000816004811115613785576137856155a4565b90506000600a600083600481111561379f5761379f6155a4565b60048111156137b0576137b06155a4565b81526020019081526020016000206040518060a00160405290816000820180546137d990615950565b80601f016020809104026020016040519081016040528092919081815260200182805461380590615950565b80156138525780601f1061382757610100808354040283529160200191613852565b820191906000526020600020905b81548152906001019060200180831161383557829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050816004811115613897576138976155a4565b8a84815181106138a9576138a961598a565b602002602001019060ff16908160ff168152505080600001518984815181106138d4576138d461598a565b602002602001018190525080602001518884815181106138f6576138f661598a565b60200260200101818152505061390b82613f6d565b87848151811061391d5761391d61598a565b60200260200101818152505080604001518684815181106139405761394061598a565b60200260200101818152505080606001518584815181106139635761396361598a565b60200260200101818152505080608001518484815181106139865761398661598a565b6020026020010181815250505050808061399f906159b6565b915050613768565b5090919293949596565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b601160205281600052604060002081815481106139fb57600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b6001600160a01b0381166000908152601160209081526040808320805482518185028101850190935280835260609493830182828015613ab157602002820191906000526020600020906000905b82829054906101000a900460ff166004811115613a8f57613a8f6155a4565b815260206001928301818104948501949093039092029101808411613a705790505b5050505050905080516001600160401b03811115613ad157613ad1615365565b604051908082528060200260200182016040528015613b2757816020015b613b146040805160608101909152806000815260200160008152602001600081525090565b815260200190600190039081613aef5790505b50915060005b8151811015613d40576000828281518110613b4a57613b4a61598a565b60200260200101519050600060106000876001600160a01b03166001600160a01b031681526020019081526020016000206000836004811115613b8f57613b8f6155a4565b6004811115613ba057613ba06155a4565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613bf857602002820191906000526020600020905b815481526020019060010190808311613be4575b5050505050905060008060005b8351811015613cc757600e6000858381518110613c2457613c2461598a565b60209081029190910181015182528101919091526040016000205460ff168015613c815750600f6000858381518110613c5f57613c5f61598a565b60209081029190910181015182528101919091526040016000206003015460ff165b15613cb557613c9b8482815181106132645761326461598a565b613ca59084615b63565b925081613cb1816159b6565b9250505b80613cbf816159b6565b915050613c05565b506040518060600160405280856004811115613ce557613ce56155a4565b815260200182815260200160008311613cff576000613d09565b613d098385615c02565b815250878681518110613d1e57613d1e61598a565b6020026020010181905250505050508080613d38906159b6565b915050613b2d565b5050919050565b613d4f61415e565b6001600160a01b038116613d7957604051631e4fbdf760e01b815260006004820152602401610b62565b612e818161487e565b600080613d8e8361418b565b6001600160a01b031603613db45760405162461bcd60e51b8152600401610b6290615bab565b6000828152600b6020526040808220815160c081019092528054829060ff166004811115613de457613de46155a4565b6004811115613df557613df56155a4565b81526001820154602082015260028201546040820152600382015460608201526004808301546001600160a01b0316608083015260059092015460a0909101528151919250600091600a91839190811115613e5257613e526155a4565b6004811115613e6357613e636155a4565b81526020019081526020016000206040518060a0016040529081600082018054613e8c90615950565b80601f0160208091040260200160405190810160405280929190818152602001828054613eb890615950565b8015613f055780601f10613eda57610100808354040283529160200191613f05565b820191906000526020600020905b815481529060010190602001808311613ee857829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000826060015142613f4a9190615b76565b9050600062278d008360400151613f619190615b4c565b905061261a8183615c02565b600080600a6000846004811115613f8657613f866155a4565b6004811115613f9757613f976155a4565b81526020019081526020016000206040518060a0016040529081600082018054613fc090615950565b80601f0160208091040260200160405190810160405280929190818152602001828054613fec90615950565b80156140395780601f1061400e57610100808354040283529160200191614039565b820191906000526020600020905b81548152906001019060200180831161401c57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000600160095461407d9190615b76565b90506000620186a0836080015183856020015161409a9190615b4c565b6140a49190615b4c565b6140ae9190615c02565b90508083602001516140c09190615b63565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b14806140fa57506001600160e01b03198216635b5e139f60e01b145b80610a4957506301ffc9a760e01b6001600160e01b0319831614610a49565b6000806141258361418b565b90506001600160a01b038116610a4957604051637e27328960e01b815260048101849052602401610b62565b6117548383836001614b77565b6007546001600160a01b031633146115bc5760405163118cdaa760e01b8152336004820152602401610b62565b6000908152600260205260409020546001600160a01b031690565b6000806141b28461418b565b90506001600160a01b038116158015906141d457506001600160a01b03851615155b80156141f25750846001600160a01b0316816001600160a01b031614155b156142a5576001600160a01b0381166000908152600c6020526040812080549161421b83615c60565b90915550506001600160a01b0385166000908152600c60205260408120805491614244836159b6565b90915550506000848152600b6020908152604080832060040180546001600160a01b0319166001600160a01b038a16179055600e90915290205460ff16156142a5576000848152600b602052604090205460ff166142a38583836142da565b505b6140c0858585614c7d565b6002600854036142d357604051633ee5aeb560e01b815260040160405180910390fd5b6002600855565b6000838152600e60209081526040808320805460ff19908116909155600f9092528220600301805490911690555b6013548110156143be5783601382815481106143265761432661598a565b9060005260206000200154036143ac576013805461434690600190615b76565b815481106143565761435661598a565b9060005260206000200154601382815481106143745761437461598a565b600091825260209091200155601380548061439157614391615c77565b600190038181906000526020600020016000905590556143be565b806143b6816159b6565b915050614308565b506001600160a01b0382166000908152601060205260408120818360048111156143ea576143ea6155a4565b60048111156143fb576143fb6155a4565b8152602001908152602001600020905060005b81548110156144c2578482828154811061442a5761442a61598a565b9060005260206000200154036144b0578154829061444a90600190615b76565b8154811061445a5761445a61598a565b90600052602060002001548282815481106144775761447761598a565b90600052602060002001819055508180548061449557614495615c77565b600190038181906000526020600020016000905590556144c2565b806144ba816159b6565b91505061440e565b506001600160a01b0383166000908152601060205260408120908360048111156144ee576144ee6155a4565b60048111156144ff576144ff6155a4565b815260200190815260200160002080549050600003614673576001600160a01b0383166000908152601160205260408120905b81548110156146705783600481111561454d5761454d6155a4565b82828154811061455f5761455f61598a565b90600052602060002090602091828204019190069054906101000a900460ff166004811115614590576145906155a4565b0361465e57815482906145a590600190615b76565b815481106145b5576145b561598a565b90600052602060002090602091828204019190069054906101000a900460ff168282815481106145e7576145e761598a565b90600052602060002090602091828204019190066101000a81548160ff0219169083600481111561461a5761461a6155a4565b02179055508180548061462f5761462f615c77565b60019003818190600052602060002090602091828204019190066101000a81549060ff02191690559055614670565b80614668816159b6565b915050614532565b50505b6001600160a01b03831660009081526011602090815260408083208054825181850281018501909352808352849383018282801561470057602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156146de576146de6155a4565b8152602060019283018181049485019490930390920291018084116146bf5790505b5050505050905060005b815181101561479d576001600160a01b0386166000908152601060205260408120835182908590859081106147415761474161598a565b6020026020010151600481111561475a5761475a6155a4565b600481111561476b5761476b6155a4565b8152602081019190915260400160002054111561478b576001925061479d565b80614795816159b6565b91505061470a565b50506001600160a01b03939093166000908152601260205260409020805460ff191693151593909317909255505050565b6001600160a01b0382166147f857604051633250574960e11b815260006004820152602401610b62565b6000614806838360006141a6565b90506001600160a01b03811661483257604051637e27328960e01b815260048101839052602401610b62565b836001600160a01b0316816001600160a01b031614610f92576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610b62565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03821661490257604051630b61174360e31b81526001600160a01b0383166004820152602401610b62565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b15828260405180602001604052806000815250614d71565b60008281526006602052604090206149a18282615a1d565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6001600160a01b0383163b15610f9257604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290614a1b903390889087908790600401615c8d565b6020604051808303816000875af1925050508015614a56575060408051601f3d908101601f19168201909252614a5391810190615cc0565b60015b614abf573d808015614a84576040519150601f19603f3d011682016040523d82523d6000602084013e614a89565b606091505b508051600003614ab757604051633250574960e11b81526001600160a01b0385166004820152602401610b62565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14614afb57604051633250574960e11b81526001600160a01b0385166004820152602401610b62565b5050505050565b6060614b0d82614119565b506000614b2560408051602081019091526000815290565b90506000815111614b455760405180602001604052806000815250614b70565b80614b4f84614d88565b604051602001614b60929190615c31565b6040516020818303038152906040525b9392505050565b8080614b8b57506001600160a01b03821615155b15614c4d576000614b9b84614119565b90506001600160a01b03831615801590614bc75750826001600160a01b0316816001600160a01b031614155b8015614bda5750614bd881846139b1565b155b15614c035760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610b62565b8115614c4b5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b600080614c898461418b565b90506001600160a01b03831615614ca557614ca5818486614e1a565b6001600160a01b03811615614ce357614cc2600085600080614b77565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615614d12576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b614d7b8383614e7e565b61175460008484846149d9565b60606000614d9583614ee3565b60010190506000816001600160401b03811115614db457614db4615365565b6040519080825280601f01601f191660200182016040528015614dde576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084614de857509392505050565b614e25838383614fbb565b611754576001600160a01b038316614e5357604051637e27328960e01b815260048101829052602401610b62565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610b62565b6001600160a01b038216614ea857604051633250574960e11b815260006004820152602401610b62565b6000614eb6838360006141a6565b90506001600160a01b03811615611754576040516339e3563760e11b815260006004820152602401610b62565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614f225772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614f4e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614f6c57662386f26fc10000830492506010015b6305f5e1008310614f84576305f5e100830492506008015b6127108310614f9857612710830492506004015b60648310614faa576064830492506002015b600a8310610a495760010192915050565b60006001600160a01b038316158015906135d75750826001600160a01b0316846001600160a01b03161480614ff55750614ff584846139b1565b806135d75750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b031981168114612e8157600080fd5b60006020828403121561504657600080fd5b8135614b708161501e565b60005b8381101561506c578181015183820152602001615054565b50506000910152565b6000815180845261508d816020860160208601615051565b601f01601f19169290920160200192915050565b602081526000614b706020830184615075565b6000602082840312156150c657600080fd5b5035919050565b80356001600160a01b03811681146150e457600080fd5b919050565b600080604083850312156150fc57600080fd5b615105836150cd565b946020939093013593505050565b60006020828403121561512557600080fd5b614b70826150cd565b600081518084526020808501945080840160005b8381101561515e57815187529582019590820190600101615142565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b848110156151b457601f198684030189526151a2838351615075565b98840198925090830190600101615186565b5090979650505050505050565b60c0815260006151d460c083018961512e565b82810360208401526151e68189615169565b905082810360408401526151fa818861512e565b9050828103606084015261520e818761512e565b90508281036080840152615222818661512e565b905082810360a0840152615236818561512e565b9998505050505050505050565b60008060006060848603121561525857600080fd5b615261846150cd565b925061526f602085016150cd565b9150604084013590509250925092565b8035600581106150e457600080fd5b600080604083850312156152a157600080fd5b6152aa836150cd565b91506152b86020840161527f565b90509250929050565b6060815260006152d4606083018661512e565b82810360208401526152e6818661512e565b9050828103604084015261261a818561512e565b60006020828403121561530c57600080fd5b614b708261527f565b602081526000825160a0602084015261533160c0840182615075565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561539557615395615365565b604051601f8501601f19908116603f011681019082821181831017156153bd576153bd615365565b816040528093508581528686860111156153d657600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261540157600080fd5b614b708383356020850161537b565b60008060008060008060c0878903121561542957600080fd5b6154328761527f565b955060208701356001600160401b0381111561544d57600080fd5b61545989828a016153f0565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b6000806020838503121561549357600080fd5b82356001600160401b03808211156154aa57600080fd5b818501915085601f8301126154be57600080fd5b8135818111156154cd57600080fd5b8660208260051b85010111156154e257600080fd5b60209290920196919550909350505050565b60008060006060848603121561550957600080fd5b615512846150cd565b925061526f6020850161527f565b60a08152600061553360a0830188615075565b90508560208301528460408301528360608301528260808301529695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156155985783516001600160a01b031683529284019291840191600101615573565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600581106155d857634e487b7160e01b600052602160045260246000fd5b9052565b60c081016155ea82896155ba565b6020820196909652604081019490945260608401929092526001600160a01b0316608083015260a090910152919050565b6000806040838503121561562e57600080fd5b615637836150cd565b91506020830135801515811461564c57600080fd5b809150509250929050565b6000806040838503121561566a57600080fd5b6156738361527f565b915060208301356001600160401b0381111561568e57600080fd5b61569a858286016153f0565b9150509250929050565b600080600080608085870312156156ba57600080fd5b6156c3856150cd565b93506156d1602086016150cd565b92506040850135915060608501356001600160401b038111156156f357600080fd5b8501601f8101871361570457600080fd5b6157138782356020840161537b565b91505092959194509250565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156157e557898403603f19018652825180516001600160a01b031685528881015160a0908187019061577e8c8901826155ba565b50828a0151878b015260608084015190880152608092830151928701919091528151908190529089019060c086019084905b808210156157d05783518352928b0192918b0191600191909101906157b0565b50509689019694505091870191600101615747565b50919998505050505050505050565b60e08082528851908201819052600090602090610100840190828c01845b8281101561583157815160ff1684529284019290840190600101615812565b50505083810382850152615845818b615169565b915050828103604084015261585a818961512e565b9050828103606084015261586e818861512e565b90508281036080840152615882818761512e565b905082810360a0840152615896818661512e565b905082810360c08401526158aa818561512e565b9a9950505050505050505050565b600080604083850312156158cb57600080fd5b6158d4836150cd565b91506152b8602084016150cd565b60208101610a4982846155ba565b602080825282518282018190526000919060409081850190868401855b828110156159435781516159228582516155ba565b8087015185880152850151858501526060909301929085019060010161590d565b5091979650505050505050565b600181811c9082168061596457607f821691505b60208210810361598457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016159c8576159c86159a0565b5060010190565b601f82111561175457600081815260208120601f850160051c810160208610156159f65750805b601f850160051c820191505b81811015615a1557828155600101615a02565b505050505050565b81516001600160401b03811115615a3657615a36615365565b615a4a81615a448454615950565b846159cf565b602080601f831160018114615a7f5760008415615a675750858301515b600019600386901b1c1916600185901b178555615a15565b600085815260208120601f198616915b82811015615aae57888601518255948401946001909101908401615a8f565b5085821015615acc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601a908201527f4e6f7420746865206f776e6572206f6620746869732074726565000000000000604082015260600190565b6020808252810182905260006001600160fb1b03831115615b3357600080fd5b8260051b80856040850137919091016040019392505050565b8082028115828204841417610a4957610a496159a0565b80820180821115610a4957610a496159a0565b81810381811115610a4957610a496159a0565b604081526000615b9c604083018561512e565b90508260208301529392505050565b602080825260139082015272151c995948191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600082615bfd57615bfd615bd8565b500690565b600082615c1157615c11615bd8565b500490565b60408101615c2482856155ba565b8260208301529392505050565b60008351615c43818460208801615051565b835190830190615c57818360208801615051565b01949350505050565b600081615c6f57615c6f6159a0565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061261a90830184615075565b600060208284031215615cd257600080fd5b8151614b708161501e56fea2646970667358221220311d50655eb67538329470baa0f92fc86f384d080ad075dde016ba33a947c68e64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102cd5760003560e01c80637a50802211610175578063c87b56dd116100dc578063e985e9c511610095578063f2fde38b1161006f578063f2fde38b14610994578063f434db0b146109b4578063f5d63c7d146109d4578063fcce4883146109f457600080fd5b8063e985e9c51461091a578063ec0bbf931461093a578063eee51b211461096757600080fd5b8063c87b56dd146107f7578063d876abaa14610817578063da292e9014610837578063db2e21bc14610864578063de74e57b14610879578063e1ccc768146108f257600080fd5b8063b43127361161012e578063b43127361461074a578063b51cb5871461075d578063b84932d21461078d578063b88d4fde146107ad578063babdb6c8146107cd578063bd097e21146107ef57600080fd5b80637a508022146106385780637a69c089146106aa5780638da5cb5b146106d757806395d89b41146106f5578063a07a86031461070a578063a22cb4651461072a57600080fd5b806339f3dc5a1161023457806369cc2a14116101ed57806370a08231116101c757806370a08231146105cb578063715018a6146105eb57806375794a3c1461060057806376f32a701461061657600080fd5b806369cc2a141461055a5780636a43f8ea1461058b578063702ed135146105ab57600080fd5b806339f3dc5a146104a757806342842e0e146104c75780634677d0f9146104e75780635207066c1461050757806361cf48631461051a5780636352211e1461053a57600080fd5b806322f93c7b1161028657806322f93c7b146103c457806323b872dd146103f65780632505a1be146104165780632a1e141e146104455780632bf8ce231461047257806339913e091461049257600080fd5b806301ffc9a7146102d957806306fdde031461030e578063081812fc14610330578063095ea7b31461036857806310786deb1461038a57806321009423146103af57600080fd5b366102d457005b600080fd5b3480156102e557600080fd5b506102f96102f4366004615034565b610a24565b60405190151581526020015b60405180910390f35b34801561031a57600080fd5b50610323610a4f565b60405161030591906150a1565b34801561033c57600080fd5b5061035061034b3660046150b4565b610ae1565b6040516001600160a01b039091168152602001610305565b34801561037457600080fd5b506103886103833660046150e9565b610b0a565b005b34801561039657600080fd5b506103a162278d0081565b604051908152602001610305565b3480156103bb57600080fd5b50610388610b19565b3480156103d057600080fd5b506103e46103df366004615113565b610c11565b604051610305969594939291906151c1565b34801561040257600080fd5b50610388610411366004615243565b610f0d565b34801561042257600080fd5b5061043661043136600461528e565b610f98565b604051610305939291906152c1565b34801561045157600080fd5b506104656104603660046152fa565b6112b8565b6040516103059190615315565b34801561047e57600080fd5b5061038861048d366004615410565b6113eb565b34801561049e57600080fd5b50610388611492565b3480156104b357600080fd5b506103886104c2366004615480565b6115be565b3480156104d357600080fd5b506103886104e2366004615243565b611739565b3480156104f357600080fd5b50610388610502366004615480565b611759565b6103886105153660046154f4565b6119f1565b34801561052657600080fd5b506103a16105353660046150b4565b611e86565b34801561054657600080fd5b506103506105553660046150b4565b611ea7565b34801561056657600080fd5b5061057a6105753660046150b4565b611eb2565b604051610305959493929190615520565b34801561059757600080fd5b506103886105a6366004615480565b6120ec565b3480156105b757600080fd5b506103a16105c63660046150b4565b612406565b3480156105d757600080fd5b506103a16105e6366004615113565b612624565b3480156105f757600080fd5b5061038861266c565b34801561060c57600080fd5b506103a160095481565b34801561062257600080fd5b5061062b61267e565b6040516103059190615557565b34801561064457600080fd5b506106986106533660046150b4565b600b6020526000908152604090208054600182015460028301546003840154600485015460059095015460ff909416949293919290916001600160a01b039091169086565b604051610305969594939291906155dc565b3480156106b657600080fd5b506103a16106c5366004615113565b600c6020526000908152604090205481565b3480156106e357600080fd5b506007546001600160a01b0316610350565b34801561070157600080fd5b50610323612873565b34801561071657600080fd5b5061057a6107253660046152fa565b612882565b34801561073657600080fd5b5061038861074536600461561b565b612938565b610388610758366004615657565b612943565b34801561076957600080fd5b506102f9610778366004615113565b60126020526000908152604090205460ff1681565b34801561079957600080fd5b506103886107a83660046150b4565b612c43565b3480156107b957600080fd5b506103886107c83660046156a4565b612e84565b3480156107d957600080fd5b506107e2612e9b565b604051610305919061571f565b6103886134c6565b34801561080357600080fd5b506103236108123660046150b4565b6134ce565b34801561082357600080fd5b506103a16108323660046154f4565b6135df565b34801561084357600080fd5b506103a1610852366004615113565b600d6020526000908152604090205481565b34801561087057600080fd5b5061038861361d565b34801561088557600080fd5b506108c86108943660046150b4565b600f60205260009081526040902080546001820154600283015460039093015491926001600160a01b039091169160ff1684565b604080519485526001600160a01b0390931660208501529183015215156060820152608001610305565b3480156108fe57600080fd5b5061090761365e565b60405161030597969594939291906157f4565b34801561092657600080fd5b506102f96109353660046158b8565b6139b1565b34801561094657600080fd5b5061095a6109553660046150e9565b6139df565b60405161030591906158e2565b34801561097357600080fd5b50610987610982366004615113565b613a22565b60405161030591906158f0565b3480156109a057600080fd5b506103886109af366004615113565b613d47565b3480156109c057600080fd5b506103a16109cf3660046150b4565b613d82565b3480156109e057600080fd5b506103a16109ef3660046152fa565b613f6d565b348015610a0057600080fd5b506102f9610a0f3660046150b4565b600e6020526000908152604090205460ff1681565b60006001600160e01b03198216632483248360e11b1480610a495750610a49826140c9565b92915050565b606060008054610a5e90615950565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8a90615950565b8015610ad75780601f10610aac57610100808354040283529160200191610ad7565b820191906000526020600020905b815481529060010190602001808311610aba57829003601f168201915b5050505050905090565b6000610aec82614119565b506000828152600460205260409020546001600160a01b0316610a49565b610b15828233614151565b5050565b610b2161415e565b4780610b6b5760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064015b60405180910390fd5b6000610b7f6007546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610bc9576040519150601f19603f3d011682016040523d82523d6000602084013e610bce565b606091505b5050905080610b155760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610b62565b6001600160a01b0381166000908152600c602052604090205460609081908190819081908190806001600160401b03811115610c4f57610c4f615365565b604051908082528060200260200182016040528015610c78578160200160208202803683370190505b509650806001600160401b03811115610c9357610c93615365565b604051908082528060200260200182016040528015610cc657816020015b6060815260200190600190039081610cb15790505b509550806001600160401b03811115610ce157610ce1615365565b604051908082528060200260200182016040528015610d0a578160200160208202803683370190505b509450806001600160401b03811115610d2557610d25615365565b604051908082528060200260200182016040528015610d4e578160200160208202803683370190505b509350806001600160401b03811115610d6957610d69615365565b604051908082528060200260200182016040528015610d92578160200160208202803683370190505b509250806001600160401b03811115610dad57610dad615365565b604051908082528060200260200182016040528015610dd6578160200160208202803683370190505b509150600060015b600954811015610f0157896001600160a01b0316610dfb8261418b565b6001600160a01b031603610eef5780898381518110610e1c57610e1c61598a565b6020026020010181815250506000806000806000610e3986611eb2565b94509450945094509450848d8881518110610e5657610e5661598a565b6020026020010181905250838c8881518110610e7457610e7461598a565b602002602001018181525050828b8881518110610e9357610e9361598a565b602002602001018181525050818a8881518110610eb257610eb261598a565b60200260200101818152505080898881518110610ed157610ed161598a565b602090810291909101015286610ee6816159b6565b97505050505050505b80610ef9816159b6565b915050610dde565b50505091939550919395565b6001600160a01b038216610f3757604051633250574960e11b815260006004820152602401610b62565b6000610f448383336141a6565b9050836001600160a01b0316816001600160a01b031614610f92576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610b62565b50505050565b6001600160a01b0382166000908152601060205260408120606091829182919081866004811115610fcb57610fcb6155a4565b6004811115610fdc57610fdc6155a4565b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561103457602002820191906000526020600020905b815481526020019060010190808311611020575b505050505090506000805b82518110156110e057600e600084838151811061105e5761105e61598a565b60209081029190910181015182528101919091526040016000205460ff1680156110bb5750600f60008483815181106110995761109961598a565b60209081029190910181015182528101919091526040016000206003015460ff165b156110ce57816110ca816159b6565b9250505b806110d8816159b6565b91505061103f565b50806001600160401b038111156110f9576110f9615365565b604051908082528060200260200182016040528015611122578160200160208202803683370190505b509450806001600160401b0381111561113d5761113d615365565b604051908082528060200260200182016040528015611166578160200160208202803683370190505b509350806001600160401b0381111561118157611181615365565b6040519080825280602002602001820160405280156111aa578160200160208202803683370190505b5092506000805b83518110156112ad5760008482815181106111ce576111ce61598a565b6020908102919091018101516000818152600e90925260409091205490915060ff16801561120d57506000818152600f602052604090206003015460ff165b1561129a57808884815181106112255761122561598a565b60200260200101818152505061123a81612406565b87848151811061124c5761124c61598a565b602002602001018181525050600f6000828152602001908152602001600020600201548684815181106112815761128161598a565b602090810291909101015282611296816159b6565b9350505b50806112a5816159b6565b9150506111b1565b505050509250925092565b6112ea6040518060a0016040528060608152602001600081526020016000815260200160008152602001600081525090565b600a6000836004811115611300576113006155a4565b6004811115611311576113116155a4565b81526020019081526020016000206040518060a001604052908160008201805461133a90615950565b80601f016020809104026020016040519081016040528092919081815260200182805461136690615950565b80156113b35780601f10611388576101008083540402835291602001916113b3565b820191906000526020600020905b81548152906001019060200180831161139657829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b6113f361415e565b6040518060a0016040528086815260200185815260200184815260200183815260200182815250600a6000886004811115611430576114306155a4565b6004811115611441576114416155a4565b815260208101919091526040016000208151819061145f9082615a1d565b50602082015160018201556040820151600282015560608201516003820155608090910151600490910155505050505050565b61149a6142b0565b336000908152600d6020526040902054806114f05760405162461bcd60e51b81526020600482015260166024820152754e6f2070726f6669747320746f20776974686472617760501b6044820152606401610b62565b804710156115405760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610b62565b336000818152600d60205260408082208290555183156108fc0291849190818181858888f1935050505015801561157b573d6000803e3d6000fd5b5060405181815233907f016e128b6bdadd9e9068abd0b18db2fc8b27ed3dbced50e4aa6cc0a6934251ab9060200160405180910390a2506115bc6001600855565b565b6115c66142b0565b806116085760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610b62565b60005b818110156116eb5760008383838181106116275761162761598a565b905060200201359050336001600160a01b031661164382611ea7565b6001600160a01b0316146116695760405162461bcd60e51b8152600401610b6290615adc565b6000818152600e602052604090205460ff166116b95760405162461bcd60e51b815260206004820152600f60248201526e151c9959481b9bdd081b1a5cdd1959608a1b6044820152606401610b62565b6000818152600b602052604090205460ff166116d68233836142da565b505080806116e3906159b6565b91505061160b565b50336001600160a01b03167f3fa3ddc780dd74af1f9341736df5507180f79d41b093b8550ca517732ec5951d8383604051611727929190615b13565b60405180910390a2610b156001600855565b61175483838360405180602001604052806000815250612e84565b505050565b6117616142b0565b6000805b8281101561197a5760008484838181106117815761178161598a565b905060200201359050336001600160a01b031661179d82611ea7565b6001600160a01b0316146117c35760405162461bcd60e51b8152600401610b6290615adc565b60006117ce82613d82565b90508015611965576000828152600b602052604081208054909190600a90829060ff166004811115611802576118026155a4565b6004811115611813576118136155a4565b81526020019081526020016000206040518060a001604052908160008201805461183c90615950565b80601f016020809104026020016040519081016040528092919081815260200182805461186890615950565b80156118b55780601f1061188a576101008083540402835291602001916118b5565b820191906000526020600020905b81548152906001019060200180831161189857829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905060008160600151846118fa9190615b4c565b90506119068188615b63565b9650428360030181905550838360050160008282546119259190615b63565b9091555050604051818152339086907f766239c5232e9bdab39412c031a3de6df65b6a9e7e178595e53317f1719f0a709060200160405180910390a35050505b50508080611972906159b6565b915050611765565b50600081116119c35760405162461bcd60e51b81526020600482015260156024820152744e6f20686172766573747320617661696c61626c6560581b6044820152606401610b62565b336000908152600d6020526040812080548392906119e2908490615b63565b90915550506001600855505050565b6119f96142b0565b60008111611a495760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e2030006044820152606401610b62565b6001600160a01b03831660009081526012602052604090205460ff16611ab15760405162461bcd60e51b815260206004820152601d60248201527f53656c6c657220686173206e6f20616374697665206c697374696e67730000006044820152606401610b62565b6001600160a01b038316600090815260106020526040812081846004811115611adc57611adc6155a4565b6004811115611aed57611aed6155a4565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015611b4557602002820191906000526020600020905b815481526020019060010190808311611b31575b505050505090508181511015611bb15760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f75676820747265657320617661696c61626c652066726f6d2060448201526a3a3434b99039b2b63632b960a91b6064820152608401610b62565b6000826001600160401b03811115611bcb57611bcb615365565b604051908082528060200260200182016040528015611bf4578160200160208202803683370190505b50905060008060005b845181108015611c0c57508582105b15611cbe576000858281518110611c2557611c2561598a565b6020908102919091018101516000818152600e90925260409091205490915060ff168015611c6457506000818152600f602052604090206003015460ff165b15611cab5780858481518110611c7c57611c7c61598a565b602002602001018181525050611c9181612406565b611c9b9085615b63565b935082611ca7816159b6565b9350505b5080611cb6816159b6565b915050611bfd565b50848114611d1a5760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f75676820616374697665206c697374696e677320617661696c60448201526361626c6560e01b6064820152608401610b62565b81341015611d615760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610b62565b60005b85811015611db3576000848281518110611d8057611d8061598a565b60200260200101519050611d95818a8a6142da565b611da08933836147ce565b5080611dab816159b6565b915050611d64565b506040516001600160a01b0388169083156108fc029084906000818181858888f19350505050158015611dea573d6000803e3d6000fd5b5081341115611e2b57336108fc611e018434615b76565b6040518115909202916000818181858888f19350505050158015611e29573d6000803e3d6000fd5b505b336001600160a01b0316876001600160a01b03167f596718f13c536c1e489b6919d4d687f3fc102f8adda16653785f14f72c7266798585604051611e70929190615b89565b60405180910390a3505050506117546001600855565b60138181548110611e9657600080fd5b600091825260209091200154905081565b6000610a4982614119565b6060600080808080611ec38761418b565b6001600160a01b031603611ee95760405162461bcd60e51b8152600401610b6290615bab565b6000868152600b6020526040808220815160c081019092528054829060ff166004811115611f1957611f196155a4565b6004811115611f2a57611f2a6155a4565b81526001820154602082015260028201546040820152600382015460608201526004808301546001600160a01b0316608083015260059092015460a0909101528151919250600091600a91839190811115611f8757611f876155a4565b6004811115611f9857611f986155a4565b81526020019081526020016000206040518060a0016040529081600082018054611fc190615950565b80601f0160208091040260200160405190810160405280929190818152602001828054611fed90615950565b801561203a5780601f1061200f5761010080835404028352916020019161203a565b820191906000526020600020905b81548152906001019060200180831161201d57829003601f168201915b505050918352505060018201546020820152600282015460408201526003820154606082015260049091015460809091015280519750905061207b88612406565b955061208688613d82565b94508160a001519350600062278d0082604001516120a49190615b4c565b905060008360600151426120b89190615b76565b905060006120c68383615bee565b6120d09084615b76565b90506120dc8142615b63565b9550505050505091939590929450565b6120f46142b0565b806121365760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610b62565b60005b818110156123ca5760008383838181106121555761215561598a565b905060200201359050336001600160a01b031661217182611ea7565b6001600160a01b0316146121975760405162461bcd60e51b8152600401610b6290615adc565b6000818152600e602052604090205460ff16156121ec5760405162461bcd60e51b8152602060048201526013602482015272151c995948185b1c9958591e481b1a5cdd1959606a1b6044820152606401610b62565b60408051608081018252828152336020808301828152428486019081526001606086018181526000898152600f865288812097518855935187830180546001600160a01b039092166001600160a01b03199092169190911790559151600287015590516003909501805495151560ff19968716179055600e8352858220805490951681179094556013805494850190557f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090909301859055600b8152838320549183526010905291812060ff90921691908260048111156122ce576122ce6155a4565b60048111156122df576122df6155a4565b8152602080820192909252604090810160009081208054600181018255908252838220018590553381526010909252812090826004811115612323576123236155a4565b6004811115612334576123346155a4565b815260208101919091526040016000205460010361239c5733600090815260116020908152604082208054600181018255908352918190209082040180548392601f166101000a60ff81021990911690836004811115612396576123966155a4565b02179055505b5050336000908152601260205260409020805460ff19166001179055806123c2816159b6565b915050612139565b50336001600160a01b03167ffc4f8948e68b1d67bd9db6ff71f155b426a2d051f2e60143df0bd2d8c7aec7158383604051611727929190615b13565b6000806124128361418b565b6001600160a01b0316036124385760405162461bcd60e51b8152600401610b6290615bab565b6000828152600b6020526040808220815160c081019092528054829060ff166004811115612468576124686155a4565b6004811115612479576124796155a4565b81526001820154602082015260028201546040820152600382015460608201526004808301546001600160a01b0316608083015260059092015460a0909101528151919250600091600a918391908111156124d6576124d66155a4565b60048111156124e7576124e76155a4565b81526020019081526020016000206040518060a001604052908160008201805461251090615950565b80601f016020809104026020016040519081016040528092919081815260200182805461253c90615950565b80156125895780601f1061255e57610100808354040283529160200191612589565b820191906000526020600020905b81548152906001019060200180831161256c57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050905060006301e133808360200151426125d39190615b76565b6125dd9190615c02565b905060008183608001516125f19190615b4c565b6125fc906064615b63565b905060648185604001516126109190615b4c565b61261a9190615c02565b9695505050505050565b60006001600160a01b038216612650576040516322718ad960e21b815260006004820152602401610b62565b506001600160a01b031660009081526003602052604090205490565b61267461415e565b6115bc600061487e565b60606000806013805490506001600160401b038111156126a0576126a0615365565b6040519080825280602002602001820160405280156126c9578160200160208202803683370190505b50905060005b6013548110156127c7576000600f6000601384815481106126f2576126f261598a565b600091825260208083209091015483528201929092526040018120600101546001600160a01b03169150805b8581101561277357826001600160a01b03168582815181106127425761274261598a565b60200260200101516001600160a01b0316036127615760019150612773565b8061276b816159b6565b91505061271e565b50806127b2578184868151811061278c5761278c61598a565b6001600160a01b0390921660209283029190910190910152846127ae816159b6565b9550505b505080806127bf906159b6565b9150506126cf565b50816001600160401b038111156127e0576127e0615365565b604051908082528060200260200182016040528015612809578160200160208202803683370190505b50925060005b8281101561286d578181815181106128295761282961598a565b60200260200101518482815181106128435761284361598a565b6001600160a01b039092166020928302919091019091015280612865816159b6565b91505061280f565b50505090565b606060018054610a5e90615950565b600a6020526000908152604090208054819061289d90615950565b80601f01602080910402602001604051908101604052809291908181526020018280546128c990615950565b80156129165780601f106128eb57610100808354040283529160200191612916565b820191906000526020600020905b8154815290600101906020018083116128f957829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b610b153383836148d0565b61294b6142b0565b6000600a6000846004811115612963576129636155a4565b6004811115612974576129746155a4565b81526020019081526020016000206040518060a001604052908160008201805461299d90615950565b80601f01602080910402602001604051908101604052809291908181526020018280546129c990615950565b8015612a165780601f106129eb57610100808354040283529160200191612a16565b820191906000526020600020905b8154815290600101906020018083116129f957829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000612a5484613f6d565b905080341015612a9d5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610b62565b6009805460009182612aae836159b6565b919050559050612abe338261496f565b612ac88185614989565b6040518060c00160405280866004811115612ae557612ae56155a4565b8152426020808301829052346040808501919091526060840192909252336080840152600060a0909301839052848352600b9052902081518154829060ff19166001836004811115612b3957612b396155a4565b0217905550602082810151600183015560408084015160028401556060840151600384015560808401516004840180546001600160a01b0319166001600160a01b0390921691909117905560a090930151600590920191909155336000908152600c909152908120805491612bad836159b6565b9190505550336001600160a01b0316817fbdd470aa38c4dc34533cb66c382a1754cddb22ebce90f0bdd993afc59b6a2ff68734604051612bee929190615c16565b60405180910390a381341115612c3657336108fc612c0c8434615b76565b6040518115909202916000818181858888f19350505050158015612c34573d6000803e3d6000fd5b505b505050610b156001600855565b612c4b6142b0565b33612c5582611ea7565b6001600160a01b031614612c7b5760405162461bcd60e51b8152600401610b6290615adc565b6000612c8682613d82565b905060008111612cd05760405162461bcd60e51b81526020600482015260156024820152744e6f20686172766573747320617661696c61626c6560581b6044820152606401610b62565b6000828152600b602052604081208054909190600a90829060ff166004811115612cfc57612cfc6155a4565b6004811115612d0d57612d0d6155a4565b81526020019081526020016000206040518060a0016040529081600082018054612d3690615950565b80601f0160208091040260200160405190810160405280929190818152602001828054612d6290615950565b8015612daf5780601f10612d8457610100808354040283529160200191612daf565b820191906000526020600020905b815481529060010190602001808311612d9257829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000816060015184612df49190615b4c565b905042836003018190555083836005016000828254612e139190615b63565b9091555050336000908152600d602052604081208054839290612e37908490615b63565b9091555050604051818152339086907f766239c5232e9bdab39412c031a3de6df65b6a9e7e178595e53317f1719f0a709060200160405180910390a350505050612e816001600855565b50565b612e8f848484610f0d565b610f92848484846149d9565b60606000612ea761267e565b90506000805b8251811015612f175760116000848381518110612ecc57612ecc61598a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905082612f039190615b63565b915080612f0f816159b6565b915050612ead565b50806001600160401b03811115612f3057612f30615365565b604051908082528060200260200182016040528015612f9457816020015b612f816040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b815260200190600190039081612f4e5790505b5092506000805b83518110156133e6576000848281518110612fb857612fb861598a565b60200260200101519050600060116000836001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561306357602002820191906000526020600020906000905b82829054906101000a900460ff166004811115613041576130416155a4565b8152602060019283018181049485019490930390920291018084116130225790505b5050505050905060005b81518110156133d057600082828151811061308a5761308a61598a565b60200260200101519050600060106000866001600160a01b03166001600160a01b0316815260200190815260200160002060008360048111156130cf576130cf6155a4565b60048111156130e0576130e06155a4565b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561313857602002820191906000526020600020905b815481526020019060010190808311613124575b505050505090506000815111156133bb57600080600083516001600160401b0381111561316757613167615365565b604051908082528060200260200182016040528015613190578160200160208202803683370190505b50905060005b845181101561329d57600e60008683815181106131b5576131b561598a565b60209081029190910181015182528101919091526040016000205460ff1680156132125750600f60008683815181106131f0576131f061598a565b60209081029190910181015182528101919091526040016000206003015460ff165b1561328b578481815181106132295761322961598a565b60200260200101518284815181106132435761324361598a565b6020026020010181815250506132718582815181106132645761326461598a565b6020026020010151612406565b61327b9085615b63565b935082613287816159b6565b9350505b80613295816159b6565b915050613196565b5081156133b7576000826001600160401b038111156132be576132be615365565b6040519080825280602002602001820160405280156132e7578160200160208202803683370190505b50905060005b8381101561333e578281815181106133075761330761598a565b60200260200101518282815181106133215761332161598a565b602090810291909101015280613336816159b6565b9150506132ed565b506040518060a001604052808a6001600160a01b0316815260200187600481111561336b5761336b6155a4565b8152602081018590526040016133818587615c02565b8152602001828152508e8c8151811061339c5761339c61598a565b60200260200101819052508a806133b2906159b6565b9b5050505b5050505b505080806133c8906159b6565b91505061306d565b50505080806133de906159b6565b915050612f9b565b506000816001600160401b0381111561340157613401615365565b60405190808252806020026020018201604052801561346557816020015b6134526040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b81526020019060019003908161341f5790505b50905060005b828110156134bd578581815181106134855761348561598a565b602002602001015182828151811061349f5761349f61598a565b602002602001018190525080806134b5906159b6565b91505061346b565b50949350505050565b6115bc61415e565b60606134d982614119565b50600082815260066020526040812080546134f390615950565b80601f016020809104026020016040519081016040528092919081815260200182805461351f90615950565b801561356c5780601f106135415761010080835404028352916020019161356c565b820191906000526020600020905b81548152906001019060200180831161354f57829003601f168201915b50505050509050600061358a60408051602081019091526000815290565b9050805160000361359c575092915050565b8151156135ce5780826040516020016135b6929190615c31565b60405160208183030381529060405292505050919050565b6135d784614b02565b949350505050565b6010602052826000526040600020602052816000526040600020818154811061360757600080fd5b9060005260206000200160009250925050505481565b61362561415e565b6007546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015612e81573d6000803e3d6000fd5b60608080808080806005604051908082528060200260200182016040528015613691578160200160208202803683370190505b5060408051600580825260c08201909252919850816020015b60608152602001906001900390816136aa57505060408051600580825260c082019092529197506020820160a080368337505060408051600580825260c0820190925292975090506020820160a080368337505060408051600580825260c0820190925292965090506020820160a080368337505060408051600580825260c0820190925292955090506020820160a080368337505060408051600580825260c0820190925292945090506020820160a08036833701905050905060005b60058110156139a7576000816004811115613785576137856155a4565b90506000600a600083600481111561379f5761379f6155a4565b60048111156137b0576137b06155a4565b81526020019081526020016000206040518060a00160405290816000820180546137d990615950565b80601f016020809104026020016040519081016040528092919081815260200182805461380590615950565b80156138525780601f1061382757610100808354040283529160200191613852565b820191906000526020600020905b81548152906001019060200180831161383557829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050816004811115613897576138976155a4565b8a84815181106138a9576138a961598a565b602002602001019060ff16908160ff168152505080600001518984815181106138d4576138d461598a565b602002602001018190525080602001518884815181106138f6576138f661598a565b60200260200101818152505061390b82613f6d565b87848151811061391d5761391d61598a565b60200260200101818152505080604001518684815181106139405761394061598a565b60200260200101818152505080606001518584815181106139635761396361598a565b60200260200101818152505080608001518484815181106139865761398661598a565b6020026020010181815250505050808061399f906159b6565b915050613768565b5090919293949596565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b601160205281600052604060002081815481106139fb57600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b6001600160a01b0381166000908152601160209081526040808320805482518185028101850190935280835260609493830182828015613ab157602002820191906000526020600020906000905b82829054906101000a900460ff166004811115613a8f57613a8f6155a4565b815260206001928301818104948501949093039092029101808411613a705790505b5050505050905080516001600160401b03811115613ad157613ad1615365565b604051908082528060200260200182016040528015613b2757816020015b613b146040805160608101909152806000815260200160008152602001600081525090565b815260200190600190039081613aef5790505b50915060005b8151811015613d40576000828281518110613b4a57613b4a61598a565b60200260200101519050600060106000876001600160a01b03166001600160a01b031681526020019081526020016000206000836004811115613b8f57613b8f6155a4565b6004811115613ba057613ba06155a4565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015613bf857602002820191906000526020600020905b815481526020019060010190808311613be4575b5050505050905060008060005b8351811015613cc757600e6000858381518110613c2457613c2461598a565b60209081029190910181015182528101919091526040016000205460ff168015613c815750600f6000858381518110613c5f57613c5f61598a565b60209081029190910181015182528101919091526040016000206003015460ff165b15613cb557613c9b8482815181106132645761326461598a565b613ca59084615b63565b925081613cb1816159b6565b9250505b80613cbf816159b6565b915050613c05565b506040518060600160405280856004811115613ce557613ce56155a4565b815260200182815260200160008311613cff576000613d09565b613d098385615c02565b815250878681518110613d1e57613d1e61598a565b6020026020010181905250505050508080613d38906159b6565b915050613b2d565b5050919050565b613d4f61415e565b6001600160a01b038116613d7957604051631e4fbdf760e01b815260006004820152602401610b62565b612e818161487e565b600080613d8e8361418b565b6001600160a01b031603613db45760405162461bcd60e51b8152600401610b6290615bab565b6000828152600b6020526040808220815160c081019092528054829060ff166004811115613de457613de46155a4565b6004811115613df557613df56155a4565b81526001820154602082015260028201546040820152600382015460608201526004808301546001600160a01b0316608083015260059092015460a0909101528151919250600091600a91839190811115613e5257613e526155a4565b6004811115613e6357613e636155a4565b81526020019081526020016000206040518060a0016040529081600082018054613e8c90615950565b80601f0160208091040260200160405190810160405280929190818152602001828054613eb890615950565b8015613f055780601f10613eda57610100808354040283529160200191613f05565b820191906000526020600020905b815481529060010190602001808311613ee857829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000826060015142613f4a9190615b76565b9050600062278d008360400151613f619190615b4c565b905061261a8183615c02565b600080600a6000846004811115613f8657613f866155a4565b6004811115613f9757613f976155a4565b81526020019081526020016000206040518060a0016040529081600082018054613fc090615950565b80601f0160208091040260200160405190810160405280929190818152602001828054613fec90615950565b80156140395780601f1061400e57610100808354040283529160200191614039565b820191906000526020600020905b81548152906001019060200180831161401c57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000600160095461407d9190615b76565b90506000620186a0836080015183856020015161409a9190615b4c565b6140a49190615b4c565b6140ae9190615c02565b90508083602001516140c09190615b63565b95945050505050565b60006001600160e01b031982166380ac58cd60e01b14806140fa57506001600160e01b03198216635b5e139f60e01b145b80610a4957506301ffc9a760e01b6001600160e01b0319831614610a49565b6000806141258361418b565b90506001600160a01b038116610a4957604051637e27328960e01b815260048101849052602401610b62565b6117548383836001614b77565b6007546001600160a01b031633146115bc5760405163118cdaa760e01b8152336004820152602401610b62565b6000908152600260205260409020546001600160a01b031690565b6000806141b28461418b565b90506001600160a01b038116158015906141d457506001600160a01b03851615155b80156141f25750846001600160a01b0316816001600160a01b031614155b156142a5576001600160a01b0381166000908152600c6020526040812080549161421b83615c60565b90915550506001600160a01b0385166000908152600c60205260408120805491614244836159b6565b90915550506000848152600b6020908152604080832060040180546001600160a01b0319166001600160a01b038a16179055600e90915290205460ff16156142a5576000848152600b602052604090205460ff166142a38583836142da565b505b6140c0858585614c7d565b6002600854036142d357604051633ee5aeb560e01b815260040160405180910390fd5b6002600855565b6000838152600e60209081526040808320805460ff19908116909155600f9092528220600301805490911690555b6013548110156143be5783601382815481106143265761432661598a565b9060005260206000200154036143ac576013805461434690600190615b76565b815481106143565761435661598a565b9060005260206000200154601382815481106143745761437461598a565b600091825260209091200155601380548061439157614391615c77565b600190038181906000526020600020016000905590556143be565b806143b6816159b6565b915050614308565b506001600160a01b0382166000908152601060205260408120818360048111156143ea576143ea6155a4565b60048111156143fb576143fb6155a4565b8152602001908152602001600020905060005b81548110156144c2578482828154811061442a5761442a61598a565b9060005260206000200154036144b0578154829061444a90600190615b76565b8154811061445a5761445a61598a565b90600052602060002001548282815481106144775761447761598a565b90600052602060002001819055508180548061449557614495615c77565b600190038181906000526020600020016000905590556144c2565b806144ba816159b6565b91505061440e565b506001600160a01b0383166000908152601060205260408120908360048111156144ee576144ee6155a4565b60048111156144ff576144ff6155a4565b815260200190815260200160002080549050600003614673576001600160a01b0383166000908152601160205260408120905b81548110156146705783600481111561454d5761454d6155a4565b82828154811061455f5761455f61598a565b90600052602060002090602091828204019190069054906101000a900460ff166004811115614590576145906155a4565b0361465e57815482906145a590600190615b76565b815481106145b5576145b561598a565b90600052602060002090602091828204019190069054906101000a900460ff168282815481106145e7576145e761598a565b90600052602060002090602091828204019190066101000a81548160ff0219169083600481111561461a5761461a6155a4565b02179055508180548061462f5761462f615c77565b60019003818190600052602060002090602091828204019190066101000a81549060ff02191690559055614670565b80614668816159b6565b915050614532565b50505b6001600160a01b03831660009081526011602090815260408083208054825181850281018501909352808352849383018282801561470057602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156146de576146de6155a4565b8152602060019283018181049485019490930390920291018084116146bf5790505b5050505050905060005b815181101561479d576001600160a01b0386166000908152601060205260408120835182908590859081106147415761474161598a565b6020026020010151600481111561475a5761475a6155a4565b600481111561476b5761476b6155a4565b8152602081019190915260400160002054111561478b576001925061479d565b80614795816159b6565b91505061470a565b50506001600160a01b03939093166000908152601260205260409020805460ff191693151593909317909255505050565b6001600160a01b0382166147f857604051633250574960e11b815260006004820152602401610b62565b6000614806838360006141a6565b90506001600160a01b03811661483257604051637e27328960e01b815260048101839052602401610b62565b836001600160a01b0316816001600160a01b031614610f92576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610b62565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03821661490257604051630b61174360e31b81526001600160a01b0383166004820152602401610b62565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610b15828260405180602001604052806000815250614d71565b60008281526006602052604090206149a18282615a1d565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6001600160a01b0383163b15610f9257604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290614a1b903390889087908790600401615c8d565b6020604051808303816000875af1925050508015614a56575060408051601f3d908101601f19168201909252614a5391810190615cc0565b60015b614abf573d808015614a84576040519150601f19603f3d011682016040523d82523d6000602084013e614a89565b606091505b508051600003614ab757604051633250574960e11b81526001600160a01b0385166004820152602401610b62565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14614afb57604051633250574960e11b81526001600160a01b0385166004820152602401610b62565b5050505050565b6060614b0d82614119565b506000614b2560408051602081019091526000815290565b90506000815111614b455760405180602001604052806000815250614b70565b80614b4f84614d88565b604051602001614b60929190615c31565b6040516020818303038152906040525b9392505050565b8080614b8b57506001600160a01b03821615155b15614c4d576000614b9b84614119565b90506001600160a01b03831615801590614bc75750826001600160a01b0316816001600160a01b031614155b8015614bda5750614bd881846139b1565b155b15614c035760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610b62565b8115614c4b5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b600080614c898461418b565b90506001600160a01b03831615614ca557614ca5818486614e1a565b6001600160a01b03811615614ce357614cc2600085600080614b77565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615614d12576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b614d7b8383614e7e565b61175460008484846149d9565b60606000614d9583614ee3565b60010190506000816001600160401b03811115614db457614db4615365565b6040519080825280601f01601f191660200182016040528015614dde576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084614de857509392505050565b614e25838383614fbb565b611754576001600160a01b038316614e5357604051637e27328960e01b815260048101829052602401610b62565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610b62565b6001600160a01b038216614ea857604051633250574960e11b815260006004820152602401610b62565b6000614eb6838360006141a6565b90506001600160a01b03811615611754576040516339e3563760e11b815260006004820152602401610b62565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614f225772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614f4e576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614f6c57662386f26fc10000830492506010015b6305f5e1008310614f84576305f5e100830492506008015b6127108310614f9857612710830492506004015b60648310614faa576064830492506002015b600a8310610a495760010192915050565b60006001600160a01b038316158015906135d75750826001600160a01b0316846001600160a01b03161480614ff55750614ff584846139b1565b806135d75750506000908152600460205260409020546001600160a01b03908116911614919050565b6001600160e01b031981168114612e8157600080fd5b60006020828403121561504657600080fd5b8135614b708161501e565b60005b8381101561506c578181015183820152602001615054565b50506000910152565b6000815180845261508d816020860160208601615051565b601f01601f19169290920160200192915050565b602081526000614b706020830184615075565b6000602082840312156150c657600080fd5b5035919050565b80356001600160a01b03811681146150e457600080fd5b919050565b600080604083850312156150fc57600080fd5b615105836150cd565b946020939093013593505050565b60006020828403121561512557600080fd5b614b70826150cd565b600081518084526020808501945080840160005b8381101561515e57815187529582019590820190600101615142565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b848110156151b457601f198684030189526151a2838351615075565b98840198925090830190600101615186565b5090979650505050505050565b60c0815260006151d460c083018961512e565b82810360208401526151e68189615169565b905082810360408401526151fa818861512e565b9050828103606084015261520e818761512e565b90508281036080840152615222818661512e565b905082810360a0840152615236818561512e565b9998505050505050505050565b60008060006060848603121561525857600080fd5b615261846150cd565b925061526f602085016150cd565b9150604084013590509250925092565b8035600581106150e457600080fd5b600080604083850312156152a157600080fd5b6152aa836150cd565b91506152b86020840161527f565b90509250929050565b6060815260006152d4606083018661512e565b82810360208401526152e6818661512e565b9050828103604084015261261a818561512e565b60006020828403121561530c57600080fd5b614b708261527f565b602081526000825160a0602084015261533160c0840182615075565b9050602084015160408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561539557615395615365565b604051601f8501601f19908116603f011681019082821181831017156153bd576153bd615365565b816040528093508581528686860111156153d657600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261540157600080fd5b614b708383356020850161537b565b60008060008060008060c0878903121561542957600080fd5b6154328761527f565b955060208701356001600160401b0381111561544d57600080fd5b61545989828a016153f0565b96999698505050506040850135946060810135946080820135945060a09091013592509050565b6000806020838503121561549357600080fd5b82356001600160401b03808211156154aa57600080fd5b818501915085601f8301126154be57600080fd5b8135818111156154cd57600080fd5b8660208260051b85010111156154e257600080fd5b60209290920196919550909350505050565b60008060006060848603121561550957600080fd5b615512846150cd565b925061526f6020850161527f565b60a08152600061553360a0830188615075565b90508560208301528460408301528360608301528260808301529695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156155985783516001600160a01b031683529284019291840191600101615573565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b600581106155d857634e487b7160e01b600052602160045260246000fd5b9052565b60c081016155ea82896155ba565b6020820196909652604081019490945260608401929092526001600160a01b0316608083015260a090910152919050565b6000806040838503121561562e57600080fd5b615637836150cd565b91506020830135801515811461564c57600080fd5b809150509250929050565b6000806040838503121561566a57600080fd5b6156738361527f565b915060208301356001600160401b0381111561568e57600080fd5b61569a858286016153f0565b9150509250929050565b600080600080608085870312156156ba57600080fd5b6156c3856150cd565b93506156d1602086016150cd565b92506040850135915060608501356001600160401b038111156156f357600080fd5b8501601f8101871361570457600080fd5b6157138782356020840161537b565b91505092959194509250565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b848110156157e557898403603f19018652825180516001600160a01b031685528881015160a0908187019061577e8c8901826155ba565b50828a0151878b015260608084015190880152608092830151928701919091528151908190529089019060c086019084905b808210156157d05783518352928b0192918b0191600191909101906157b0565b50509689019694505091870191600101615747565b50919998505050505050505050565b60e08082528851908201819052600090602090610100840190828c01845b8281101561583157815160ff1684529284019290840190600101615812565b50505083810382850152615845818b615169565b915050828103604084015261585a818961512e565b9050828103606084015261586e818861512e565b90508281036080840152615882818761512e565b905082810360a0840152615896818661512e565b905082810360c08401526158aa818561512e565b9a9950505050505050505050565b600080604083850312156158cb57600080fd5b6158d4836150cd565b91506152b8602084016150cd565b60208101610a4982846155ba565b602080825282518282018190526000919060409081850190868401855b828110156159435781516159228582516155ba565b8087015185880152850151858501526060909301929085019060010161590d565b5091979650505050505050565b600181811c9082168061596457607f821691505b60208210810361598457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016159c8576159c86159a0565b5060010190565b601f82111561175457600081815260208120601f850160051c810160208610156159f65750805b601f850160051c820191505b81811015615a1557828155600101615a02565b505050505050565b81516001600160401b03811115615a3657615a36615365565b615a4a81615a448454615950565b846159cf565b602080601f831160018114615a7f5760008415615a675750858301515b600019600386901b1c1916600185901b178555615a15565b600085815260208120601f198616915b82811015615aae57888601518255948401946001909101908401615a8f565b5085821015615acc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6020808252601a908201527f4e6f7420746865206f776e6572206f6620746869732074726565000000000000604082015260600190565b6020808252810182905260006001600160fb1b03831115615b3357600080fd5b8260051b80856040850137919091016040019392505050565b8082028115828204841417610a4957610a496159a0565b80820180821115610a4957610a496159a0565b81810381811115610a4957610a496159a0565b604081526000615b9c604083018561512e565b90508260208301529392505050565b602080825260139082015272151c995948191bd95cc81b9bdd08195e1a5cdd606a1b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b600082615bfd57615bfd615bd8565b500690565b600082615c1157615c11615bd8565b500490565b60408101615c2482856155ba565b8260208301529392505050565b60008351615c43818460208801615051565b835190830190615c57818360208801615051565b01949350505050565b600081615c6f57615c6f6159a0565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061261a90830184615075565b600060208284031215615cd257600080fd5b8151614b708161501e56fea2646970667358221220311d50655eb67538329470baa0f92fc86f384d080ad075dde016ba33a947c68e64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 349,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 351,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 355,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 359,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 363,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 369,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1488,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1655,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3177,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3253,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "treeTypeInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_enum(TreeType)3192,t_struct(TreeInfo)3203_storage)"
      },
      {
        "astId": 3258,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "trees",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Tree)3217_storage)"
      },
      {
        "astId": 3262,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "ownerTreeCount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3266,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "profitBalances",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3270,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "isListed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3275,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "listings",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Listing)3226_storage)"
      },
      {
        "astId": 3283,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "sellerTreesByType",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_enum(TreeType)3192,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 3289,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "sellerActiveTreeTypes",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_array(t_enum(TreeType)3192)dyn_storage)"
      },
      {
        "astId": 3293,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "hasActiveListings",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3296,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "activeListings",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(TreeType)3192)dyn_storage": {
        "base": "t_enum(TreeType)3192",
        "encoding": "dynamic_array",
        "label": "enum FruitTreeNFT.TreeType[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(TreeType)3192": {
        "encoding": "inplace",
        "label": "enum FruitTreeNFT.TreeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_enum(TreeType)3192)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum FruitTreeNFT.TreeType[])",
        "numberOfBytes": "32",
        "value": "t_array(t_enum(TreeType)3192)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_enum(TreeType)3192,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum FruitTreeNFT.TreeType => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TreeType)3192,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(TreeType)3192,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TreeType)3192",
        "label": "mapping(enum FruitTreeNFT.TreeType => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(TreeType)3192,t_struct(TreeInfo)3203_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TreeType)3192",
        "label": "mapping(enum FruitTreeNFT.TreeType => struct FruitTreeNFT.TreeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TreeInfo)3203_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)3226_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FruitTreeNFT.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3226_storage"
      },
      "t_mapping(t_uint256,t_struct(Tree)3217_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FruitTreeNFT.Tree)",
        "numberOfBytes": "32",
        "value": "t_struct(Tree)3217_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Listing)3226_storage": {
        "encoding": "inplace",
        "label": "struct FruitTreeNFT.Listing",
        "members": [
          {
            "astId": 3219,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3221,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3223,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "listingTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3225,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "isActive",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Tree)3217_storage": {
        "encoding": "inplace",
        "label": "struct FruitTreeNFT.Tree",
        "members": [
          {
            "astId": 3206,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "treeType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TreeType)3192"
          },
          {
            "astId": 3208,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "mintTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3210,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "initialPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3212,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "lastHarvestTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3214,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 3216,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "totalHarvests",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(TreeInfo)3203_storage": {
        "encoding": "inplace",
        "label": "struct FruitTreeNFT.TreeInfo",
        "members": [
          {
            "astId": 3194,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3196,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "basePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3198,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "harvestCycleMonths",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3200,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "profitRatePerCycle",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3202,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "yearlyAppreciation",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}