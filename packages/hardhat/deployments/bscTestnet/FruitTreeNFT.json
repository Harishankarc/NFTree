{
  "address": "0x01E0A6bB384C65DF84746fA6D95F3e5f774Fe8d1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "ListingsCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TreeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "TreesListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrice",
          "type": "uint256"
        }
      ],
      "name": "TreesSold",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeListings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "buyTreesFromSeller",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "cancelListings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundContract",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSellersWithListings",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "sellers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTreeTypes",
      "outputs": [
        {
          "internalType": "uint8[]",
          "name": "treeTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "basePrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "currentPrices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "baseAppreciations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "produceAppreciations",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        }
      ],
      "name": "getCurrentTreePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketplaceGroupedData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "enum FruitTreeNFT.TreeType",
              "name": "treeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct FruitTreeNFT.MarketplaceGroup[]",
          "name": "groups",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerTreesByType",
      "outputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType[]",
          "name": "treeTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "tokenIdsByType",
          "type": "uint256[][]"
        },
        {
          "internalType": "uint256[][]",
          "name": "valuesByType",
          "type": "uint256[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        }
      ],
      "name": "getSellerListingsSummary",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum FruitTreeNFT.TreeType",
              "name": "treeType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averagePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct FruitTreeNFT.SellerSummary[]",
          "name": "summary",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        }
      ],
      "name": "getSellerTreesByType",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "listingTimes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTreeDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "treeName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "currentValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mintTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "treeOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getTreeDetailsByOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "treeNames",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "currentValues",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "mintTimes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        }
      ],
      "name": "getTreeTypeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "basePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseAppreciation",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "produceAppreciation",
              "type": "uint256"
            }
          ],
          "internalType": "struct FruitTreeNFT.TreeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTreeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasActiveListings",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "listTreesForSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "listings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "listingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintTree",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownerTreeCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerActiveTreeTypes",
      "outputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sellerTreesByType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "treeTypeInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "basePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseAppreciation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "produceAppreciation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trees",
      "outputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "treeType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "mintTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum FruitTreeNFT.TreeType",
          "name": "_treeType",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_basePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseAppreciation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_produceAppreciation",
          "type": "uint256"
        }
      ],
      "name": "updateTreeTypeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawContractFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3e06d9b16ace1a74231e1b7d77ce08e174c87269984ed8b710e2056e8cd63280",
  "receipt": {
    "to": null,
    "from": "0x458664b5C78f8190F0863FD72d3C1cD3f3eD862d",
    "contractAddress": "0x01E0A6bB384C65DF84746fA6D95F3e5f774Fe8d1",
    "transactionIndex": 0,
    "gasUsed": "5564612",
    "logsBloom": "0x
    "blockHash": "0xa30289f4106c49b029ca84183d7bc0172a138aecd324164fe182eb9e8096786b",
    "transactionHash": "0x3e06d9b16ace1a74231e1b7d77ce08e174c87269984ed8b710e2056e8cd63280",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 58892602,
        "transactionHash": "0x3e06d9b16ace1a74231e1b7d77ce08e174c87269984ed8b710e2056e8cd63280",
        "address": "0x01E0A6bB384C65DF84746fA6D95F3e5f774Fe8d1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000458664b5c78f8190f0863fd72d3c1cd3f3ed862d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa30289f4106c49b029ca84183d7bc0172a138aecd324164fe182eb9e8096786b"
      }
    ],
    "blockNumber": 58892602,
    "cumulativeGasUsed": "5564612",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e3d38ce10c4b7f141d1b183c63fa485a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListingsCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TreeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"TreesListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrice\",\"type\":\"uint256\"}],\"name\":\"TreesSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"buyTreesFromSeller\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"cancelListings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSellersWithListings\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"sellers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTreeTypes\",\"outputs\":[{\"internalType\":\"uint8[]\",\"name\":\"treeTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"basePrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentPrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"baseAppreciations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"produceAppreciations\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"}],\"name\":\"getCurrentTreePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketplaceGroupedData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct FruitTreeNFT.MarketplaceGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerTreesByType\",\"outputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType[]\",\"name\":\"treeTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIdsByType\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"valuesByType\",\"type\":\"uint256[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"getSellerListingsSummary\",\"outputs\":[{\"components\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FruitTreeNFT.SellerSummary[]\",\"name\":\"summary\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"}],\"name\":\"getSellerTreesByType\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"listingTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTreeDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"treeName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"currentValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"treeOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTreeDetailsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"treeNames\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentValues\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"mintTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"}],\"name\":\"getTreeTypeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAppreciation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"produceAppreciation\",\"type\":\"uint256\"}],\"internalType\":\"struct FruitTreeNFT.TreeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTreeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasActiveListings\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"listTreesForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"listings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"listingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintTree\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerTreeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerActiveTreeTypes\",\"outputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sellerTreesByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"treeTypeInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseAppreciation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"produceAppreciation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trees\",\"outputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"treeType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"mintTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum FruitTreeNFT.TreeType\",\"name\":\"_treeType\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_basePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseAppreciation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_produceAppreciation\",\"type\":\"uint256\"}],\"name\":\"updateTreeTypeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawContractFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TreeNFT.sol\":\"FruitTreeNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0xb31b86c03f4677dcffa4655285d62433509513be9bafa0e04984565052d34e44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xcc6f49e0c57072d6a18eef0d5fc22a4cc20462c18f0c365d2dd9a2c732fde670\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/TreeNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.18;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract FruitTreeNFT is ERC721URIStorage, Ownable, ReentrancyGuard {\\r\\n    uint256 public nextTokenId = 1;\\r\\n\\r\\n    enum TreeType {\\r\\n        MANGO,\\r\\n        COCONUT,\\r\\n        GUAVA,\\r\\n        RAMBUTAN,\\r\\n        JACKFRUIT\\r\\n    }\\r\\n\\r\\n    struct TreeInfo {\\r\\n        string name;\\r\\n        uint256 basePrice; // Base price in wei\\r\\n        uint256 baseAppreciation; // Base yearly appreciation (e.g., 5%)\\r\\n        uint256 produceAppreciation; // Additional appreciation from produce (e.g., 2-4%)\\r\\n    }\\r\\n\\r\\n    struct Tree {\\r\\n        TreeType treeType;\\r\\n        uint256 mintTime;\\r\\n        uint256 initialPrice;\\r\\n        address owner;\\r\\n    }\\r\\n\\r\\n    struct Listing {\\r\\n        uint256 tokenId;\\r\\n        address seller;\\r\\n        uint256 listingTime;\\r\\n        uint256 price;\\r\\n        bool isActive;\\r\\n    }\\r\\n\\r\\n    struct MarketplaceGroup {\\r\\n        address seller;\\r\\n        TreeType treeType;\\r\\n        uint256 quantity;\\r\\n        uint256 averagePrice;\\r\\n        uint256[] tokenIds;\\r\\n    }\\r\\n\\r\\n    struct SellerSummary {\\r\\n        TreeType treeType;\\r\\n        uint256 quantity;\\r\\n        uint256 averagePrice;\\r\\n    }\\r\\n\\r\\n    // Tree type configurations\\r\\n    mapping(TreeType => TreeInfo) public treeTypeInfo;\\r\\n\\r\\n    // Token ID to Tree mapping\\r\\n    mapping(uint256 => Tree) public trees;\\r\\n\\r\\n    // Owner to tree count mapping\\r\\n    mapping(address => uint256) public ownerTreeCount;\\r\\n\\r\\n    // Marketplace mappings\\r\\n    mapping(uint256 => bool) public isListed;\\r\\n    mapping(uint256 => Listing) public listings;\\r\\n    mapping(address => mapping(TreeType => uint256[])) public sellerTreesByType;\\r\\n    mapping(address => TreeType[]) public sellerActiveTreeTypes;\\r\\n    mapping(address => bool) public hasActiveListings;\\r\\n    uint256[] public activeListings;\\r\\n\\r\\n    // Events\\r\\n    event TreeMinted(uint256 indexed tokenId, address indexed owner, TreeType treeType, uint256 price);\\r\\n    event TreesListed(uint256[] tokenIds, address indexed seller);\\r\\n    event TreesSold(uint256[] tokenIds, address indexed seller, address indexed buyer, uint256 totalPrice);\\r\\n    event ListingsCancelled(uint256[] tokenIds, address indexed seller);\\r\\n\\r\\n    constructor() ERC721(\\\"FruitTreeNFT\\\", \\\"FTREE\\\") Ownable(msg.sender) {\\r\\n        // Initialize tree type information with new appreciation model\\r\\n        treeTypeInfo[TreeType.MANGO] = TreeInfo({\\r\\n            name: \\\"Mango Tree\\\",\\r\\n            basePrice: 0.05 ether,\\r\\n            baseAppreciation: 5, // 5% yearly base appreciation\\r\\n            produceAppreciation: 3 // 3% yearly produce appreciation\\r\\n        });\\r\\n\\r\\n        treeTypeInfo[TreeType.COCONUT] = TreeInfo({\\r\\n            name: \\\"Coconut Tree\\\",\\r\\n            basePrice: 0.08 ether,\\r\\n            baseAppreciation: 5, // 5% yearly base appreciation\\r\\n            produceAppreciation: 2 // 2% yearly produce appreciation\\r\\n        });\\r\\n\\r\\n        treeTypeInfo[TreeType.GUAVA] = TreeInfo({\\r\\n            name: \\\"Guava Tree\\\",\\r\\n            basePrice: 0.003 ether,\\r\\n            baseAppreciation: 5, // 5% yearly base appreciation\\r\\n            produceAppreciation: 4 // 4% yearly produce appreciation\\r\\n        });\\r\\n\\r\\n        treeTypeInfo[TreeType.RAMBUTAN] = TreeInfo({\\r\\n            name: \\\"Rambutan Tree\\\",\\r\\n            basePrice: 0.04 ether,\\r\\n            baseAppreciation: 5, // 5% yearly base appreciation\\r\\n            produceAppreciation: 3 // 3% yearly produce appreciation\\r\\n        });\\r\\n\\r\\n        treeTypeInfo[TreeType.JACKFRUIT] = TreeInfo({\\r\\n            name: \\\"Jackfruit Tree\\\",\\r\\n            basePrice: 0.06 ether,\\r\\n            baseAppreciation: 5, // 5% yearly base appreciation\\r\\n            produceAppreciation: 2 // 2% yearly produce appreciation\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function mintTree(TreeType _treeType, string memory tokenURI) external payable nonReentrant {\\r\\n        TreeInfo memory treeInfo = treeTypeInfo[_treeType];\\r\\n        uint256 currentPrice = getCurrentTreePrice(_treeType);\\r\\n\\r\\n        require(msg.value >= currentPrice, \\\"Insufficient payment\\\");\\r\\n\\r\\n        uint256 tokenId = nextTokenId++;\\r\\n        _safeMint(msg.sender, tokenId);\\r\\n        _setTokenURI(tokenId, tokenURI);\\r\\n\\r\\n        trees[tokenId] = Tree({\\r\\n            treeType: _treeType,\\r\\n            mintTime: block.timestamp,\\r\\n            initialPrice: msg.value,\\r\\n            owner: msg.sender\\r\\n        });\\r\\n\\r\\n        ownerTreeCount[msg.sender]++;\\r\\n\\r\\n        emit TreeMinted(tokenId, msg.sender, _treeType, msg.value);\\r\\n\\r\\n        // Refund excess payment\\r\\n        if (msg.value > currentPrice) {\\r\\n            payable(msg.sender).transfer(msg.value - currentPrice);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getCurrentTreePrice(TreeType _treeType) public view returns (uint256) {\\r\\n        TreeInfo memory treeInfo = treeTypeInfo[_treeType];\\r\\n        // Price increases based on total supply and appreciation rate\\r\\n        uint256 totalSupply = nextTokenId - 1;\\r\\n        uint256 totalAppreciation = treeInfo.baseAppreciation + treeInfo.produceAppreciation;\\r\\n        uint256 priceIncrease = (treeInfo.basePrice * totalSupply * totalAppreciation) / (100 * 1000);\\r\\n        return treeInfo.basePrice + priceIncrease;\\r\\n    }\\r\\n\\r\\n    function getTreeValue(uint256 tokenId) public view returns (uint256) {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"Tree does not exist\\\");\\r\\n\\r\\n        Tree memory tree = trees[tokenId];\\r\\n        TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n        // Calculate years elapsed (using 365 days per year)\\r\\n        uint256 yearsElapsed = (block.timestamp - tree.mintTime) / (365 * 24 * 60 * 60);\\r\\n\\r\\n        // Calculate total appreciation (base + produce)\\r\\n        uint256 totalAppreciation = treeInfo.baseAppreciation + treeInfo.produceAppreciation;\\r\\n\\r\\n        // Apply compound appreciation: price * (1 + rate)^years\\r\\n        // Simplified to: price * (100 + rate * years) / 100\\r\\n        uint256 appreciationFactor = 100 + totalAppreciation * yearsElapsed;\\r\\n\\r\\n        return (tree.initialPrice * appreciationFactor) / 100;\\r\\n    }\\r\\n\\r\\n    // MARKETPLACE FUNCTIONS\\r\\n\\r\\n    function listTreesForSale(uint256[] calldata tokenIds) external nonReentrant {\\r\\n        require(tokenIds.length > 0, \\\"No tokens provided\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this tree\\\");\\r\\n            require(!isListed[tokenId], \\\"Tree already listed\\\");\\r\\n\\r\\n            uint256 currentPrice = getTreeValue(tokenId);\\r\\n\\r\\n            // Add to listings\\r\\n            listings[tokenId] = Listing({\\r\\n                tokenId: tokenId,\\r\\n                seller: msg.sender,\\r\\n                listingTime: block.timestamp,\\r\\n                price: currentPrice,\\r\\n                isActive: true\\r\\n            });\\r\\n\\r\\n            isListed[tokenId] = true;\\r\\n            activeListings.push(tokenId);\\r\\n\\r\\n            // Add to seller's tree type mapping\\r\\n            TreeType treeType = trees[tokenId].treeType;\\r\\n            sellerTreesByType[msg.sender][treeType].push(tokenId);\\r\\n\\r\\n            // Add tree type to seller's active types if not already present\\r\\n            if (sellerTreesByType[msg.sender][treeType].length == 1) {\\r\\n                sellerActiveTreeTypes[msg.sender].push(treeType);\\r\\n            }\\r\\n\\r\\n            hasActiveListings[msg.sender] = true;\\r\\n        }\\r\\n\\r\\n        emit TreesListed(tokenIds, msg.sender);\\r\\n    }\\r\\n\\r\\n    function buyTreesFromSeller(address seller, TreeType treeType, uint256 quantity) external payable nonReentrant {\\r\\n        require(quantity > 0, \\\"Quantity must be greater than 0\\\");\\r\\n        require(hasActiveListings[seller], \\\"Seller has no active listings\\\");\\r\\n\\r\\n        uint256[] memory availableTokens = sellerTreesByType[seller][treeType];\\r\\n        require(availableTokens.length >= quantity, \\\"Not enough trees available from this seller\\\");\\r\\n\\r\\n        // Select the required quantity of tokens\\r\\n        uint256[] memory selectedTokens = new uint256[](quantity);\\r\\n        uint256 totalCost = 0;\\r\\n        uint256 selectedCount = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < availableTokens.length && selectedCount < quantity; i++) {\\r\\n            uint256 tokenId = availableTokens[i];\\r\\n            if (isListed[tokenId] && listings[tokenId].isActive) {\\r\\n                selectedTokens[selectedCount] = tokenId;\\r\\n                totalCost += listings[tokenId].price; // Use stored listing price\\r\\n                selectedCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        require(selectedCount == quantity, \\\"Not enough active listings available\\\");\\r\\n        require(msg.value >= totalCost, \\\"Insufficient payment\\\");\\r\\n\\r\\n        // Process the purchases\\r\\n        for (uint256 i = 0; i < quantity; i++) {\\r\\n            uint256 tokenId = selectedTokens[i];\\r\\n            _removeListing(tokenId, seller, treeType);\\r\\n            _transfer(seller, msg.sender, tokenId);\\r\\n        }\\r\\n\\r\\n        // Transfer payment to seller\\r\\n        payable(seller).transfer(totalCost);\\r\\n\\r\\n        // Refund excess payment\\r\\n        if (msg.value > totalCost) {\\r\\n            payable(msg.sender).transfer(msg.value - totalCost);\\r\\n        }\\r\\n\\r\\n        emit TreesSold(selectedTokens, seller, msg.sender, totalCost);\\r\\n    }\\r\\n\\r\\n    function cancelListings(uint256[] calldata tokenIds) external nonReentrant {\\r\\n        require(tokenIds.length > 0, \\\"No tokens provided\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\r\\n            uint256 tokenId = tokenIds[i];\\r\\n            require(ownerOf(tokenId) == msg.sender, \\\"Not the owner of this tree\\\");\\r\\n            require(isListed[tokenId], \\\"Tree not listed\\\");\\r\\n\\r\\n            TreeType treeType = trees[tokenId].treeType;\\r\\n            _removeListing(tokenId, msg.sender, treeType);\\r\\n        }\\r\\n\\r\\n        emit ListingsCancelled(tokenIds, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _removeListing(uint256 tokenId, address seller, TreeType treeType) private {\\r\\n        // Remove from general listings\\r\\n        isListed[tokenId] = false;\\r\\n        listings[tokenId].isActive = false;\\r\\n\\r\\n        // Remove from active listings array\\r\\n        for (uint256 i = 0; i < activeListings.length; i++) {\\r\\n            if (activeListings[i] == tokenId) {\\r\\n                activeListings[i] = activeListings[activeListings.length - 1];\\r\\n                activeListings.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove from seller's tree type array\\r\\n        uint256[] storage sellerTrees = sellerTreesByType[seller][treeType];\\r\\n        for (uint256 i = 0; i < sellerTrees.length; i++) {\\r\\n            if (sellerTrees[i] == tokenId) {\\r\\n                sellerTrees[i] = sellerTrees[sellerTrees.length - 1];\\r\\n                sellerTrees.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // If seller has no more trees of this type, remove from active tree types\\r\\n        if (sellerTreesByType[seller][treeType].length == 0) {\\r\\n            TreeType[] storage activeTypes = sellerActiveTreeTypes[seller];\\r\\n            for (uint256 i = 0; i < activeTypes.length; i++) {\\r\\n                if (activeTypes[i] == treeType) {\\r\\n                    activeTypes[i] = activeTypes[activeTypes.length - 1];\\r\\n                    activeTypes.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Check if seller has any active listings left\\r\\n        bool hasListings = false;\\r\\n        TreeType[] memory activeTypes = sellerActiveTreeTypes[seller];\\r\\n        for (uint256 i = 0; i < activeTypes.length; i++) {\\r\\n            if (sellerTreesByType[seller][activeTypes[i]].length > 0) {\\r\\n                hasListings = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        hasActiveListings[seller] = hasListings;\\r\\n    }\\r\\n\\r\\n    // MARKETPLACE QUERY FUNCTIONS\\r\\n\\r\\n    function getMarketplaceGroupedData() external view returns (MarketplaceGroup[] memory groups) {\\r\\n        // Get all sellers with active listings\\r\\n        address[] memory sellers = getAllSellersWithListings();\\r\\n\\r\\n        // Count total groups needed\\r\\n        uint256 totalGroups = 0;\\r\\n        for (uint256 i = 0; i < sellers.length; i++) {\\r\\n            totalGroups += sellerActiveTreeTypes[sellers[i]].length;\\r\\n        }\\r\\n\\r\\n        groups = new MarketplaceGroup[](totalGroups);\\r\\n        uint256 groupIndex = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < sellers.length; i++) {\\r\\n            address seller = sellers[i];\\r\\n            TreeType[] memory activeTypes = sellerActiveTreeTypes[seller];\\r\\n\\r\\n            for (uint256 j = 0; j < activeTypes.length; j++) {\\r\\n                TreeType treeType = activeTypes[j];\\r\\n                uint256[] memory tokenIds = sellerTreesByType[seller][treeType];\\r\\n\\r\\n                if (tokenIds.length > 0) {\\r\\n                    uint256 totalValue = 0;\\r\\n                    uint256 activeCount = 0;\\r\\n                    uint256[] memory activeTokenIds = new uint256[](tokenIds.length);\\r\\n\\r\\n                    for (uint256 k = 0; k < tokenIds.length; k++) {\\r\\n                        if (isListed[tokenIds[k]] && listings[tokenIds[k]].isActive) {\\r\\n                            activeTokenIds[activeCount] = tokenIds[k];\\r\\n                            totalValue += listings[tokenIds[k]].price;\\r\\n                            activeCount++;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (activeCount > 0) {\\r\\n                        // Resize array to actual active count\\r\\n                        uint256[] memory finalTokenIds = new uint256[](activeCount);\\r\\n                        for (uint256 l = 0; l < activeCount; l++) {\\r\\n                            finalTokenIds[l] = activeTokenIds[l];\\r\\n                        }\\r\\n\\r\\n                        groups[groupIndex] = MarketplaceGroup({\\r\\n                            seller: seller,\\r\\n                            treeType: treeType,\\r\\n                            quantity: activeCount,\\r\\n                            averagePrice: totalValue / activeCount,\\r\\n                            tokenIds: finalTokenIds\\r\\n                        });\\r\\n                        groupIndex++;\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Resize groups array to actual count\\r\\n        MarketplaceGroup[] memory finalGroups = new MarketplaceGroup[](groupIndex);\\r\\n        for (uint256 i = 0; i < groupIndex; i++) {\\r\\n            finalGroups[i] = groups[i];\\r\\n        }\\r\\n\\r\\n        return finalGroups;\\r\\n    }\\r\\n\\r\\n    function getAllSellersWithListings() public view returns (address[] memory sellers) {\\r\\n        uint256 sellerCount = 0;\\r\\n        address[] memory tempSellers = new address[](activeListings.length);\\r\\n\\r\\n        for (uint256 i = 0; i < activeListings.length; i++) {\\r\\n            address seller = listings[activeListings[i]].seller;\\r\\n            bool found = false;\\r\\n\\r\\n            for (uint256 j = 0; j < sellerCount; j++) {\\r\\n                if (tempSellers[j] == seller) {\\r\\n                    found = true;\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!found) {\\r\\n                tempSellers[sellerCount] = seller;\\r\\n                sellerCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        sellers = new address[](sellerCount);\\r\\n        for (uint256 i = 0; i < sellerCount; i++) {\\r\\n            sellers[i] = tempSellers[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getSellerTreesByType(\\r\\n        address seller,\\r\\n        TreeType treeType\\r\\n    ) external view returns (uint256[] memory tokenIds, uint256[] memory prices, uint256[] memory listingTimes) {\\r\\n        uint256[] memory allTokens = sellerTreesByType[seller][treeType];\\r\\n        uint256 activeCount = 0;\\r\\n\\r\\n        // Count active listings\\r\\n        for (uint256 i = 0; i < allTokens.length; i++) {\\r\\n            if (isListed[allTokens[i]] && listings[allTokens[i]].isActive) {\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        tokenIds = new uint256[](activeCount);\\r\\n        prices = new uint256[](activeCount);\\r\\n        listingTimes = new uint256[](activeCount);\\r\\n\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < allTokens.length; i++) {\\r\\n            uint256 tokenId = allTokens[i];\\r\\n            if (isListed[tokenId] && listings[tokenId].isActive) {\\r\\n                tokenIds[index] = tokenId;\\r\\n                prices[index] = listings[tokenId].price;\\r\\n                listingTimes[index] = listings[tokenId].listingTime;\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getSellerListingsSummary(address seller) external view returns (SellerSummary[] memory summary) {\\r\\n        TreeType[] memory activeTypes = sellerActiveTreeTypes[seller];\\r\\n        summary = new SellerSummary[](activeTypes.length);\\r\\n\\r\\n        for (uint256 i = 0; i < activeTypes.length; i++) {\\r\\n            TreeType treeType = activeTypes[i];\\r\\n            uint256[] memory tokenIds = sellerTreesByType[seller][treeType];\\r\\n\\r\\n            uint256 totalValue = 0;\\r\\n            uint256 activeCount = 0;\\r\\n\\r\\n            for (uint256 j = 0; j < tokenIds.length; j++) {\\r\\n                if (isListed[tokenIds[j]] && listings[tokenIds[j]].isActive) {\\r\\n                    totalValue += listings[tokenIds[j]].price;\\r\\n                    activeCount++;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            summary[i] = SellerSummary({\\r\\n                treeType: treeType,\\r\\n                quantity: activeCount,\\r\\n                averagePrice: activeCount > 0 ? totalValue / activeCount : 0\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // OWNER PROFILE FUNCTIONS\\r\\n\\r\\n    function getOwnerTreesByType(\\r\\n        address owner\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            TreeType[] memory treeTypes,\\r\\n            uint256[] memory quantities,\\r\\n            uint256[][] memory tokenIdsByType,\\r\\n            uint256[][] memory valuesByType\\r\\n        )\\r\\n    {\\r\\n        // First, count unique tree types owned\\r\\n        bool[5] memory hasType;\\r\\n        uint256 typeCount = 0;\\r\\n\\r\\n        for (uint256 i = 1; i < nextTokenId; i++) {\\r\\n            if (_ownerOf(i) == owner) {\\r\\n                TreeType treeType = trees[i].treeType;\\r\\n                if (!hasType[uint8(treeType)]) {\\r\\n                    hasType[uint8(treeType)] = true;\\r\\n                    typeCount++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        treeTypes = new TreeType[](typeCount);\\r\\n        quantities = new uint256[](typeCount);\\r\\n        tokenIdsByType = new uint256[][](typeCount);\\r\\n        valuesByType = new uint256[][](typeCount);\\r\\n\\r\\n        // Fill the arrays\\r\\n        uint256 currentIndex = 0;\\r\\n        for (uint8 t = 0; t < 5; t++) {\\r\\n            if (hasType[t]) {\\r\\n                TreeType treeType = TreeType(t);\\r\\n                treeTypes[currentIndex] = treeType;\\r\\n\\r\\n                // Count tokens of this type\\r\\n                uint256 count = 0;\\r\\n                for (uint256 i = 1; i < nextTokenId; i++) {\\r\\n                    if (_ownerOf(i) == owner && trees[i].treeType == treeType) {\\r\\n                        count++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                quantities[currentIndex] = count;\\r\\n                tokenIdsByType[currentIndex] = new uint256[](count);\\r\\n                valuesByType[currentIndex] = new uint256[](count);\\r\\n\\r\\n                // Fill token IDs and values\\r\\n                uint256 tokenIndex = 0;\\r\\n                for (uint256 i = 1; i < nextTokenId; i++) {\\r\\n                    if (_ownerOf(i) == owner && trees[i].treeType == treeType) {\\r\\n                        tokenIdsByType[currentIndex][tokenIndex] = i;\\r\\n                        valuesByType[currentIndex][tokenIndex] = getTreeValue(i);\\r\\n                        tokenIndex++;\\r\\n                    }\\r\\n                }\\r\\n                currentIndex++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // UTILITY FUNCTIONS\\r\\n\\r\\n    function getTreeDetails(\\r\\n        uint256 tokenId\\r\\n    ) public view returns (string memory treeName, uint256 currentValue, uint256 mintTime, address treeOwner) {\\r\\n        require(_ownerOf(tokenId) != address(0), \\\"Tree does not exist\\\");\\r\\n\\r\\n        Tree memory tree = trees[tokenId];\\r\\n        TreeInfo memory treeInfo = treeTypeInfo[tree.treeType];\\r\\n\\r\\n        treeName = treeInfo.name;\\r\\n        currentValue = getTreeValue(tokenId);\\r\\n        mintTime = tree.mintTime;\\r\\n        treeOwner = tree.owner;\\r\\n    }\\r\\n\\r\\n  function getTreeDetailsByOwner(\\r\\n    address _owner\\r\\n)\\r\\n    public\\r\\n    view\\r\\n    returns (\\r\\n        uint256[] memory tokenIds,\\r\\n        string[] memory treeNames,\\r\\n        uint256[] memory currentValues,\\r\\n        uint256[] memory mintTimes\\r\\n    )\\r\\n{\\r\\n    uint256 count = 0;\\r\\n    // First, count only unlisted trees\\r\\n    for (uint256 i = 1; i < nextTokenId; i++) {\\r\\n        if (_ownerOf(i) == _owner && !isListed[i]) {\\r\\n            count++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    tokenIds = new uint256[](count);\\r\\n    treeNames = new string[](count);\\r\\n    currentValues = new uint256[](count);\\r\\n    mintTimes = new uint256[](count);\\r\\n\\r\\n    uint256 index = 0;\\r\\n    for (uint256 i = 1; i < nextTokenId; i++) {\\r\\n        if (_ownerOf(i) == _owner && !isListed[i]) {\\r\\n            tokenIds[index] = i;\\r\\n\\r\\n            (string memory treeName, uint256 currentValue, uint256 mintTime, ) = getTreeDetails(i);\\r\\n\\r\\n            treeNames[index] = treeName;\\r\\n            currentValues[index] = currentValue;\\r\\n            mintTimes[index] = mintTime;\\r\\n\\r\\n            index++;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n    function getAllTreeTypes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint8[] memory treeTypes,\\r\\n            string[] memory names,\\r\\n            uint256[] memory basePrices,\\r\\n            uint256[] memory currentPrices,\\r\\n            uint256[] memory baseAppreciations,\\r\\n            uint256[] memory produceAppreciations\\r\\n        )\\r\\n    {\\r\\n        treeTypes = new uint8[](5);\\r\\n        names = new string[](5);\\r\\n        basePrices = new uint256[](5);\\r\\n        currentPrices = new uint256[](5);\\r\\n        baseAppreciations = new uint256[](5);\\r\\n        produceAppreciations = new uint256[](5);\\r\\n\\r\\n        for (uint i = 0; i < 5; i++) {\\r\\n            TreeType treeType = TreeType(i);\\r\\n            TreeInfo memory info = treeTypeInfo[treeType];\\r\\n\\r\\n            treeTypes[i] = uint8(treeType);\\r\\n            names[i] = info.name;\\r\\n            basePrices[i] = info.basePrice;\\r\\n            currentPrices[i] = getCurrentTreePrice(treeType);\\r\\n            baseAppreciations[i] = info.baseAppreciation;\\r\\n            produceAppreciations[i] = info.produceAppreciation;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTreeTypeInfo(TreeType _treeType) external view returns (TreeInfo memory) {\\r\\n        return treeTypeInfo[_treeType];\\r\\n    }\\r\\n\\r\\n    // Override transfer functions to update owner tree count and handle listings\\r\\n    function _update(address to, uint256 tokenId, address auth) internal override returns (address) {\\r\\n        address from = _ownerOf(tokenId);\\r\\n\\r\\n        if (from != address(0) && to != address(0) && from != to) {\\r\\n            ownerTreeCount[from]--;\\r\\n            ownerTreeCount[to]++;\\r\\n            trees[tokenId].owner = to;\\r\\n\\r\\n            // If tree is listed, remove it from marketplace when transferred\\r\\n            if (isListed[tokenId]) {\\r\\n                TreeType treeType = trees[tokenId].treeType;\\r\\n                _removeListing(tokenId, from, treeType);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    // Owner functions\\r\\n    function updateTreeTypeInfo(\\r\\n        TreeType _treeType,\\r\\n        string memory _name,\\r\\n        uint256 _basePrice,\\r\\n        uint256 _baseAppreciation,\\r\\n        uint256 _produceAppreciation\\r\\n    ) external onlyOwner {\\r\\n        treeTypeInfo[_treeType] = TreeInfo({\\r\\n            name: _name,\\r\\n            basePrice: _basePrice,\\r\\n            baseAppreciation: _baseAppreciation,\\r\\n            produceAppreciation: _produceAppreciation\\r\\n        });\\r\\n    }\\r\\n\\r\\n    function fundContract() external payable onlyOwner {}\\r\\n\\r\\n    function withdrawContractFunds() external onlyOwner {\\r\\n        uint256 balance = address(this).balance;\\r\\n        require(balance > 0, \\\"No funds to withdraw\\\");\\r\\n\\r\\n        (bool success, ) = owner().call{ value: balance }(\\\"\\\");\\r\\n        require(success, \\\"Withdraw failed\\\");\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0x6e4cca17c958eabb02b9ca2cbddf494d5399a3425d6511cfc4887554ef358305\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016009553480156200001657600080fd5b50336040518060400160405280600c81526020016b119c9d5a5d151c995953919560a21b81525060405180604001604052806005815260200164465452454560d81b81525081600090816200006c919062000527565b5060016200007b828262000527565b5050506001600160a01b038116620000ad57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b620000b88162000430565b5060016008556040805160c081018252600a60808201818152694d616e676f205472656560b01b60a0840152825266b1a2bc2ec50000602080840191909152600593830193909352600360608301526000805290915280517f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e390819062000140908262000527565b5060208201518160010155604082015181600201556060820151816003015590505060405180608001604052806040518060400160405280600c81526020016b436f636f6e7574205472656560a01b815250815260200167011c37937e0800008152602001600581526020016002815250600a600060016004811115620001cb57620001cb620005f3565b6004811115620001df57620001df620005f3565b8152602081019190915260400160002081518190620001ff908262000527565b5060208201518160010155604082015181600201556060820151816003015590505060405180608001604052806040518060400160405280600a8152602001694775617661205472656560b01b8152508152602001660aa87bee5380008152602001600581526020016004815250600a600060026004811115620002875762000287620005f3565b60048111156200029b576200029b620005f3565b8152602081019190915260400160002081518190620002bb908262000527565b5060208281015160018301556040808401516002840155606093840151600393840155805160c081018252600d608082019081526c52616d627574616e205472656560981b60a08301528152668e1bc9bf04000081840152600591810191909152928301829052600091909152600a905280517fa856840544dc26124927add067d799967eac11be13e14d82cc281ea46fa397599081906200035e908262000527565b506020828101516001830155604080840151600280850191909155606094850151600390940193909355805160c081018252600e608082019081526d4a61636b6672756974205472656560901b60a0830152815266d529ae9e86000081840152600591810191909152928301919091526004600052600a905280517fe1eb2b2161a492c07c5a334e48012567cba93ec021043f53c1955516a3c5a84190819062000409908262000527565b50602082015160018201556040820151600282015560609091015160039091015562000609565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620004ad57607f821691505b602082108103620004ce57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200052257600081815260208120601f850160051c81016020861015620004fd5750805b601f850160051c820191505b818110156200051e5782815560010162000509565b5050505b505050565b81516001600160401b0381111562000543576200054362000482565b6200055b8162000554845462000498565b84620004d4565b602080601f8311600181146200059357600084156200057a5750858301515b600019600386901b1c1916600185901b1785556200051e565b600085815260208120601f198616915b82811015620005c457888601518255948401946001909101908401620005a3565b5085821015620005e35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b61592380620006196000396000f3fe6080604052600436106102765760003560e01c80637a69c0891161014f578063c87b56dd116100c1578063e985e9c51161007a578063e985e9c514610863578063ec0bbf9314610883578063eee51b21146108b0578063f2fde38b146108dd578063f5d63c7d146108fd578063fcce48831461091d57600080fd5b8063c87b56dd1461073e578063c9e292691461075e578063d876abaa1461077e578063db2e21bc1461079e578063de74e57b146107b3578063e1ccc7681461083c57600080fd5b8063a22cb46511610113578063a22cb46514610691578063b4312736146106b1578063b51cb587146106c4578063b88d4fde146106f4578063babdb6c814610714578063bd097e211461073657600080fd5b80637a69c089146105d15780638da5cb5b146105fe57806395d89b411461061c5780639f085f4514610631578063a07a86031461066157600080fd5b80635207066c116101e8578063702ed135116101ac578063702ed135146104e557806370a0823114610505578063715018a61461052557806375794a3c1461053a57806376f32a70146105505780637a5080221461057257600080fd5b80635207066c1461043457806361cf4863146104475780636352211e1461047557806369cc2a14146104955780636a43f8ea146104c557600080fd5b806322f93c7b1161023a57806322f93c7b1461034857806323b872dd146103785780632505a1be146103985780632a1e141e146103c757806339f3dc5a146103f457806342842e0e1461041457600080fd5b806301ffc9a71461028257806306fdde03146102b7578063081812fc146102d9578063095ea7b314610311578063210094231461033357600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004614c48565b61094d565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102cc610978565b6040516102ae9190614cb5565b3480156102e557600080fd5b506102f96102f4366004614cc8565b610a0a565b6040516001600160a01b0390911681526020016102ae565b34801561031d57600080fd5b5061033161032c366004614cfd565b610a33565b005b34801561033f57600080fd5b50610331610a42565b34801561035457600080fd5b50610368610363366004614d27565b610b3a565b6040516102ae9493929190614dd5565b34801561038457600080fd5b50610331610393366004614e22565b610dce565b3480156103a457600080fd5b506103b86103b3366004614e6d565b610e59565b6040516102ae93929190614ea0565b3480156103d357600080fd5b506103e76103e2366004614ed9565b611187565b6040516102ae9190614ef4565b34801561040057600080fd5b5061033161040f366004614f3a565b6112a9565b34801561042057600080fd5b5061033161042f366004614e22565b611454565b610331610442366004614fae565b611474565b34801561045357600080fd5b50610467610462366004614cc8565b611918565b6040519081526020016102ae565b34801561048157600080fd5b506102f9610490366004614cc8565b611939565b3480156104a157600080fd5b506104b56104b0366004614cc8565b611944565b6040516102ae9493929190614fda565b3480156104d157600080fd5b506103316104e0366004614f3a565b611b2d565b3480156104f157600080fd5b50610467610500366004614cc8565b611e90565b34801561051157600080fd5b50610467610520366004614d27565b6120c9565b34801561053157600080fd5b50610331612111565b34801561054657600080fd5b5061046760095481565b34801561055c57600080fd5b50610565612125565b6040516102ae9190615012565b34801561057e57600080fd5b506105c161058d366004614cc8565b600b60205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b6040516102ae9493929190615097565b3480156105dd57600080fd5b506104676105ec366004614d27565b600c6020526000908152604090205481565b34801561060a57600080fd5b506007546001600160a01b03166102f9565b34801561062857600080fd5b506102cc61231a565b34801561063d57600080fd5b5061065161064c366004614d27565b612329565b6040516102ae949392919061511e565b34801561066d57600080fd5b5061068161067c366004614ed9565b61284d565b6040516102ae949392919061519b565b34801561069d57600080fd5b506103316106ac3660046151ca565b6128fd565b6103316106bf3660046152b1565b612908565b3480156106d057600080fd5b506102a26106df366004614d27565b60116020526000908152604090205460ff1681565b34801561070057600080fd5b5061033161070f3660046152fe565b612bdd565b34801561072057600080fd5b50610729612bf4565b6040516102ae9190615379565b61033161322e565b34801561074a57600080fd5b506102cc610759366004614cc8565b613236565b34801561076a57600080fd5b50610331610779366004615420565b613347565b34801561078a57600080fd5b50610467610799366004614fae565b6133dd565b3480156107aa57600080fd5b5061033161341b565b3480156107bf57600080fd5b5061080a6107ce366004614cc8565b600e602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff1685565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a0016102ae565b34801561084857600080fd5b5061085161345f565b6040516102ae96959493929190615488565b34801561086f57600080fd5b506102a261087e366004615536565b613762565b34801561088f57600080fd5b506108a361089e366004614cfd565b613790565b6040516102ae9190615560565b3480156108bc57600080fd5b506108d06108cb366004614d27565b6137d3565b6040516102ae919061556e565b3480156108e957600080fd5b506103316108f8366004614d27565b613b14565b34801561090957600080fd5b50610467610918366004614ed9565b613b4f565b34801561092957600080fd5b506102a2610938366004614cc8565b600d6020526000908152604090205460ff1681565b60006001600160e01b03198216632483248360e11b1480610972575061097282613cb6565b92915050565b606060008054610987906155c1565b80601f01602080910402602001604051908101604052809291908181526020018280546109b3906155c1565b8015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b5050505050905090565b6000610a1582613d06565b506000828152600460205260409020546001600160a01b0316610972565b610a3e828233613d3e565b5050565b610a4a613d4b565b4780610a945760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064015b60405180910390fd5b6000610aa86007546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610af2576040519150601f19603f3d011682016040523d82523d6000602084013e610af7565b606091505b5050905080610a3e5760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610a8b565b6060808080600060015b600954811015610bab57866001600160a01b0316610b6182613d78565b6001600160a01b0316148015610b8657506000818152600d602052604090205460ff16155b15610b995781610b9581615611565b9250505b80610ba381615611565b915050610b44565b50806001600160401b03811115610bc457610bc4615206565b604051908082528060200260200182016040528015610bed578160200160208202803683370190505b509450806001600160401b03811115610c0857610c08615206565b604051908082528060200260200182016040528015610c3b57816020015b6060815260200190600190039081610c265790505b509350806001600160401b03811115610c5657610c56615206565b604051908082528060200260200182016040528015610c7f578160200160208202803683370190505b509250806001600160401b03811115610c9a57610c9a615206565b604051908082528060200260200182016040528015610cc3578160200160208202803683370190505b509150600060015b600954811015610dc457876001600160a01b0316610ce882613d78565b6001600160a01b0316148015610d0d57506000818152600d602052604090205460ff16155b15610db25780878381518110610d2557610d2561562a565b6020026020010181815250506000806000610d3f84611944565b5092509250925082898681518110610d5957610d5961562a565b602002602001018190525081888681518110610d7757610d7761562a565b60200260200101818152505080878681518110610d9657610d9661562a565b602090810291909101015284610dab81615611565b9550505050505b80610dbc81615611565b915050610ccb565b5050509193509193565b6001600160a01b038216610df857604051633250574960e11b815260006004820152602401610a8b565b6000610e05838333613d93565b9050836001600160a01b0316816001600160a01b031614610e53576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610a8b565b50505050565b6001600160a01b0382166000908152600f60205260408120606091829182919081866004811115610e8c57610e8c61505f565b6004811115610e9d57610e9d61505f565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ef557602002820191906000526020600020905b815481526020019060010190808311610ee1575b505050505090506000805b8251811015610fa157600d6000848381518110610f1f57610f1f61562a565b60209081029190910181015182528101919091526040016000205460ff168015610f7c5750600e6000848381518110610f5a57610f5a61562a565b60209081029190910181015182528101919091526040016000206004015460ff165b15610f8f5781610f8b81615611565b9250505b80610f9981615611565b915050610f00565b50806001600160401b03811115610fba57610fba615206565b604051908082528060200260200182016040528015610fe3578160200160208202803683370190505b509450806001600160401b03811115610ffe57610ffe615206565b604051908082528060200260200182016040528015611027578160200160208202803683370190505b509350806001600160401b0381111561104257611042615206565b60405190808252806020026020018201604052801561106b578160200160208202803683370190505b5092506000805b835181101561117c57600084828151811061108f5761108f61562a565b6020908102919091018101516000818152600d90925260409091205490915060ff1680156110ce57506000818152600e602052604090206004015460ff165b1561116957808884815181106110e6576110e661562a565b602002602001018181525050600e60008281526020019081526020016000206003015487848151811061111b5761111b61562a565b602002602001018181525050600e6000828152602001908152602001600020600201548684815181106111505761115061562a565b60209081029190910101528261116581615611565b9350505b508061117481615611565b915050611072565b505050509250925092565b6111b26040518060800160405280606081526020016000815260200160008152602001600081525090565b600a60008360048111156111c8576111c861505f565b60048111156111d9576111d961505f565b8152602001908152602001600020604051806080016040529081600082018054611202906155c1565b80601f016020809104026020016040519081016040528092919081815260200182805461122e906155c1565b801561127b5780601f106112505761010080835404028352916020019161127b565b820191906000526020600020905b81548152906001019060200180831161125e57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815250509050919050565b6112b1613ea6565b806112f35760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610a8b565b60005b818110156114065760008383838181106113125761131261562a565b905060200201359050336001600160a01b031661132e82611939565b6001600160a01b0316146113845760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420746865206f776e6572206f66207468697320747265650000000000006044820152606401610a8b565b6000818152600d602052604090205460ff166113d45760405162461bcd60e51b815260206004820152600f60248201526e151c9959481b9bdd081b1a5cdd1959608a1b6044820152606401610a8b565b6000818152600b602052604090205460ff166113f1823383613ed0565b505080806113fe90615611565b9150506112f6565b50336001600160a01b03167f3fa3ddc780dd74af1f9341736df5507180f79d41b093b8550ca517732ec5951d8383604051611442929190615640565b60405180910390a2610a3e6001600855565b61146f83838360405180602001604052806000815250612bdd565b505050565b61147c613ea6565b600081116114cc5760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e2030006044820152606401610a8b565b6001600160a01b03831660009081526011602052604090205460ff166115345760405162461bcd60e51b815260206004820152601d60248201527f53656c6c657220686173206e6f20616374697665206c697374696e67730000006044820152606401610a8b565b6001600160a01b0383166000908152600f602052604081208184600481111561155f5761155f61505f565b60048111156115705761157061505f565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156115c857602002820191906000526020600020905b8154815260200190600101908083116115b4575b5050505050905081815110156116345760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f75676820747265657320617661696c61626c652066726f6d2060448201526a3a3434b99039b2b63632b960a91b6064820152608401610a8b565b6000826001600160401b0381111561164e5761164e615206565b604051908082528060200260200182016040528015611677578160200160208202803683370190505b50905060008060005b84518110801561168f57508582105b156117505760008582815181106116a8576116a861562a565b6020908102919091018101516000818152600d90925260409091205490915060ff1680156116e757506000818152600e602052604090206004015460ff165b1561173d57808584815181106116ff576116ff61562a565b602002602001018181525050600e6000828152602001908152602001600020600301548461172d9190615679565b93508261173981615611565b9350505b508061174881615611565b915050611680565b508481146117ac5760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f75676820616374697665206c697374696e677320617661696c60448201526361626c6560e01b6064820152608401610a8b565b813410156117f35760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610a8b565b60005b858110156118455760008482815181106118125761181261562a565b60200260200101519050611827818a8a613ed0565b6118328933836143c4565b508061183d81615611565b9150506117f6565b506040516001600160a01b0388169083156108fc029084906000818181858888f1935050505015801561187c573d6000803e3d6000fd5b50813411156118bd57336108fc611893843461568c565b6040518115909202916000818181858888f193505050501580156118bb573d6000803e3d6000fd5b505b336001600160a01b0316876001600160a01b03167f596718f13c536c1e489b6919d4d687f3fc102f8adda16653785f14f72c726679858560405161190292919061569f565b60405180910390a35050505061146f6001600855565b6012818154811061192857600080fd5b600091825260209091200154905081565b600061097282613d06565b6060600080808061195486613d78565b6001600160a01b0316036119a05760405162461bcd60e51b8152602060048201526013602482015272151c995948191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610a8b565b6000858152600b60205260408082208151608081019092528054829060ff1660048111156119d0576119d061505f565b60048111156119e1576119e161505f565b815260018201546020820152600282015460408201526003909101546001600160a01b03166060909101528051909150600090600a9082906004811115611a2a57611a2a61505f565b6004811115611a3b57611a3b61505f565b8152602001908152602001600020604051806080016040529081600082018054611a64906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a90906155c1565b8015611add5780601f10611ab257610100808354040283529160200191611add565b820191906000526020600020905b815481529060010190602001808311611ac057829003601f168201915b50505091835250506001820154602082015260028201546040820152600390910154606090910152805196509050611b1487611e90565b9450816020015193508160600151925050509193509193565b611b35613ea6565b80611b775760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610a8b565b60005b81811015611e54576000838383818110611b9657611b9661562a565b905060200201359050336001600160a01b0316611bb282611939565b6001600160a01b031614611c085760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420746865206f776e6572206f66207468697320747265650000000000006044820152606401610a8b565b6000818152600d602052604090205460ff1615611c5d5760405162461bcd60e51b8152602060048201526013602482015272151c995948185b1c9958591e481b1a5cdd1959606a1b6044820152606401610a8b565b6000611c6882611e90565b6040805160a081018252848152336020808301828152428486019081526060850187815260016080870181815260008c8152600e875289812098518955945188830180546001600160a01b039092166001600160a01b0319909216919091179055925160028801559051600387015590516004958601805491151560ff19928316179055600d84528683208054909116821790556012805491820190557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401889055600b825284812054928152600f90915292832093945060ff169291908390811115611d5757611d5761505f565b6004811115611d6857611d6861505f565b815260208082019290925260409081016000908120805460018101825590825283822001869055338152600f909252812090826004811115611dac57611dac61505f565b6004811115611dbd57611dbd61505f565b8152602081019190915260400160002054600103611e255733600090815260106020908152604082208054600181018255908352918190209082040180548392601f166101000a60ff81021990911690836004811115611e1f57611e1f61505f565b02179055505b5050336000908152601160205260409020805460ff191660011790555080611e4c81615611565b915050611b7a565b50336001600160a01b03167ffc4f8948e68b1d67bd9db6ff71f155b426a2d051f2e60143df0bd2d8c7aec7158383604051611442929190615640565b600080611e9c83613d78565b6001600160a01b031603611ee85760405162461bcd60e51b8152602060048201526013602482015272151c995948191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610a8b565b6000828152600b60205260408082208151608081019092528054829060ff166004811115611f1857611f1861505f565b6004811115611f2957611f2961505f565b815260018201546020820152600282015460408201526003909101546001600160a01b03166060909101528051909150600090600a9082906004811115611f7257611f7261505f565b6004811115611f8357611f8361505f565b8152602001908152602001600020604051806080016040529081600082018054611fac906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd8906155c1565b80156120255780601f10611ffa57610100808354040283529160200191612025565b820191906000526020600020905b81548152906001019060200180831161200857829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481525050905060006301e13380836020015142612065919061568c565b61206f91906156c1565b90506000826060015183604001516120879190615679565b9050600061209583836156e3565b6120a0906064615679565b905060648186604001516120b491906156e3565b6120be91906156c1565b979650505050505050565b60006001600160a01b0382166120f5576040516322718ad960e21b815260006004820152602401610a8b565b506001600160a01b031660009081526003602052604090205490565b612119613d4b565b6121236000614474565b565b60606000806012805490506001600160401b0381111561214757612147615206565b604051908082528060200260200182016040528015612170578160200160208202803683370190505b50905060005b60125481101561226e576000600e6000601284815481106121995761219961562a565b600091825260208083209091015483528201929092526040018120600101546001600160a01b03169150805b8581101561221a57826001600160a01b03168582815181106121e9576121e961562a565b60200260200101516001600160a01b031603612208576001915061221a565b8061221281615611565b9150506121c5565b508061225957818486815181106122335761223361562a565b6001600160a01b03909216602092830291909101909101528461225581615611565b9550505b5050808061226690615611565b915050612176565b50816001600160401b0381111561228757612287615206565b6040519080825280602002602001820160405280156122b0578160200160208202803683370190505b50925060005b82811015612314578181815181106122d0576122d061562a565b60200260200101518482815181106122ea576122ea61562a565b6001600160a01b03909216602092830291909101909101528061230c81615611565b9150506122b6565b50505090565b606060018054610987906155c1565b606080606080612337614c14565b600060015b6009548110156123fc57876001600160a01b031661235982613d78565b6001600160a01b0316036123ea576000818152600b602052604090205460ff168381600481111561238c5761238c61505f565b60ff166005811061239f5761239f61562a565b60200201516123e8576001848260048111156123bd576123bd61505f565b60ff16600581106123d0576123d061562a565b91151560209092020152826123e481615611565b9350505b505b806123f481615611565b91505061233c565b50806001600160401b0381111561241557612415615206565b60405190808252806020026020018201604052801561243e578160200160208202803683370190505b509550806001600160401b0381111561245957612459615206565b604051908082528060200260200182016040528015612482578160200160208202803683370190505b509450806001600160401b0381111561249d5761249d615206565b6040519080825280602002602001820160405280156124d057816020015b60608152602001906001900390816124bb5790505b509350806001600160401b038111156124eb576124eb615206565b60405190808252806020026020018201604052801561251e57816020015b60608152602001906001900390816125095790505b5092506000805b60058160ff16101561284257838160ff16600581106125465761254661562a565b6020020151156128305760008160ff1660048111156125675761256761505f565b90508089848151811061257c5761257c61562a565b602002602001019060048111156125955761259561505f565b908160048111156125a8576125a861505f565b905250600060015b60095481101561263a578b6001600160a01b03166125cd82613d78565b6001600160a01b031614801561261557508260048111156125f0576125f061505f565b6000828152600b602052604090205460ff1660048111156126135761261361505f565b145b15612628578161262481615611565b9250505b8061263281615611565b9150506125b0565b508089858151811061264e5761264e61562a565b602002602001018181525050806001600160401b0381111561267257612672615206565b60405190808252806020026020018201604052801561269b578160200160208202803683370190505b508885815181106126ae576126ae61562a565b6020026020010181905250806001600160401b038111156126d1576126d1615206565b6040519080825280602002602001820160405280156126fa578160200160208202803683370190505b5087858151811061270d5761270d61562a565b6020908102919091010152600060015b60095481101561281e578c6001600160a01b031661273a82613d78565b6001600160a01b0316148015612782575083600481111561275d5761275d61505f565b6000828152600b602052604090205460ff1660048111156127805761278061505f565b145b1561280c57808a878151811061279a5761279a61562a565b602002602001015183815181106127b3576127b361562a565b6020026020010181815250506127c881611e90565b8987815181106127da576127da61562a565b602002602001015183815181106127f3576127f361562a565b60209081029190910101528161280881615611565b9250505b8061281681615611565b91505061271d565b508461282981615611565b9550505050505b8061283a816156fa565b915050612525565b505050509193509193565b600a60205260009081526040902080548190612868906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054612894906155c1565b80156128e15780601f106128b6576101008083540402835291602001916128e1565b820191906000526020600020905b8154815290600101906020018083116128c457829003601f168201915b5050505050908060010154908060020154908060030154905084565b610a3e3383836144c6565b612910613ea6565b6000600a60008460048111156129285761292861505f565b60048111156129395761293961505f565b8152602001908152602001600020604051806080016040529081600082018054612962906155c1565b80601f016020809104026020016040519081016040528092919081815260200182805461298e906155c1565b80156129db5780601f106129b0576101008083540402835291602001916129db565b820191906000526020600020905b8154815290600101906020018083116129be57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505090506000612a0f84613b4f565b905080341015612a585760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610a8b565b6009805460009182612a6983615611565b919050559050612a793382614565565b612a83818561457f565b6040518060800160405280866004811115612aa057612aa061505f565b81524260208083019190915234604080840191909152336060909301929092526000848152600b9091522081518154829060ff19166001836004811115612ae957612ae961505f565b021790555060208281015160018301556040808401516002840155606090930151600390920180546001600160a01b0319166001600160a01b0390931692909217909155336000908152600c909152908120805491612b4783615611565b9190505550336001600160a01b0316817fbdd470aa38c4dc34533cb66c382a1754cddb22ebce90f0bdd993afc59b6a2ff68734604051612b88929190615719565b60405180910390a381341115612bd057336108fc612ba6843461568c565b6040518115909202916000818181858888f19350505050158015612bce573d6000803e3d6000fd5b505b505050610a3e6001600855565b612be8848484610dce565b610e53848484846145cf565b60606000612c00612125565b90506000805b8251811015612c705760106000848381518110612c2557612c2561562a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905082612c5c9190615679565b915080612c6881615611565b915050612c06565b50806001600160401b03811115612c8957612c89615206565b604051908082528060200260200182016040528015612ced57816020015b612cda6040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b815260200190600190039081612ca75790505b5092506000805b835181101561314e576000848281518110612d1157612d1161562a565b60200260200101519050600060106000836001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612dbc57602002820191906000526020600020906000905b82829054906101000a900460ff166004811115612d9a57612d9a61505f565b815260206001928301818104948501949093039092029101808411612d7b5790505b5050505050905060005b8151811015613138576000828281518110612de357612de361562a565b602002602001015190506000600f6000866001600160a01b03166001600160a01b031681526020019081526020016000206000836004811115612e2857612e2861505f565b6004811115612e3957612e3961505f565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612e9157602002820191906000526020600020905b815481526020019060010190808311612e7d575b5050505050905060008151111561312357600080600083516001600160401b03811115612ec057612ec0615206565b604051908082528060200260200182016040528015612ee9578160200160208202803683370190505b50905060005b845181101561300557600d6000868381518110612f0e57612f0e61562a565b60209081029190910181015182528101919091526040016000205460ff168015612f6b5750600e6000868381518110612f4957612f4961562a565b60209081029190910181015182528101919091526040016000206004015460ff165b15612ff357848181518110612f8257612f8261562a565b6020026020010151828481518110612f9c57612f9c61562a565b602002602001018181525050600e6000868381518110612fbe57612fbe61562a565b602002602001015181526020019081526020016000206003015484612fe39190615679565b935082612fef81615611565b9350505b80612ffd81615611565b915050612eef565b50811561311f576000826001600160401b0381111561302657613026615206565b60405190808252806020026020018201604052801561304f578160200160208202803683370190505b50905060005b838110156130a65782818151811061306f5761306f61562a565b60200260200101518282815181106130895761308961562a565b60209081029190910101528061309e81615611565b915050613055565b506040518060a001604052808a6001600160a01b031681526020018760048111156130d3576130d361505f565b8152602081018590526040016130e985876156c1565b8152602001828152508e8c815181106131045761310461562a565b60200260200101819052508a8061311a90615611565b9b5050505b5050505b5050808061313090615611565b915050612dc6565b505050808061314690615611565b915050612cf4565b506000816001600160401b0381111561316957613169615206565b6040519080825280602002602001820160405280156131cd57816020015b6131ba6040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b8152602001906001900390816131875790505b50905060005b82811015613225578581815181106131ed576131ed61562a565b60200260200101518282815181106132075761320761562a565b6020026020010181905250808061321d90615611565b9150506131d3565b50949350505050565b612123613d4b565b606061324182613d06565b506000828152600660205260408120805461325b906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054613287906155c1565b80156132d45780601f106132a9576101008083540402835291602001916132d4565b820191906000526020600020905b8154815290600101906020018083116132b757829003601f168201915b5050505050905060006132f260408051602081019091526000815290565b90508051600003613304575092915050565b81511561333657808260405160200161331e929190615734565b60405160208183030381529060405292505050919050565b61333f846146f8565b949350505050565b61334f613d4b565b604051806080016040528085815260200184815260200183815260200182815250600a60008760048111156133865761338661505f565b60048111156133975761339761505f565b81526020810191909152604001600020815181906133b590826157b1565b5060208201516001820155604082015160028201556060909101516003909101555050505050565b600f602052826000526040600020602052816000526040600020818154811061340557600080fd5b9060005260206000200160009250925050505481565b613423613d4b565b6007546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561345c573d6000803e3d6000fd5b50565b606080808080806005604051908082528060200260200182016040528015613491578160200160208202803683370190505b5060408051600580825260c08201909252919750816020015b60608152602001906001900390816134aa57505060408051600580825260c082019092529196506020820160a080368337505060408051600580825260c0820190925292965090506020820160a080368337505060408051600580825260c0820190925292955090506020820160a080368337505060408051600580825260c0820190925292945090506020820160a08036833701905050905060005b60058110156137595760008160048111156135645761356461505f565b90506000600a600083600481111561357e5761357e61505f565b600481111561358f5761358f61505f565b81526020019081526020016000206040518060800160405290816000820180546135b8906155c1565b80601f01602080910402602001604051908101604052809291908181526020018280546135e4906155c1565b80156136315780601f1061360657610100808354040283529160200191613631565b820191906000526020600020905b81548152906001019060200180831161361457829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481525050905081600481111561366c5761366c61505f565b89848151811061367e5761367e61562a565b602002602001019060ff16908160ff168152505080600001518884815181106136a9576136a961562a565b602002602001018190525080602001518784815181106136cb576136cb61562a565b6020026020010181815250506136e082613b4f565b8684815181106136f2576136f261562a565b60200260200101818152505080604001518584815181106137155761371561562a565b60200260200101818152505080606001518484815181106137385761373861562a565b6020026020010181815250505050808061375190615611565b915050613547565b50909192939495565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b601060205281600052604060002081815481106137ac57600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b6001600160a01b038116600090815260106020908152604080832080548251818502810185019093528083526060949383018282801561386257602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156138405761384061505f565b8152602060019283018181049485019490930390920291018084116138215790505b5050505050905080516001600160401b0381111561388257613882615206565b6040519080825280602002602001820160405280156138d857816020015b6138c56040805160608101909152806000815260200160008152602001600081525090565b8152602001906001900390816138a05790505b50915060005b8151811015613b0d5760008282815181106138fb576138fb61562a565b602002602001015190506000600f6000876001600160a01b03166001600160a01b0316815260200190815260200160002060008360048111156139405761394061505f565b60048111156139515761395161505f565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156139a957602002820191906000526020600020905b815481526020019060010190808311613995575b5050505050905060008060005b8351811015613a9457600d60008583815181106139d5576139d561562a565b60209081029190910181015182528101919091526040016000205460ff168015613a325750600e6000858381518110613a1057613a1061562a565b60209081029190910181015182528101919091526040016000206004015460ff165b15613a8257600e6000858381518110613a4d57613a4d61562a565b602002602001015181526020019081526020016000206003015483613a729190615679565b925081613a7e81615611565b9250505b80613a8c81615611565b9150506139b6565b506040518060600160405280856004811115613ab257613ab261505f565b815260200182815260200160008311613acc576000613ad6565b613ad683856156c1565b815250878681518110613aeb57613aeb61562a565b6020026020010181905250505050508080613b0590615611565b9150506138de565b5050919050565b613b1c613d4b565b6001600160a01b038116613b4657604051631e4fbdf760e01b815260006004820152602401610a8b565b61345c81614474565b600080600a6000846004811115613b6857613b6861505f565b6004811115613b7957613b7961505f565b8152602001908152602001600020604051806080016040529081600082018054613ba2906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054613bce906155c1565b8015613c1b5780601f10613bf057610100808354040283529160200191613c1b565b820191906000526020600020905b815481529060010190602001808311613bfe57829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481525050905060006001600954613c55919061568c565b9050600082606001518360400151613c6d9190615679565b90506000620186a082848660200151613c8691906156e3565b613c9091906156e3565b613c9a91906156c1565b9050808460200151613cac9190615679565b9695505050505050565b60006001600160e01b031982166380ac58cd60e01b1480613ce757506001600160e01b03198216635b5e139f60e01b145b8061097257506301ffc9a760e01b6001600160e01b0319831614610972565b600080613d1283613d78565b90506001600160a01b03811661097257604051637e27328960e01b815260048101849052602401610a8b565b61146f838383600161476d565b6007546001600160a01b031633146121235760405163118cdaa760e01b8152336004820152602401610a8b565b6000908152600260205260409020546001600160a01b031690565b600080613d9f84613d78565b90506001600160a01b03811615801590613dc157506001600160a01b03851615155b8015613ddf5750846001600160a01b0316816001600160a01b031614155b15613e92576001600160a01b0381166000908152600c60205260408120805491613e0883615870565b90915550506001600160a01b0385166000908152600c60205260408120805491613e3183615611565b90915550506000848152600b6020908152604080832060030180546001600160a01b0319166001600160a01b038a16179055600d90915290205460ff1615613e92576000848152600b602052604090205460ff16613e90858383613ed0565b505b613e9d858585614873565b95945050505050565b600260085403613ec957604051633ee5aeb560e01b815260040160405180910390fd5b6002600855565b6000838152600d60209081526040808320805460ff19908116909155600e9092528220600401805490911690555b601254811015613fb4578360128281548110613f1c57613f1c61562a565b906000526020600020015403613fa25760128054613f3c9060019061568c565b81548110613f4c57613f4c61562a565b906000526020600020015460128281548110613f6a57613f6a61562a565b6000918252602090912001556012805480613f8757613f87615887565b60019003818190600052602060002001600090559055613fb4565b80613fac81615611565b915050613efe565b506001600160a01b0382166000908152600f6020526040812081836004811115613fe057613fe061505f565b6004811115613ff157613ff161505f565b8152602001908152602001600020905060005b81548110156140b857848282815481106140205761402061562a565b9060005260206000200154036140a657815482906140409060019061568c565b815481106140505761405061562a565b906000526020600020015482828154811061406d5761406d61562a565b90600052602060002001819055508180548061408b5761408b615887565b600190038181906000526020600020016000905590556140b8565b806140b081615611565b915050614004565b506001600160a01b0383166000908152600f60205260408120908360048111156140e4576140e461505f565b60048111156140f5576140f561505f565b815260200190815260200160002080549050600003614269576001600160a01b0383166000908152601060205260408120905b8154811015614266578360048111156141435761414361505f565b8282815481106141555761415561562a565b90600052602060002090602091828204019190069054906101000a900460ff1660048111156141865761418661505f565b03614254578154829061419b9060019061568c565b815481106141ab576141ab61562a565b90600052602060002090602091828204019190069054906101000a900460ff168282815481106141dd576141dd61562a565b90600052602060002090602091828204019190066101000a81548160ff021916908360048111156142105761421061505f565b02179055508180548061422557614225615887565b60019003818190600052602060002090602091828204019190066101000a81549060ff02191690559055614266565b8061425e81615611565b915050614128565b50505b6001600160a01b0383166000908152601060209081526040808320805482518185028101850190935280835284938301828280156142f657602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156142d4576142d461505f565b8152602060019283018181049485019490930390920291018084116142b55790505b5050505050905060005b8151811015614393576001600160a01b0386166000908152600f60205260408120835182908590859081106143375761433761562a565b602002602001015160048111156143505761435061505f565b60048111156143615761436161505f565b815260208101919091526040016000205411156143815760019250614393565b8061438b81615611565b915050614300565b50506001600160a01b03939093166000908152601160205260409020805460ff191693151593909317909255505050565b6001600160a01b0382166143ee57604051633250574960e11b815260006004820152602401610a8b565b60006143fc83836000613d93565b90506001600160a01b03811661442857604051637e27328960e01b815260048101839052602401610a8b565b836001600160a01b0316816001600160a01b031614610e53576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610a8b565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166144f857604051630b61174360e31b81526001600160a01b0383166004820152602401610a8b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a3e828260405180602001604052806000815250614967565b600082815260066020526040902061459782826157b1565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6001600160a01b0383163b15610e5357604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061461190339088908790879060040161589d565b6020604051808303816000875af192505050801561464c575060408051601f3d908101601f19168201909252614649918101906158d0565b60015b6146b5573d80801561467a576040519150601f19603f3d011682016040523d82523d6000602084013e61467f565b606091505b5080516000036146ad57604051633250574960e11b81526001600160a01b0385166004820152602401610a8b565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146146f157604051633250574960e11b81526001600160a01b0385166004820152602401610a8b565b5050505050565b606061470382613d06565b50600061471b60408051602081019091526000815290565b9050600081511161473b5760405180602001604052806000815250614766565b806147458461497e565b604051602001614756929190615734565b6040516020818303038152906040525b9392505050565b808061478157506001600160a01b03821615155b1561484357600061479184613d06565b90506001600160a01b038316158015906147bd5750826001600160a01b0316816001600160a01b031614155b80156147d057506147ce8184613762565b155b156147f95760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610a8b565b81156148415783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60008061487f84613d78565b90506001600160a01b0383161561489b5761489b818486614a10565b6001600160a01b038116156148d9576148b860008560008061476d565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615614908576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6149718383614a74565b61146f60008484846145cf565b6060600061498b83614ad9565b60010190506000816001600160401b038111156149aa576149aa615206565b6040519080825280601f01601f1916602001820160405280156149d4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846149de57509392505050565b614a1b838383614bb1565b61146f576001600160a01b038316614a4957604051637e27328960e01b815260048101829052602401610a8b565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610a8b565b6001600160a01b038216614a9e57604051633250574960e11b815260006004820152602401610a8b565b6000614aac83836000613d93565b90506001600160a01b0381161561146f576040516339e3563760e11b815260006004820152602401610a8b565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614b185772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614b44576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614b6257662386f26fc10000830492506010015b6305f5e1008310614b7a576305f5e100830492506008015b6127108310614b8e57612710830492506004015b60648310614ba0576064830492506002015b600a83106109725760010192915050565b60006001600160a01b0383161580159061333f5750826001600160a01b0316846001600160a01b03161480614beb5750614beb8484613762565b8061333f5750506000908152600460205260409020546001600160a01b03908116911614919050565b6040518060a001604052806005906020820280368337509192915050565b6001600160e01b03198116811461345c57600080fd5b600060208284031215614c5a57600080fd5b813561476681614c32565b60005b83811015614c80578181015183820152602001614c68565b50506000910152565b60008151808452614ca1816020860160208601614c65565b601f01601f19169290920160200192915050565b6020815260006147666020830184614c89565b600060208284031215614cda57600080fd5b5035919050565b80356001600160a01b0381168114614cf857600080fd5b919050565b60008060408385031215614d1057600080fd5b614d1983614ce1565b946020939093013593505050565b600060208284031215614d3957600080fd5b61476682614ce1565b600081518084526020808501945080840160005b83811015614d7257815187529582019590820190600101614d56565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614dc857601f19868403018952614db6838351614c89565b98840198925090830190600101614d9a565b5090979650505050505050565b608081526000614de86080830187614d42565b8281036020840152614dfa8187614d7d565b90508281036040840152614e0e8186614d42565b905082810360608401526120be8185614d42565b600080600060608486031215614e3757600080fd5b614e4084614ce1565b9250614e4e60208501614ce1565b9150604084013590509250925092565b803560058110614cf857600080fd5b60008060408385031215614e8057600080fd5b614e8983614ce1565b9150614e9760208401614e5e565b90509250929050565b606081526000614eb36060830186614d42565b8281036020840152614ec58186614d42565b90508281036040840152613cac8185614d42565b600060208284031215614eeb57600080fd5b61476682614e5e565b602081526000825160806020840152614f1060a0840182614c89565b90506020840151604084015260408401516060840152606084015160808401528091505092915050565b60008060208385031215614f4d57600080fd5b82356001600160401b0380821115614f6457600080fd5b818501915085601f830112614f7857600080fd5b813581811115614f8757600080fd5b8660208260051b8501011115614f9c57600080fd5b60209290920196919550909350505050565b600080600060608486031215614fc357600080fd5b614fcc84614ce1565b9250614e4e60208501614e5e565b608081526000614fed6080830187614c89565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b6020808252825182820181905260009190848201906040850190845b818110156150535783516001600160a01b03168352928401929184019160010161502e565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6005811061509357634e487b7160e01b600052602160045260246000fd5b9052565b608081016150a58287615075565b602082019490945260408101929092526001600160a01b0316606090910152919050565b600081518084526020808501808196508360051b8101915082860160005b858110156151115782840389526150ff848351614d42565b988501989350908401906001016150e7565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b8281101561515e5761514e848351615075565b928401929084019060010161513b565b505050838103828501526151728188614d42565b915050828103604084015261518781866150c9565b905082810360608401526120be81856150c9565b6080815260006151ae6080830187614c89565b6020830195909552506040810192909252606090910152919050565b600080604083850312156151dd57600080fd5b6151e683614ce1565b9150602083013580151581146151fb57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561523657615236615206565b604051601f8501601f19908116603f0116810190828211818310171561525e5761525e615206565b8160405280935085815286868601111561527757600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126152a257600080fd5b6147668383356020850161521c565b600080604083850312156152c457600080fd5b6152cd83614e5e565b915060208301356001600160401b038111156152e857600080fd5b6152f485828601615291565b9150509250929050565b6000806000806080858703121561531457600080fd5b61531d85614ce1565b935061532b60208601614ce1565b92506040850135915060608501356001600160401b0381111561534d57600080fd5b8501601f8101871361535e57600080fd5b61536d8782356020840161521c565b91505092959194509250565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561541257888303603f19018552815180516001600160a01b031684528781015160a0906153d38a870182615075565b508188015185890152606080830151908601526080918201519185018190526153fe81860183614d42565b9689019694505050908601906001016153a0565b509098975050505050505050565b600080600080600060a0868803121561543857600080fd5b61544186614e5e565b945060208601356001600160401b0381111561545c57600080fd5b61546888828901615291565b959895975050505060408401359360608101359360809091013592509050565b60c0808252875190820181905260009060209060e0840190828b01845b828110156154c457815160ff16845292840192908401906001016154a5565b505050838103828501526154d8818a614d7d565b91505082810360408401526154ed8188614d42565b905082810360608401526155018187614d42565b905082810360808401526155158186614d42565b905082810360a08401526155298185614d42565b9998505050505050505050565b6000806040838503121561554957600080fd5b61555283614ce1565b9150614e9760208401614ce1565b602081016109728284615075565b602080825282518282018190526000919060409081850190868401855b828110156151115781516155a0858251615075565b8087015185880152850151858501526060909301929085019060010161558b565b600181811c908216806155d557607f821691505b6020821081036155f557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201615623576156236155fb565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6020808252810182905260006001600160fb1b0383111561566057600080fd5b8260051b80856040850137919091016040019392505050565b80820180821115610972576109726155fb565b81810381811115610972576109726155fb565b6040815260006156b26040830185614d42565b90508260208301529392505050565b6000826156de57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610972576109726155fb565b600060ff821660ff8103615710576157106155fb565b60010192915050565b604081016157278285615075565b8260208301529392505050565b60008351615746818460208801614c65565b83519083019061575a818360208801614c65565b01949350505050565b601f82111561146f57600081815260208120601f850160051c8101602086101561578a5750805b601f850160051c820191505b818110156157a957828155600101615796565b505050505050565b81516001600160401b038111156157ca576157ca615206565b6157de816157d884546155c1565b84615763565b602080601f83116001811461581357600084156157fb5750858301515b600019600386901b1c1916600185901b1785556157a9565b600085815260208120601f198616915b8281101561584257888601518255948401946001909101908401615823565b50858210156158605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008161587f5761587f6155fb565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613cac90830184614c89565b6000602082840312156158e257600080fd5b815161476681614c3256fea2646970667358221220d7e0398b850b17aec599e905516d02486f27fed944fa21cf332ee174a575138d64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106102765760003560e01c80637a69c0891161014f578063c87b56dd116100c1578063e985e9c51161007a578063e985e9c514610863578063ec0bbf9314610883578063eee51b21146108b0578063f2fde38b146108dd578063f5d63c7d146108fd578063fcce48831461091d57600080fd5b8063c87b56dd1461073e578063c9e292691461075e578063d876abaa1461077e578063db2e21bc1461079e578063de74e57b146107b3578063e1ccc7681461083c57600080fd5b8063a22cb46511610113578063a22cb46514610691578063b4312736146106b1578063b51cb587146106c4578063b88d4fde146106f4578063babdb6c814610714578063bd097e211461073657600080fd5b80637a69c089146105d15780638da5cb5b146105fe57806395d89b411461061c5780639f085f4514610631578063a07a86031461066157600080fd5b80635207066c116101e8578063702ed135116101ac578063702ed135146104e557806370a0823114610505578063715018a61461052557806375794a3c1461053a57806376f32a70146105505780637a5080221461057257600080fd5b80635207066c1461043457806361cf4863146104475780636352211e1461047557806369cc2a14146104955780636a43f8ea146104c557600080fd5b806322f93c7b1161023a57806322f93c7b1461034857806323b872dd146103785780632505a1be146103985780632a1e141e146103c757806339f3dc5a146103f457806342842e0e1461041457600080fd5b806301ffc9a71461028257806306fdde03146102b7578063081812fc146102d9578063095ea7b314610311578063210094231461033357600080fd5b3661027d57005b600080fd5b34801561028e57600080fd5b506102a261029d366004614c48565b61094d565b60405190151581526020015b60405180910390f35b3480156102c357600080fd5b506102cc610978565b6040516102ae9190614cb5565b3480156102e557600080fd5b506102f96102f4366004614cc8565b610a0a565b6040516001600160a01b0390911681526020016102ae565b34801561031d57600080fd5b5061033161032c366004614cfd565b610a33565b005b34801561033f57600080fd5b50610331610a42565b34801561035457600080fd5b50610368610363366004614d27565b610b3a565b6040516102ae9493929190614dd5565b34801561038457600080fd5b50610331610393366004614e22565b610dce565b3480156103a457600080fd5b506103b86103b3366004614e6d565b610e59565b6040516102ae93929190614ea0565b3480156103d357600080fd5b506103e76103e2366004614ed9565b611187565b6040516102ae9190614ef4565b34801561040057600080fd5b5061033161040f366004614f3a565b6112a9565b34801561042057600080fd5b5061033161042f366004614e22565b611454565b610331610442366004614fae565b611474565b34801561045357600080fd5b50610467610462366004614cc8565b611918565b6040519081526020016102ae565b34801561048157600080fd5b506102f9610490366004614cc8565b611939565b3480156104a157600080fd5b506104b56104b0366004614cc8565b611944565b6040516102ae9493929190614fda565b3480156104d157600080fd5b506103316104e0366004614f3a565b611b2d565b3480156104f157600080fd5b50610467610500366004614cc8565b611e90565b34801561051157600080fd5b50610467610520366004614d27565b6120c9565b34801561053157600080fd5b50610331612111565b34801561054657600080fd5b5061046760095481565b34801561055c57600080fd5b50610565612125565b6040516102ae9190615012565b34801561057e57600080fd5b506105c161058d366004614cc8565b600b60205260009081526040902080546001820154600283015460039093015460ff9092169290916001600160a01b031684565b6040516102ae9493929190615097565b3480156105dd57600080fd5b506104676105ec366004614d27565b600c6020526000908152604090205481565b34801561060a57600080fd5b506007546001600160a01b03166102f9565b34801561062857600080fd5b506102cc61231a565b34801561063d57600080fd5b5061065161064c366004614d27565b612329565b6040516102ae949392919061511e565b34801561066d57600080fd5b5061068161067c366004614ed9565b61284d565b6040516102ae949392919061519b565b34801561069d57600080fd5b506103316106ac3660046151ca565b6128fd565b6103316106bf3660046152b1565b612908565b3480156106d057600080fd5b506102a26106df366004614d27565b60116020526000908152604090205460ff1681565b34801561070057600080fd5b5061033161070f3660046152fe565b612bdd565b34801561072057600080fd5b50610729612bf4565b6040516102ae9190615379565b61033161322e565b34801561074a57600080fd5b506102cc610759366004614cc8565b613236565b34801561076a57600080fd5b50610331610779366004615420565b613347565b34801561078a57600080fd5b50610467610799366004614fae565b6133dd565b3480156107aa57600080fd5b5061033161341b565b3480156107bf57600080fd5b5061080a6107ce366004614cc8565b600e602052600090815260409020805460018201546002830154600384015460049094015492936001600160a01b039092169290919060ff1685565b604080519586526001600160a01b0390941660208601529284019190915260608301521515608082015260a0016102ae565b34801561084857600080fd5b5061085161345f565b6040516102ae96959493929190615488565b34801561086f57600080fd5b506102a261087e366004615536565b613762565b34801561088f57600080fd5b506108a361089e366004614cfd565b613790565b6040516102ae9190615560565b3480156108bc57600080fd5b506108d06108cb366004614d27565b6137d3565b6040516102ae919061556e565b3480156108e957600080fd5b506103316108f8366004614d27565b613b14565b34801561090957600080fd5b50610467610918366004614ed9565b613b4f565b34801561092957600080fd5b506102a2610938366004614cc8565b600d6020526000908152604090205460ff1681565b60006001600160e01b03198216632483248360e11b1480610972575061097282613cb6565b92915050565b606060008054610987906155c1565b80601f01602080910402602001604051908101604052809291908181526020018280546109b3906155c1565b8015610a005780601f106109d557610100808354040283529160200191610a00565b820191906000526020600020905b8154815290600101906020018083116109e357829003601f168201915b5050505050905090565b6000610a1582613d06565b506000828152600460205260409020546001600160a01b0316610972565b610a3e828233613d3e565b5050565b610a4a613d4b565b4780610a945760405162461bcd60e51b81526020600482015260146024820152734e6f2066756e647320746f20776974686472617760601b60448201526064015b60405180910390fd5b6000610aa86007546001600160a01b031690565b6001600160a01b03168260405160006040518083038185875af1925050503d8060008114610af2576040519150601f19603f3d011682016040523d82523d6000602084013e610af7565b606091505b5050905080610a3e5760405162461bcd60e51b815260206004820152600f60248201526e15da5d1a191c985dc819985a5b1959608a1b6044820152606401610a8b565b6060808080600060015b600954811015610bab57866001600160a01b0316610b6182613d78565b6001600160a01b0316148015610b8657506000818152600d602052604090205460ff16155b15610b995781610b9581615611565b9250505b80610ba381615611565b915050610b44565b50806001600160401b03811115610bc457610bc4615206565b604051908082528060200260200182016040528015610bed578160200160208202803683370190505b509450806001600160401b03811115610c0857610c08615206565b604051908082528060200260200182016040528015610c3b57816020015b6060815260200190600190039081610c265790505b509350806001600160401b03811115610c5657610c56615206565b604051908082528060200260200182016040528015610c7f578160200160208202803683370190505b509250806001600160401b03811115610c9a57610c9a615206565b604051908082528060200260200182016040528015610cc3578160200160208202803683370190505b509150600060015b600954811015610dc457876001600160a01b0316610ce882613d78565b6001600160a01b0316148015610d0d57506000818152600d602052604090205460ff16155b15610db25780878381518110610d2557610d2561562a565b6020026020010181815250506000806000610d3f84611944565b5092509250925082898681518110610d5957610d5961562a565b602002602001018190525081888681518110610d7757610d7761562a565b60200260200101818152505080878681518110610d9657610d9661562a565b602090810291909101015284610dab81615611565b9550505050505b80610dbc81615611565b915050610ccb565b5050509193509193565b6001600160a01b038216610df857604051633250574960e11b815260006004820152602401610a8b565b6000610e05838333613d93565b9050836001600160a01b0316816001600160a01b031614610e53576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610a8b565b50505050565b6001600160a01b0382166000908152600f60205260408120606091829182919081866004811115610e8c57610e8c61505f565b6004811115610e9d57610e9d61505f565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610ef557602002820191906000526020600020905b815481526020019060010190808311610ee1575b505050505090506000805b8251811015610fa157600d6000848381518110610f1f57610f1f61562a565b60209081029190910181015182528101919091526040016000205460ff168015610f7c5750600e6000848381518110610f5a57610f5a61562a565b60209081029190910181015182528101919091526040016000206004015460ff165b15610f8f5781610f8b81615611565b9250505b80610f9981615611565b915050610f00565b50806001600160401b03811115610fba57610fba615206565b604051908082528060200260200182016040528015610fe3578160200160208202803683370190505b509450806001600160401b03811115610ffe57610ffe615206565b604051908082528060200260200182016040528015611027578160200160208202803683370190505b509350806001600160401b0381111561104257611042615206565b60405190808252806020026020018201604052801561106b578160200160208202803683370190505b5092506000805b835181101561117c57600084828151811061108f5761108f61562a565b6020908102919091018101516000818152600d90925260409091205490915060ff1680156110ce57506000818152600e602052604090206004015460ff165b1561116957808884815181106110e6576110e661562a565b602002602001018181525050600e60008281526020019081526020016000206003015487848151811061111b5761111b61562a565b602002602001018181525050600e6000828152602001908152602001600020600201548684815181106111505761115061562a565b60209081029190910101528261116581615611565b9350505b508061117481615611565b915050611072565b505050509250925092565b6111b26040518060800160405280606081526020016000815260200160008152602001600081525090565b600a60008360048111156111c8576111c861505f565b60048111156111d9576111d961505f565b8152602001908152602001600020604051806080016040529081600082018054611202906155c1565b80601f016020809104026020016040519081016040528092919081815260200182805461122e906155c1565b801561127b5780601f106112505761010080835404028352916020019161127b565b820191906000526020600020905b81548152906001019060200180831161125e57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815250509050919050565b6112b1613ea6565b806112f35760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610a8b565b60005b818110156114065760008383838181106113125761131261562a565b905060200201359050336001600160a01b031661132e82611939565b6001600160a01b0316146113845760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420746865206f776e6572206f66207468697320747265650000000000006044820152606401610a8b565b6000818152600d602052604090205460ff166113d45760405162461bcd60e51b815260206004820152600f60248201526e151c9959481b9bdd081b1a5cdd1959608a1b6044820152606401610a8b565b6000818152600b602052604090205460ff166113f1823383613ed0565b505080806113fe90615611565b9150506112f6565b50336001600160a01b03167f3fa3ddc780dd74af1f9341736df5507180f79d41b093b8550ca517732ec5951d8383604051611442929190615640565b60405180910390a2610a3e6001600855565b61146f83838360405180602001604052806000815250612bdd565b505050565b61147c613ea6565b600081116114cc5760405162461bcd60e51b815260206004820152601f60248201527f5175616e74697479206d7573742062652067726561746572207468616e2030006044820152606401610a8b565b6001600160a01b03831660009081526011602052604090205460ff166115345760405162461bcd60e51b815260206004820152601d60248201527f53656c6c657220686173206e6f20616374697665206c697374696e67730000006044820152606401610a8b565b6001600160a01b0383166000908152600f602052604081208184600481111561155f5761155f61505f565b60048111156115705761157061505f565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156115c857602002820191906000526020600020905b8154815260200190600101908083116115b4575b5050505050905081815110156116345760405162461bcd60e51b815260206004820152602b60248201527f4e6f7420656e6f75676820747265657320617661696c61626c652066726f6d2060448201526a3a3434b99039b2b63632b960a91b6064820152608401610a8b565b6000826001600160401b0381111561164e5761164e615206565b604051908082528060200260200182016040528015611677578160200160208202803683370190505b50905060008060005b84518110801561168f57508582105b156117505760008582815181106116a8576116a861562a565b6020908102919091018101516000818152600d90925260409091205490915060ff1680156116e757506000818152600e602052604090206004015460ff165b1561173d57808584815181106116ff576116ff61562a565b602002602001018181525050600e6000828152602001908152602001600020600301548461172d9190615679565b93508261173981615611565b9350505b508061174881615611565b915050611680565b508481146117ac5760405162461bcd60e51b8152602060048201526024808201527f4e6f7420656e6f75676820616374697665206c697374696e677320617661696c60448201526361626c6560e01b6064820152608401610a8b565b813410156117f35760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610a8b565b60005b858110156118455760008482815181106118125761181261562a565b60200260200101519050611827818a8a613ed0565b6118328933836143c4565b508061183d81615611565b9150506117f6565b506040516001600160a01b0388169083156108fc029084906000818181858888f1935050505015801561187c573d6000803e3d6000fd5b50813411156118bd57336108fc611893843461568c565b6040518115909202916000818181858888f193505050501580156118bb573d6000803e3d6000fd5b505b336001600160a01b0316876001600160a01b03167f596718f13c536c1e489b6919d4d687f3fc102f8adda16653785f14f72c726679858560405161190292919061569f565b60405180910390a35050505061146f6001600855565b6012818154811061192857600080fd5b600091825260209091200154905081565b600061097282613d06565b6060600080808061195486613d78565b6001600160a01b0316036119a05760405162461bcd60e51b8152602060048201526013602482015272151c995948191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610a8b565b6000858152600b60205260408082208151608081019092528054829060ff1660048111156119d0576119d061505f565b60048111156119e1576119e161505f565b815260018201546020820152600282015460408201526003909101546001600160a01b03166060909101528051909150600090600a9082906004811115611a2a57611a2a61505f565b6004811115611a3b57611a3b61505f565b8152602001908152602001600020604051806080016040529081600082018054611a64906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054611a90906155c1565b8015611add5780601f10611ab257610100808354040283529160200191611add565b820191906000526020600020905b815481529060010190602001808311611ac057829003601f168201915b50505091835250506001820154602082015260028201546040820152600390910154606090910152805196509050611b1487611e90565b9450816020015193508160600151925050509193509193565b611b35613ea6565b80611b775760405162461bcd60e51b8152602060048201526012602482015271139bc81d1bdad95b9cc81c1c9bdd9a59195960721b6044820152606401610a8b565b60005b81811015611e54576000838383818110611b9657611b9661562a565b905060200201359050336001600160a01b0316611bb282611939565b6001600160a01b031614611c085760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420746865206f776e6572206f66207468697320747265650000000000006044820152606401610a8b565b6000818152600d602052604090205460ff1615611c5d5760405162461bcd60e51b8152602060048201526013602482015272151c995948185b1c9958591e481b1a5cdd1959606a1b6044820152606401610a8b565b6000611c6882611e90565b6040805160a081018252848152336020808301828152428486019081526060850187815260016080870181815260008c8152600e875289812098518955945188830180546001600160a01b039092166001600160a01b0319909216919091179055925160028801559051600387015590516004958601805491151560ff19928316179055600d84528683208054909116821790556012805491820190557fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344401889055600b825284812054928152600f90915292832093945060ff169291908390811115611d5757611d5761505f565b6004811115611d6857611d6861505f565b815260208082019290925260409081016000908120805460018101825590825283822001869055338152600f909252812090826004811115611dac57611dac61505f565b6004811115611dbd57611dbd61505f565b8152602081019190915260400160002054600103611e255733600090815260106020908152604082208054600181018255908352918190209082040180548392601f166101000a60ff81021990911690836004811115611e1f57611e1f61505f565b02179055505b5050336000908152601160205260409020805460ff191660011790555080611e4c81615611565b915050611b7a565b50336001600160a01b03167ffc4f8948e68b1d67bd9db6ff71f155b426a2d051f2e60143df0bd2d8c7aec7158383604051611442929190615640565b600080611e9c83613d78565b6001600160a01b031603611ee85760405162461bcd60e51b8152602060048201526013602482015272151c995948191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606401610a8b565b6000828152600b60205260408082208151608081019092528054829060ff166004811115611f1857611f1861505f565b6004811115611f2957611f2961505f565b815260018201546020820152600282015460408201526003909101546001600160a01b03166060909101528051909150600090600a9082906004811115611f7257611f7261505f565b6004811115611f8357611f8361505f565b8152602001908152602001600020604051806080016040529081600082018054611fac906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd8906155c1565b80156120255780601f10611ffa57610100808354040283529160200191612025565b820191906000526020600020905b81548152906001019060200180831161200857829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481525050905060006301e13380836020015142612065919061568c565b61206f91906156c1565b90506000826060015183604001516120879190615679565b9050600061209583836156e3565b6120a0906064615679565b905060648186604001516120b491906156e3565b6120be91906156c1565b979650505050505050565b60006001600160a01b0382166120f5576040516322718ad960e21b815260006004820152602401610a8b565b506001600160a01b031660009081526003602052604090205490565b612119613d4b565b6121236000614474565b565b60606000806012805490506001600160401b0381111561214757612147615206565b604051908082528060200260200182016040528015612170578160200160208202803683370190505b50905060005b60125481101561226e576000600e6000601284815481106121995761219961562a565b600091825260208083209091015483528201929092526040018120600101546001600160a01b03169150805b8581101561221a57826001600160a01b03168582815181106121e9576121e961562a565b60200260200101516001600160a01b031603612208576001915061221a565b8061221281615611565b9150506121c5565b508061225957818486815181106122335761223361562a565b6001600160a01b03909216602092830291909101909101528461225581615611565b9550505b5050808061226690615611565b915050612176565b50816001600160401b0381111561228757612287615206565b6040519080825280602002602001820160405280156122b0578160200160208202803683370190505b50925060005b82811015612314578181815181106122d0576122d061562a565b60200260200101518482815181106122ea576122ea61562a565b6001600160a01b03909216602092830291909101909101528061230c81615611565b9150506122b6565b50505090565b606060018054610987906155c1565b606080606080612337614c14565b600060015b6009548110156123fc57876001600160a01b031661235982613d78565b6001600160a01b0316036123ea576000818152600b602052604090205460ff168381600481111561238c5761238c61505f565b60ff166005811061239f5761239f61562a565b60200201516123e8576001848260048111156123bd576123bd61505f565b60ff16600581106123d0576123d061562a565b91151560209092020152826123e481615611565b9350505b505b806123f481615611565b91505061233c565b50806001600160401b0381111561241557612415615206565b60405190808252806020026020018201604052801561243e578160200160208202803683370190505b509550806001600160401b0381111561245957612459615206565b604051908082528060200260200182016040528015612482578160200160208202803683370190505b509450806001600160401b0381111561249d5761249d615206565b6040519080825280602002602001820160405280156124d057816020015b60608152602001906001900390816124bb5790505b509350806001600160401b038111156124eb576124eb615206565b60405190808252806020026020018201604052801561251e57816020015b60608152602001906001900390816125095790505b5092506000805b60058160ff16101561284257838160ff16600581106125465761254661562a565b6020020151156128305760008160ff1660048111156125675761256761505f565b90508089848151811061257c5761257c61562a565b602002602001019060048111156125955761259561505f565b908160048111156125a8576125a861505f565b905250600060015b60095481101561263a578b6001600160a01b03166125cd82613d78565b6001600160a01b031614801561261557508260048111156125f0576125f061505f565b6000828152600b602052604090205460ff1660048111156126135761261361505f565b145b15612628578161262481615611565b9250505b8061263281615611565b9150506125b0565b508089858151811061264e5761264e61562a565b602002602001018181525050806001600160401b0381111561267257612672615206565b60405190808252806020026020018201604052801561269b578160200160208202803683370190505b508885815181106126ae576126ae61562a565b6020026020010181905250806001600160401b038111156126d1576126d1615206565b6040519080825280602002602001820160405280156126fa578160200160208202803683370190505b5087858151811061270d5761270d61562a565b6020908102919091010152600060015b60095481101561281e578c6001600160a01b031661273a82613d78565b6001600160a01b0316148015612782575083600481111561275d5761275d61505f565b6000828152600b602052604090205460ff1660048111156127805761278061505f565b145b1561280c57808a878151811061279a5761279a61562a565b602002602001015183815181106127b3576127b361562a565b6020026020010181815250506127c881611e90565b8987815181106127da576127da61562a565b602002602001015183815181106127f3576127f361562a565b60209081029190910101528161280881615611565b9250505b8061281681615611565b91505061271d565b508461282981615611565b9550505050505b8061283a816156fa565b915050612525565b505050509193509193565b600a60205260009081526040902080548190612868906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054612894906155c1565b80156128e15780601f106128b6576101008083540402835291602001916128e1565b820191906000526020600020905b8154815290600101906020018083116128c457829003601f168201915b5050505050908060010154908060020154908060030154905084565b610a3e3383836144c6565b612910613ea6565b6000600a60008460048111156129285761292861505f565b60048111156129395761293961505f565b8152602001908152602001600020604051806080016040529081600082018054612962906155c1565b80601f016020809104026020016040519081016040528092919081815260200182805461298e906155c1565b80156129db5780601f106129b0576101008083540402835291602001916129db565b820191906000526020600020905b8154815290600101906020018083116129be57829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505090506000612a0f84613b4f565b905080341015612a585760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b6044820152606401610a8b565b6009805460009182612a6983615611565b919050559050612a793382614565565b612a83818561457f565b6040518060800160405280866004811115612aa057612aa061505f565b81524260208083019190915234604080840191909152336060909301929092526000848152600b9091522081518154829060ff19166001836004811115612ae957612ae961505f565b021790555060208281015160018301556040808401516002840155606090930151600390920180546001600160a01b0319166001600160a01b0390931692909217909155336000908152600c909152908120805491612b4783615611565b9190505550336001600160a01b0316817fbdd470aa38c4dc34533cb66c382a1754cddb22ebce90f0bdd993afc59b6a2ff68734604051612b88929190615719565b60405180910390a381341115612bd057336108fc612ba6843461568c565b6040518115909202916000818181858888f19350505050158015612bce573d6000803e3d6000fd5b505b505050610a3e6001600855565b612be8848484610dce565b610e53848484846145cf565b60606000612c00612125565b90506000805b8251811015612c705760106000848381518110612c2557612c2561562a565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054905082612c5c9190615679565b915080612c6881615611565b915050612c06565b50806001600160401b03811115612c8957612c89615206565b604051908082528060200260200182016040528015612ced57816020015b612cda6040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b815260200190600190039081612ca75790505b5092506000805b835181101561314e576000848281518110612d1157612d1161562a565b60200260200101519050600060106000836001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612dbc57602002820191906000526020600020906000905b82829054906101000a900460ff166004811115612d9a57612d9a61505f565b815260206001928301818104948501949093039092029101808411612d7b5790505b5050505050905060005b8151811015613138576000828281518110612de357612de361562a565b602002602001015190506000600f6000866001600160a01b03166001600160a01b031681526020019081526020016000206000836004811115612e2857612e2861505f565b6004811115612e3957612e3961505f565b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612e9157602002820191906000526020600020905b815481526020019060010190808311612e7d575b5050505050905060008151111561312357600080600083516001600160401b03811115612ec057612ec0615206565b604051908082528060200260200182016040528015612ee9578160200160208202803683370190505b50905060005b845181101561300557600d6000868381518110612f0e57612f0e61562a565b60209081029190910181015182528101919091526040016000205460ff168015612f6b5750600e6000868381518110612f4957612f4961562a565b60209081029190910181015182528101919091526040016000206004015460ff165b15612ff357848181518110612f8257612f8261562a565b6020026020010151828481518110612f9c57612f9c61562a565b602002602001018181525050600e6000868381518110612fbe57612fbe61562a565b602002602001015181526020019081526020016000206003015484612fe39190615679565b935082612fef81615611565b9350505b80612ffd81615611565b915050612eef565b50811561311f576000826001600160401b0381111561302657613026615206565b60405190808252806020026020018201604052801561304f578160200160208202803683370190505b50905060005b838110156130a65782818151811061306f5761306f61562a565b60200260200101518282815181106130895761308961562a565b60209081029190910101528061309e81615611565b915050613055565b506040518060a001604052808a6001600160a01b031681526020018760048111156130d3576130d361505f565b8152602081018590526040016130e985876156c1565b8152602001828152508e8c815181106131045761310461562a565b60200260200101819052508a8061311a90615611565b9b5050505b5050505b5050808061313090615611565b915050612dc6565b505050808061314690615611565b915050612cf4565b506000816001600160401b0381111561316957613169615206565b6040519080825280602002602001820160405280156131cd57816020015b6131ba6040805160a081019091526000808252602082019081526020016000815260200160008152602001606081525090565b8152602001906001900390816131875790505b50905060005b82811015613225578581815181106131ed576131ed61562a565b60200260200101518282815181106132075761320761562a565b6020026020010181905250808061321d90615611565b9150506131d3565b50949350505050565b612123613d4b565b606061324182613d06565b506000828152600660205260408120805461325b906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054613287906155c1565b80156132d45780601f106132a9576101008083540402835291602001916132d4565b820191906000526020600020905b8154815290600101906020018083116132b757829003601f168201915b5050505050905060006132f260408051602081019091526000815290565b90508051600003613304575092915050565b81511561333657808260405160200161331e929190615734565b60405160208183030381529060405292505050919050565b61333f846146f8565b949350505050565b61334f613d4b565b604051806080016040528085815260200184815260200183815260200182815250600a60008760048111156133865761338661505f565b60048111156133975761339761505f565b81526020810191909152604001600020815181906133b590826157b1565b5060208201516001820155604082015160028201556060909101516003909101555050505050565b600f602052826000526040600020602052816000526040600020818154811061340557600080fd5b9060005260206000200160009250925050505481565b613423613d4b565b6007546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561345c573d6000803e3d6000fd5b50565b606080808080806005604051908082528060200260200182016040528015613491578160200160208202803683370190505b5060408051600580825260c08201909252919750816020015b60608152602001906001900390816134aa57505060408051600580825260c082019092529196506020820160a080368337505060408051600580825260c0820190925292965090506020820160a080368337505060408051600580825260c0820190925292955090506020820160a080368337505060408051600580825260c0820190925292945090506020820160a08036833701905050905060005b60058110156137595760008160048111156135645761356461505f565b90506000600a600083600481111561357e5761357e61505f565b600481111561358f5761358f61505f565b81526020019081526020016000206040518060800160405290816000820180546135b8906155c1565b80601f01602080910402602001604051908101604052809291908181526020018280546135e4906155c1565b80156136315780601f1061360657610100808354040283529160200191613631565b820191906000526020600020905b81548152906001019060200180831161361457829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481525050905081600481111561366c5761366c61505f565b89848151811061367e5761367e61562a565b602002602001019060ff16908160ff168152505080600001518884815181106136a9576136a961562a565b602002602001018190525080602001518784815181106136cb576136cb61562a565b6020026020010181815250506136e082613b4f565b8684815181106136f2576136f261562a565b60200260200101818152505080604001518584815181106137155761371561562a565b60200260200101818152505080606001518484815181106137385761373861562a565b6020026020010181815250505050808061375190615611565b915050613547565b50909192939495565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b601060205281600052604060002081815481106137ac57600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b6001600160a01b038116600090815260106020908152604080832080548251818502810185019093528083526060949383018282801561386257602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156138405761384061505f565b8152602060019283018181049485019490930390920291018084116138215790505b5050505050905080516001600160401b0381111561388257613882615206565b6040519080825280602002602001820160405280156138d857816020015b6138c56040805160608101909152806000815260200160008152602001600081525090565b8152602001906001900390816138a05790505b50915060005b8151811015613b0d5760008282815181106138fb576138fb61562a565b602002602001015190506000600f6000876001600160a01b03166001600160a01b0316815260200190815260200160002060008360048111156139405761394061505f565b60048111156139515761395161505f565b81526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156139a957602002820191906000526020600020905b815481526020019060010190808311613995575b5050505050905060008060005b8351811015613a9457600d60008583815181106139d5576139d561562a565b60209081029190910181015182528101919091526040016000205460ff168015613a325750600e6000858381518110613a1057613a1061562a565b60209081029190910181015182528101919091526040016000206004015460ff165b15613a8257600e6000858381518110613a4d57613a4d61562a565b602002602001015181526020019081526020016000206003015483613a729190615679565b925081613a7e81615611565b9250505b80613a8c81615611565b9150506139b6565b506040518060600160405280856004811115613ab257613ab261505f565b815260200182815260200160008311613acc576000613ad6565b613ad683856156c1565b815250878681518110613aeb57613aeb61562a565b6020026020010181905250505050508080613b0590615611565b9150506138de565b5050919050565b613b1c613d4b565b6001600160a01b038116613b4657604051631e4fbdf760e01b815260006004820152602401610a8b565b61345c81614474565b600080600a6000846004811115613b6857613b6861505f565b6004811115613b7957613b7961505f565b8152602001908152602001600020604051806080016040529081600082018054613ba2906155c1565b80601f0160208091040260200160405190810160405280929190818152602001828054613bce906155c1565b8015613c1b5780601f10613bf057610100808354040283529160200191613c1b565b820191906000526020600020905b815481529060010190602001808311613bfe57829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481525050905060006001600954613c55919061568c565b9050600082606001518360400151613c6d9190615679565b90506000620186a082848660200151613c8691906156e3565b613c9091906156e3565b613c9a91906156c1565b9050808460200151613cac9190615679565b9695505050505050565b60006001600160e01b031982166380ac58cd60e01b1480613ce757506001600160e01b03198216635b5e139f60e01b145b8061097257506301ffc9a760e01b6001600160e01b0319831614610972565b600080613d1283613d78565b90506001600160a01b03811661097257604051637e27328960e01b815260048101849052602401610a8b565b61146f838383600161476d565b6007546001600160a01b031633146121235760405163118cdaa760e01b8152336004820152602401610a8b565b6000908152600260205260409020546001600160a01b031690565b600080613d9f84613d78565b90506001600160a01b03811615801590613dc157506001600160a01b03851615155b8015613ddf5750846001600160a01b0316816001600160a01b031614155b15613e92576001600160a01b0381166000908152600c60205260408120805491613e0883615870565b90915550506001600160a01b0385166000908152600c60205260408120805491613e3183615611565b90915550506000848152600b6020908152604080832060030180546001600160a01b0319166001600160a01b038a16179055600d90915290205460ff1615613e92576000848152600b602052604090205460ff16613e90858383613ed0565b505b613e9d858585614873565b95945050505050565b600260085403613ec957604051633ee5aeb560e01b815260040160405180910390fd5b6002600855565b6000838152600d60209081526040808320805460ff19908116909155600e9092528220600401805490911690555b601254811015613fb4578360128281548110613f1c57613f1c61562a565b906000526020600020015403613fa25760128054613f3c9060019061568c565b81548110613f4c57613f4c61562a565b906000526020600020015460128281548110613f6a57613f6a61562a565b6000918252602090912001556012805480613f8757613f87615887565b60019003818190600052602060002001600090559055613fb4565b80613fac81615611565b915050613efe565b506001600160a01b0382166000908152600f6020526040812081836004811115613fe057613fe061505f565b6004811115613ff157613ff161505f565b8152602001908152602001600020905060005b81548110156140b857848282815481106140205761402061562a565b9060005260206000200154036140a657815482906140409060019061568c565b815481106140505761405061562a565b906000526020600020015482828154811061406d5761406d61562a565b90600052602060002001819055508180548061408b5761408b615887565b600190038181906000526020600020016000905590556140b8565b806140b081615611565b915050614004565b506001600160a01b0383166000908152600f60205260408120908360048111156140e4576140e461505f565b60048111156140f5576140f561505f565b815260200190815260200160002080549050600003614269576001600160a01b0383166000908152601060205260408120905b8154811015614266578360048111156141435761414361505f565b8282815481106141555761415561562a565b90600052602060002090602091828204019190069054906101000a900460ff1660048111156141865761418661505f565b03614254578154829061419b9060019061568c565b815481106141ab576141ab61562a565b90600052602060002090602091828204019190069054906101000a900460ff168282815481106141dd576141dd61562a565b90600052602060002090602091828204019190066101000a81548160ff021916908360048111156142105761421061505f565b02179055508180548061422557614225615887565b60019003818190600052602060002090602091828204019190066101000a81549060ff02191690559055614266565b8061425e81615611565b915050614128565b50505b6001600160a01b0383166000908152601060209081526040808320805482518185028101850190935280835284938301828280156142f657602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156142d4576142d461505f565b8152602060019283018181049485019490930390920291018084116142b55790505b5050505050905060005b8151811015614393576001600160a01b0386166000908152600f60205260408120835182908590859081106143375761433761562a565b602002602001015160048111156143505761435061505f565b60048111156143615761436161505f565b815260208101919091526040016000205411156143815760019250614393565b8061438b81615611565b915050614300565b50506001600160a01b03939093166000908152601160205260409020805460ff191693151593909317909255505050565b6001600160a01b0382166143ee57604051633250574960e11b815260006004820152602401610a8b565b60006143fc83836000613d93565b90506001600160a01b03811661442857604051637e27328960e01b815260048101839052602401610a8b565b836001600160a01b0316816001600160a01b031614610e53576040516364283d7b60e01b81526001600160a01b0380861660048301526024820184905282166044820152606401610a8b565b600780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166144f857604051630b61174360e31b81526001600160a01b0383166004820152602401610a8b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a3e828260405180602001604052806000815250614967565b600082815260066020526040902061459782826157b1565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce79060200160405180910390a15050565b6001600160a01b0383163b15610e5357604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061461190339088908790879060040161589d565b6020604051808303816000875af192505050801561464c575060408051601f3d908101601f19168201909252614649918101906158d0565b60015b6146b5573d80801561467a576040519150601f19603f3d011682016040523d82523d6000602084013e61467f565b606091505b5080516000036146ad57604051633250574960e11b81526001600160a01b0385166004820152602401610a8b565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b146146f157604051633250574960e11b81526001600160a01b0385166004820152602401610a8b565b5050505050565b606061470382613d06565b50600061471b60408051602081019091526000815290565b9050600081511161473b5760405180602001604052806000815250614766565b806147458461497e565b604051602001614756929190615734565b6040516020818303038152906040525b9392505050565b808061478157506001600160a01b03821615155b1561484357600061479184613d06565b90506001600160a01b038316158015906147bd5750826001600160a01b0316816001600160a01b031614155b80156147d057506147ce8184613762565b155b156147f95760405163a9fbf51f60e01b81526001600160a01b0384166004820152602401610a8b565b81156148415783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60008061487f84613d78565b90506001600160a01b0383161561489b5761489b818486614a10565b6001600160a01b038116156148d9576148b860008560008061476d565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b03851615614908576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6149718383614a74565b61146f60008484846145cf565b6060600061498b83614ad9565b60010190506000816001600160401b038111156149aa576149aa615206565b6040519080825280601f01601f1916602001820160405280156149d4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846149de57509392505050565b614a1b838383614bb1565b61146f576001600160a01b038316614a4957604051637e27328960e01b815260048101829052602401610a8b565b60405163177e802f60e01b81526001600160a01b038316600482015260248101829052604401610a8b565b6001600160a01b038216614a9e57604051633250574960e11b815260006004820152602401610a8b565b6000614aac83836000613d93565b90506001600160a01b0381161561146f576040516339e3563760e11b815260006004820152602401610a8b565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310614b185772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310614b44576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310614b6257662386f26fc10000830492506010015b6305f5e1008310614b7a576305f5e100830492506008015b6127108310614b8e57612710830492506004015b60648310614ba0576064830492506002015b600a83106109725760010192915050565b60006001600160a01b0383161580159061333f5750826001600160a01b0316846001600160a01b03161480614beb5750614beb8484613762565b8061333f5750506000908152600460205260409020546001600160a01b03908116911614919050565b6040518060a001604052806005906020820280368337509192915050565b6001600160e01b03198116811461345c57600080fd5b600060208284031215614c5a57600080fd5b813561476681614c32565b60005b83811015614c80578181015183820152602001614c68565b50506000910152565b60008151808452614ca1816020860160208601614c65565b601f01601f19169290920160200192915050565b6020815260006147666020830184614c89565b600060208284031215614cda57600080fd5b5035919050565b80356001600160a01b0381168114614cf857600080fd5b919050565b60008060408385031215614d1057600080fd5b614d1983614ce1565b946020939093013593505050565b600060208284031215614d3957600080fd5b61476682614ce1565b600081518084526020808501945080840160005b83811015614d7257815187529582019590820190600101614d56565b509495945050505050565b600082825180855260208086019550808260051b84010181860160005b84811015614dc857601f19868403018952614db6838351614c89565b98840198925090830190600101614d9a565b5090979650505050505050565b608081526000614de86080830187614d42565b8281036020840152614dfa8187614d7d565b90508281036040840152614e0e8186614d42565b905082810360608401526120be8185614d42565b600080600060608486031215614e3757600080fd5b614e4084614ce1565b9250614e4e60208501614ce1565b9150604084013590509250925092565b803560058110614cf857600080fd5b60008060408385031215614e8057600080fd5b614e8983614ce1565b9150614e9760208401614e5e565b90509250929050565b606081526000614eb36060830186614d42565b8281036020840152614ec58186614d42565b90508281036040840152613cac8185614d42565b600060208284031215614eeb57600080fd5b61476682614e5e565b602081526000825160806020840152614f1060a0840182614c89565b90506020840151604084015260408401516060840152606084015160808401528091505092915050565b60008060208385031215614f4d57600080fd5b82356001600160401b0380821115614f6457600080fd5b818501915085601f830112614f7857600080fd5b813581811115614f8757600080fd5b8660208260051b8501011115614f9c57600080fd5b60209290920196919550909350505050565b600080600060608486031215614fc357600080fd5b614fcc84614ce1565b9250614e4e60208501614e5e565b608081526000614fed6080830187614c89565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b6020808252825182820181905260009190848201906040850190845b818110156150535783516001600160a01b03168352928401929184019160010161502e565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6005811061509357634e487b7160e01b600052602160045260246000fd5b9052565b608081016150a58287615075565b602082019490945260408101929092526001600160a01b0316606090910152919050565b600081518084526020808501808196508360051b8101915082860160005b858110156151115782840389526150ff848351614d42565b988501989350908401906001016150e7565b5091979650505050505050565b6080808252855190820181905260009060209060a0840190828901845b8281101561515e5761514e848351615075565b928401929084019060010161513b565b505050838103828501526151728188614d42565b915050828103604084015261518781866150c9565b905082810360608401526120be81856150c9565b6080815260006151ae6080830187614c89565b6020830195909552506040810192909252606090910152919050565b600080604083850312156151dd57600080fd5b6151e683614ce1565b9150602083013580151581146151fb57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561523657615236615206565b604051601f8501601f19908116603f0116810190828211818310171561525e5761525e615206565b8160405280935085815286868601111561527757600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126152a257600080fd5b6147668383356020850161521c565b600080604083850312156152c457600080fd5b6152cd83614e5e565b915060208301356001600160401b038111156152e857600080fd5b6152f485828601615291565b9150509250929050565b6000806000806080858703121561531457600080fd5b61531d85614ce1565b935061532b60208601614ce1565b92506040850135915060608501356001600160401b0381111561534d57600080fd5b8501601f8101871361535e57600080fd5b61536d8782356020840161521c565b91505092959194509250565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561541257888303603f19018552815180516001600160a01b031684528781015160a0906153d38a870182615075565b508188015185890152606080830151908601526080918201519185018190526153fe81860183614d42565b9689019694505050908601906001016153a0565b509098975050505050505050565b600080600080600060a0868803121561543857600080fd5b61544186614e5e565b945060208601356001600160401b0381111561545c57600080fd5b61546888828901615291565b959895975050505060408401359360608101359360809091013592509050565b60c0808252875190820181905260009060209060e0840190828b01845b828110156154c457815160ff16845292840192908401906001016154a5565b505050838103828501526154d8818a614d7d565b91505082810360408401526154ed8188614d42565b905082810360608401526155018187614d42565b905082810360808401526155158186614d42565b905082810360a08401526155298185614d42565b9998505050505050505050565b6000806040838503121561554957600080fd5b61555283614ce1565b9150614e9760208401614ce1565b602081016109728284615075565b602080825282518282018190526000919060409081850190868401855b828110156151115781516155a0858251615075565b8087015185880152850151858501526060909301929085019060010161558b565b600181811c908216806155d557607f821691505b6020821081036155f557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600060018201615623576156236155fb565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6020808252810182905260006001600160fb1b0383111561566057600080fd5b8260051b80856040850137919091016040019392505050565b80820180821115610972576109726155fb565b81810381811115610972576109726155fb565b6040815260006156b26040830185614d42565b90508260208301529392505050565b6000826156de57634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417610972576109726155fb565b600060ff821660ff8103615710576157106155fb565b60010192915050565b604081016157278285615075565b8260208301529392505050565b60008351615746818460208801614c65565b83519083019061575a818360208801614c65565b01949350505050565b601f82111561146f57600081815260208120601f850160051c8101602086101561578a5750805b601f850160051c820191505b818110156157a957828155600101615796565b505050505050565b81516001600160401b038111156157ca576157ca615206565b6157de816157d884546155c1565b84615763565b602080601f83116001811461581357600084156157fb5750858301515b600019600386901b1c1916600185901b1785556157a9565b600085815260208120601f198616915b8281101561584257888601518255948401946001909101908401615823565b50858210156158605787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008161587f5761587f6155fb565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613cac90830184614c89565b6000602082840312156158e257600080fd5b815161476681614c3256fea2646970667358221220d7e0398b850b17aec599e905516d02486f27fed944fa21cf332ee174a575138d64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 349,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 351,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 355,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 359,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 363,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 369,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1488,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 8,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1655,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3177,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "nextTokenId",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3240,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "treeTypeInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_enum(TreeType)3183,t_struct(TreeInfo)3192_storage)"
      },
      {
        "astId": 3245,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "trees",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Tree)3202_storage)"
      },
      {
        "astId": 3249,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "ownerTreeCount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3253,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "isListed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3258,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "listings",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Listing)3213_storage)"
      },
      {
        "astId": 3266,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "sellerTreesByType",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_enum(TreeType)3183,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 3272,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "sellerActiveTreeTypes",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_enum(TreeType)3183)dyn_storage)"
      },
      {
        "astId": 3276,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "hasActiveListings",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3279,
        "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
        "label": "activeListings",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_enum(TreeType)3183)dyn_storage": {
        "base": "t_enum(TreeType)3183",
        "encoding": "dynamic_array",
        "label": "enum FruitTreeNFT.TreeType[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(TreeType)3183": {
        "encoding": "inplace",
        "label": "enum FruitTreeNFT.TreeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_enum(TreeType)3183)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum FruitTreeNFT.TreeType[])",
        "numberOfBytes": "32",
        "value": "t_array(t_enum(TreeType)3183)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_enum(TreeType)3183,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum FruitTreeNFT.TreeType => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TreeType)3183,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(TreeType)3183,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TreeType)3183",
        "label": "mapping(enum FruitTreeNFT.TreeType => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_enum(TreeType)3183,t_struct(TreeInfo)3192_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TreeType)3183",
        "label": "mapping(enum FruitTreeNFT.TreeType => struct FruitTreeNFT.TreeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TreeInfo)3192_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Listing)3213_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FruitTreeNFT.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3213_storage"
      },
      "t_mapping(t_uint256,t_struct(Tree)3202_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct FruitTreeNFT.Tree)",
        "numberOfBytes": "32",
        "value": "t_struct(Tree)3202_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Listing)3213_storage": {
        "encoding": "inplace",
        "label": "struct FruitTreeNFT.Listing",
        "members": [
          {
            "astId": 3204,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3206,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3208,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "listingTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3210,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3212,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Tree)3202_storage": {
        "encoding": "inplace",
        "label": "struct FruitTreeNFT.Tree",
        "members": [
          {
            "astId": 3195,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "treeType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(TreeType)3183"
          },
          {
            "astId": 3197,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "mintTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3199,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "initialPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3201,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TreeInfo)3192_storage": {
        "encoding": "inplace",
        "label": "struct FruitTreeNFT.TreeInfo",
        "members": [
          {
            "astId": 3185,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 3187,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "basePrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3189,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "baseAppreciation",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3191,
            "contract": "contracts/TreeNFT.sol:FruitTreeNFT",
            "label": "produceAppreciation",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}